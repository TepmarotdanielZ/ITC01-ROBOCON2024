
Main_Board_Farmer_GamefieldBlue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000738  08009e68  08009e68  00019e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5a0  0800a5a0  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5a0  0800a5a0  0001a5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5a8  0800a5a8  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5a8  0800a5a8  0001a5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800a5b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020148  2**0
                  CONTENTS
 10 .bss          00000570  20000148  20000148  00020148  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006b8  200006b8  00020148  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015642  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003297  00000000  00000000  000357ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  00038a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001280  00000000  00000000  00039e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002562d  00000000  00000000  0003b0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001861d  00000000  00000000  00060715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df779  00000000  00000000  00078d32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001584ab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000604c  00000000  00000000  001584fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000148 	.word	0x20000148
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e50 	.word	0x08009e50

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	08009e50 	.word	0x08009e50

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c20:	f000 b974 	b.w	8000f0c <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468e      	mov	lr, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d14d      	bne.n	8000ce6 <__udivmoddi4+0xaa>
 8000c4a:	428a      	cmp	r2, r1
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	d969      	bls.n	8000d24 <__udivmoddi4+0xe8>
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	b152      	cbz	r2, 8000c6c <__udivmoddi4+0x30>
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	f1c2 0120 	rsb	r1, r2, #32
 8000c5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c66:	ea41 0e03 	orr.w	lr, r1, r3
 8000c6a:	4094      	lsls	r4, r2
 8000c6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c70:	0c21      	lsrs	r1, r4, #16
 8000c72:	fbbe f6f8 	udiv	r6, lr, r8
 8000c76:	fa1f f78c 	uxth.w	r7, ip
 8000c7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c82:	fb06 f107 	mul.w	r1, r6, r7
 8000c86:	4299      	cmp	r1, r3
 8000c88:	d90a      	bls.n	8000ca0 <__udivmoddi4+0x64>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c92:	f080 811f 	bcs.w	8000ed4 <__udivmoddi4+0x298>
 8000c96:	4299      	cmp	r1, r3
 8000c98:	f240 811c 	bls.w	8000ed4 <__udivmoddi4+0x298>
 8000c9c:	3e02      	subs	r6, #2
 8000c9e:	4463      	add	r3, ip
 8000ca0:	1a5b      	subs	r3, r3, r1
 8000ca2:	b2a4      	uxth	r4, r4
 8000ca4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cb0:	fb00 f707 	mul.w	r7, r0, r7
 8000cb4:	42a7      	cmp	r7, r4
 8000cb6:	d90a      	bls.n	8000cce <__udivmoddi4+0x92>
 8000cb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cc0:	f080 810a 	bcs.w	8000ed8 <__udivmoddi4+0x29c>
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	f240 8107 	bls.w	8000ed8 <__udivmoddi4+0x29c>
 8000cca:	4464      	add	r4, ip
 8000ccc:	3802      	subs	r0, #2
 8000cce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd2:	1be4      	subs	r4, r4, r7
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	b11d      	cbz	r5, 8000ce0 <__udivmoddi4+0xa4>
 8000cd8:	40d4      	lsrs	r4, r2
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0xc2>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80ef 	beq.w	8000ece <__udivmoddi4+0x292>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x160>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0xd4>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80f9 	bhi.w	8000f02 <__udivmoddi4+0x2c6>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0303 	sbc.w	r3, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	469e      	mov	lr, r3
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0e0      	beq.n	8000ce0 <__udivmoddi4+0xa4>
 8000d1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d22:	e7dd      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000d24:	b902      	cbnz	r2, 8000d28 <__udivmoddi4+0xec>
 8000d26:	deff      	udf	#255	; 0xff
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	f040 8092 	bne.w	8000e56 <__udivmoddi4+0x21a>
 8000d32:	eba1 010c 	sub.w	r1, r1, ip
 8000d36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3a:	fa1f fe8c 	uxth.w	lr, ip
 8000d3e:	2601      	movs	r6, #1
 8000d40:	0c20      	lsrs	r0, r4, #16
 8000d42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d46:	fb07 1113 	mls	r1, r7, r3, r1
 8000d4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d4e:	fb0e f003 	mul.w	r0, lr, r3
 8000d52:	4288      	cmp	r0, r1
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x12c>
 8000d56:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x12a>
 8000d60:	4288      	cmp	r0, r1
 8000d62:	f200 80cb 	bhi.w	8000efc <__udivmoddi4+0x2c0>
 8000d66:	4643      	mov	r3, r8
 8000d68:	1a09      	subs	r1, r1, r0
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d70:	fb07 1110 	mls	r1, r7, r0, r1
 8000d74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d78:	fb0e fe00 	mul.w	lr, lr, r0
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x156>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d88:	d202      	bcs.n	8000d90 <__udivmoddi4+0x154>
 8000d8a:	45a6      	cmp	lr, r4
 8000d8c:	f200 80bb 	bhi.w	8000f06 <__udivmoddi4+0x2ca>
 8000d90:	4608      	mov	r0, r1
 8000d92:	eba4 040e 	sub.w	r4, r4, lr
 8000d96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d9a:	e79c      	b.n	8000cd6 <__udivmoddi4+0x9a>
 8000d9c:	f1c6 0720 	rsb	r7, r6, #32
 8000da0:	40b3      	lsls	r3, r6
 8000da2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000da6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000daa:	fa20 f407 	lsr.w	r4, r0, r7
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	431c      	orrs	r4, r3
 8000db4:	40f9      	lsrs	r1, r7
 8000db6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dba:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dc2:	0c20      	lsrs	r0, r4, #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dda:	d90b      	bls.n	8000df4 <__udivmoddi4+0x1b8>
 8000ddc:	eb1c 0101 	adds.w	r1, ip, r1
 8000de0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000de4:	f080 8088 	bcs.w	8000ef8 <__udivmoddi4+0x2bc>
 8000de8:	4288      	cmp	r0, r1
 8000dea:	f240 8085 	bls.w	8000ef8 <__udivmoddi4+0x2bc>
 8000dee:	f1a8 0802 	sub.w	r8, r8, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000e00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x1e2>
 8000e0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e10:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e14:	d26c      	bcs.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e16:	458e      	cmp	lr, r1
 8000e18:	d96a      	bls.n	8000ef0 <__udivmoddi4+0x2b4>
 8000e1a:	3802      	subs	r0, #2
 8000e1c:	4461      	add	r1, ip
 8000e1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e22:	fba0 9402 	umull	r9, r4, r0, r2
 8000e26:	eba1 010e 	sub.w	r1, r1, lr
 8000e2a:	42a1      	cmp	r1, r4
 8000e2c:	46c8      	mov	r8, r9
 8000e2e:	46a6      	mov	lr, r4
 8000e30:	d356      	bcc.n	8000ee0 <__udivmoddi4+0x2a4>
 8000e32:	d053      	beq.n	8000edc <__udivmoddi4+0x2a0>
 8000e34:	b15d      	cbz	r5, 8000e4e <__udivmoddi4+0x212>
 8000e36:	ebb3 0208 	subs.w	r2, r3, r8
 8000e3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e42:	fa22 f306 	lsr.w	r3, r2, r6
 8000e46:	40f1      	lsrs	r1, r6
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	2600      	movs	r6, #0
 8000e50:	4631      	mov	r1, r6
 8000e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e56:	f1c2 0320 	rsb	r3, r2, #32
 8000e5a:	40d8      	lsrs	r0, r3
 8000e5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e60:	fa21 f303 	lsr.w	r3, r1, r3
 8000e64:	4091      	lsls	r1, r2
 8000e66:	4301      	orrs	r1, r0
 8000e68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6c:	fa1f fe8c 	uxth.w	lr, ip
 8000e70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e74:	fb07 3610 	mls	r6, r7, r0, r3
 8000e78:	0c0b      	lsrs	r3, r1, #16
 8000e7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e82:	429e      	cmp	r6, r3
 8000e84:	fa04 f402 	lsl.w	r4, r4, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x260>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e92:	d22f      	bcs.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e94:	429e      	cmp	r6, r3
 8000e96:	d92d      	bls.n	8000ef4 <__udivmoddi4+0x2b8>
 8000e98:	3802      	subs	r0, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	1b9b      	subs	r3, r3, r6
 8000e9e:	b289      	uxth	r1, r1
 8000ea0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ea4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ea8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eac:	fb06 f30e 	mul.w	r3, r6, lr
 8000eb0:	428b      	cmp	r3, r1
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x28a>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ebc:	d216      	bcs.n	8000eec <__udivmoddi4+0x2b0>
 8000ebe:	428b      	cmp	r3, r1
 8000ec0:	d914      	bls.n	8000eec <__udivmoddi4+0x2b0>
 8000ec2:	3e02      	subs	r6, #2
 8000ec4:	4461      	add	r1, ip
 8000ec6:	1ac9      	subs	r1, r1, r3
 8000ec8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ecc:	e738      	b.n	8000d40 <__udivmoddi4+0x104>
 8000ece:	462e      	mov	r6, r5
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	e705      	b.n	8000ce0 <__udivmoddi4+0xa4>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	e6e3      	b.n	8000ca0 <__udivmoddi4+0x64>
 8000ed8:	4618      	mov	r0, r3
 8000eda:	e6f8      	b.n	8000cce <__udivmoddi4+0x92>
 8000edc:	454b      	cmp	r3, r9
 8000ede:	d2a9      	bcs.n	8000e34 <__udivmoddi4+0x1f8>
 8000ee0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ee8:	3801      	subs	r0, #1
 8000eea:	e7a3      	b.n	8000e34 <__udivmoddi4+0x1f8>
 8000eec:	4646      	mov	r6, r8
 8000eee:	e7ea      	b.n	8000ec6 <__udivmoddi4+0x28a>
 8000ef0:	4620      	mov	r0, r4
 8000ef2:	e794      	b.n	8000e1e <__udivmoddi4+0x1e2>
 8000ef4:	4640      	mov	r0, r8
 8000ef6:	e7d1      	b.n	8000e9c <__udivmoddi4+0x260>
 8000ef8:	46d0      	mov	r8, sl
 8000efa:	e77b      	b.n	8000df4 <__udivmoddi4+0x1b8>
 8000efc:	3b02      	subs	r3, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	e732      	b.n	8000d68 <__udivmoddi4+0x12c>
 8000f02:	4630      	mov	r0, r6
 8000f04:	e709      	b.n	8000d1a <__udivmoddi4+0xde>
 8000f06:	4464      	add	r4, ip
 8000f08:	3802      	subs	r0, #2
 8000f0a:	e742      	b.n	8000d92 <__udivmoddi4+0x156>

08000f0c <__aeabi_idiv0>:
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop

08000f10 <PID_Position_Init>:
#include "PID_Position.h"

void PID_Position_Init(PIDPosition *pid, int N_input) {
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]

	for(int i = 0; i< N_input; i++)
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e03e      	b.n	8000f9e <PID_Position_Init+0x8e>
	{
		pid->integrator[i] = 0.0f;
 8000f20:	687a      	ldr	r2, [r7, #4]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	330c      	adds	r3, #12
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	4413      	add	r3, r2
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	f04f 0200 	mov.w	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
		pid->prevError[i] = 0.0f;
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3310      	adds	r3, #16
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	f04f 0200 	mov.w	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
		
		pid->differentiator[i]  = 0.0f;
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	3312      	adds	r3, #18
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	4413      	add	r3, r2
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	f04f 0200 	mov.w	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
		pid->prevMeasurement[i] = 0.0f;
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3316      	adds	r3, #22
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
		pid->error_est[i] = 0.0f;
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	330a      	adds	r3, #10
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
		pid->derror[i] = 0.0f;
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	3306      	adds	r3, #6
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3304      	adds	r3, #4
 8000f80:	f04f 0200 	mov.w	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]

		pid->out[i] = 0.0f;
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3318      	adds	r3, #24
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3304      	adds	r3, #4
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
	for(int i = 0; i< N_input; i++)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	dbbc      	blt.n	8000f20 <PID_Position_Init+0x10>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <PID_Position>:

float PID_Position(PIDPosition *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b08b      	sub	sp, #44	; 0x2c
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	61f8      	str	r0, [r7, #28]
 8000fbc:	ed87 0a06 	vstr	s0, [r7, #24]
 8000fc0:	edc7 0a05 	vstr	s1, [r7, #20]
 8000fc4:	ed87 1a04 	vstr	s2, [r7, #16]
 8000fc8:	edc7 1a03 	vstr	s3, [r7, #12]
 8000fcc:	ed87 2a02 	vstr	s4, [r7, #8]
 8000fd0:	6079      	str	r1, [r7, #4]
	float error = setpoint - measurement;
 8000fd2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fde:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float propotional = Kp*error;
 8000fe2:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fe6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a08 	vstr	s15, [r7, #32]
	pid->integrator[i] = pid->integrator[i] + 0.5f * Ki *(error + pid->prevError[i])*pid->T;
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	330c      	adds	r3, #12
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	edd7 7a03 	vldr	s15, [r7, #12]
 8001006:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800100a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3310      	adds	r3, #16
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	4413      	add	r3, r2
 8001018:	ed93 6a00 	vldr	s12, [r3]
 800101c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001020:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001024:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	edd3 7a05 	vldr	s15, [r3, #20]
 800102e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001036:	69fa      	ldr	r2, [r7, #28]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	330c      	adds	r3, #12
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	3304      	adds	r3, #4
 8001042:	edc3 7a00 	vstr	s15, [r3]
	/* Anti-wind-up via integrator clamping */
    	if (pid->integrator[i] > pid->limMaxInt) {
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	330c      	adds	r3, #12
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	3304      	adds	r3, #4
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	edd3 7a04 	vldr	s15, [r3, #16]
 800105c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	dd09      	ble.n	800107a <PID_Position+0xc6>
        	pid->integrator[i] = pid->limMaxInt;
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	69f9      	ldr	r1, [r7, #28]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	330c      	adds	r3, #12
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	3304      	adds	r3, #4
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e027      	b.n	80010ca <PID_Position+0x116>
    	}
    	else if (pid->integrator[i] < pid->limMinInt) {
 800107a:	69fa      	ldr	r2, [r7, #28]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330c      	adds	r3, #12
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	3304      	adds	r3, #4
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001090:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	d509      	bpl.n	80010ae <PID_Position+0xfa>
        	pid->integrator[i] = pid->limMinInt;
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69f9      	ldr	r1, [r7, #28]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	330c      	adds	r3, #12
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	440b      	add	r3, r1
 80010a8:	3304      	adds	r3, #4
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	e00d      	b.n	80010ca <PID_Position+0x116>
    	}
    	else{
    		pid->integrator[i] = pid->integrator[i];
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	330c      	adds	r3, #12
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	3304      	adds	r3, #4
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	69f9      	ldr	r1, [r7, #28]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	330c      	adds	r3, #12
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3304      	adds	r3, #4
 80010c8:	601a      	str	r2, [r3, #0]
    	}
    	
    	/* Lowpass filter */

	pid->error_est[i] = error - pid->prevError[i];
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3310      	adds	r3, #16
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	4413      	add	r3, r2
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	69fa      	ldr	r2, [r7, #28]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	330a      	adds	r3, #10
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	edc3 7a00 	vstr	s15, [r3]
	pid->derror[i] = (1 - pid->alpha) * pid->derror[i] + pid->alpha * pid->error_est[i];
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	edd3 7a06 	vldr	s15, [r3, #24]
 80010f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3306      	adds	r3, #6
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	3304      	adds	r3, #4
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	edd3 6a06 	vldr	s13, [r3, #24]
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	330a      	adds	r3, #10
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3306      	adds	r3, #6
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	3304      	adds	r3, #4
 8001138:	edc3 7a00 	vstr	s15, [r3]
	pid->differentiator[i] = Kd*(pid->derror[i]/pid->T);
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3306      	adds	r3, #6
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3304      	adds	r3, #4
 8001148:	edd3 6a00 	vldr	s13, [r3]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001156:	edd7 7a02 	vldr	s15, [r7, #8]
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3312      	adds	r3, #18
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	4413      	add	r3, r2
 8001168:	3304      	adds	r3, #4
 800116a:	edc3 7a00 	vstr	s15, [r3]
//	pid->differentiator[i] = pid->alpha*Kd*(error - pid->prevError[i])/pid->T + (1-pid->alpha)*pid->differentiator[i];

	pid->out[i] = propotional + pid->integrator[i] + pid->differentiator[i];
 800116e:	69fa      	ldr	r2, [r7, #28]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	330c      	adds	r3, #12
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	3304      	adds	r3, #4
 800117a:	ed93 7a00 	vldr	s14, [r3]
 800117e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3312      	adds	r3, #18
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	3304      	adds	r3, #4
 8001192:	edd3 7a00 	vldr	s15, [r3]
 8001196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3318      	adds	r3, #24
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	3304      	adds	r3, #4
 80011a6:	edc3 7a00 	vstr	s15, [r3]
	//satuaration in  pid->out[i];
    	if (pid->out[i] > pid->limMax) {
 80011aa:	69fa      	ldr	r2, [r7, #28]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3318      	adds	r3, #24
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	3304      	adds	r3, #4
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80011c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	dd09      	ble.n	80011de <PID_Position+0x22a>
        	pid->out[i] = pid->limMax;
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	69f9      	ldr	r1, [r7, #28]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3318      	adds	r3, #24
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3304      	adds	r3, #4
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e027      	b.n	800122e <PID_Position+0x27a>
    	}
    	else if (pid->out[i] < pid->limMin) {
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3318      	adds	r3, #24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3304      	adds	r3, #4
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d509      	bpl.n	8001212 <PID_Position+0x25e>
        	pid->out[i] = pid->limMin;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	69f9      	ldr	r1, [r7, #28]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3318      	adds	r3, #24
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	3304      	adds	r3, #4
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e00d      	b.n	800122e <PID_Position+0x27a>
    	}
    	else{
    		pid->out[i] = pid->out[i];
 8001212:	69fa      	ldr	r2, [r7, #28]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3318      	adds	r3, #24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3304      	adds	r3, #4
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	69f9      	ldr	r1, [r7, #28]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	3318      	adds	r3, #24
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	440b      	add	r3, r1
 800122a:	3304      	adds	r3, #4
 800122c:	601a      	str	r2, [r3, #0]
    	}
    pid->prevError[i] = error;
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3310      	adds	r3, #16
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800123a:	601a      	str	r2, [r3, #0]
	return pid->out[i];
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3318      	adds	r3, #24
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	3304      	adds	r3, #4
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	ee07 3a90 	vmov	s15, r3
}
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	372c      	adds	r7, #44	; 0x2c
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001270:	4a28      	ldr	r2, [pc, #160]	; (8001314 <MX_ADC1_Init+0xb8>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800127a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MX_ADC1_Init+0xb4>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001284:	2201      	movs	r2, #1
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001288:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_ADC1_Init+0xb4>)
 800128a:	2201      	movs	r2, #1
 800128c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_ADC1_Init+0xb4>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_ADC1_Init+0xb4>)
 800129e:	4a1e      	ldr	r2, [pc, #120]	; (8001318 <MX_ADC1_Init+0xbc>)
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012aa:	2202      	movs	r2, #2
 80012ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012be:	f002 fdd1 	bl	8003e64 <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012c8:	f002 f898 	bl	80033fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012cc:	230a      	movs	r3, #10
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	480c      	ldr	r0, [pc, #48]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012de:	f002 ff33 	bl	8004148 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012e8:	f002 f888 	bl	80033fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012ec:	230b      	movs	r3, #11
 80012ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	463b      	mov	r3, r7
 80012f6:	4619      	mov	r1, r3
 80012f8:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_ADC1_Init+0xb4>)
 80012fa:	f002 ff25 	bl	8004148 <HAL_ADC_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001304:	f002 f87a 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20000164 	.word	0x20000164
 8001314:	40012000 	.word	0x40012000
 8001318:	0f000001 	.word	0x0f000001

0800131c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	; 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a2e      	ldr	r2, [pc, #184]	; (80013f4 <HAL_ADC_MspInit+0xd8>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d156      	bne.n	80013ec <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b2d      	ldr	r3, [pc, #180]	; (80013f8 <HAL_ADC_MspInit+0xdc>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001346:	4a2c      	ldr	r2, [pc, #176]	; (80013f8 <HAL_ADC_MspInit+0xdc>)
 8001348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800134c:	6453      	str	r3, [r2, #68]	; 0x44
 800134e:	4b2a      	ldr	r3, [pc, #168]	; (80013f8 <HAL_ADC_MspInit+0xdc>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b26      	ldr	r3, [pc, #152]	; (80013f8 <HAL_ADC_MspInit+0xdc>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a25      	ldr	r2, [pc, #148]	; (80013f8 <HAL_ADC_MspInit+0xdc>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_ADC_MspInit+0xdc>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001376:	2303      	movs	r3, #3
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	481c      	ldr	r0, [pc, #112]	; (80013fc <HAL_ADC_MspInit+0xe0>)
 800138a:	f004 f921 	bl	80055d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 8001390:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <HAL_ADC_MspInit+0xe8>)
 8001392:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013d0:	480b      	ldr	r0, [pc, #44]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013d2:	f003 fd8d 	bl	8004ef0 <HAL_DMA_Init>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80013dc:	f002 f80e 	bl	80033fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a07      	ldr	r2, [pc, #28]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_ADC_MspInit+0xe4>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013ec:	bf00      	nop
 80013ee:	3728      	adds	r7, #40	; 0x28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40012000 	.word	0x40012000
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40020800 	.word	0x40020800
 8001400:	200001ac 	.word	0x200001ac
 8001404:	40026410 	.word	0x40026410

08001408 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	4619      	mov	r1, r3
 8001416:	2007      	movs	r0, #7
 8001418:	f000 fbe6 	bl	8001be8 <bno055_writeData>
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4619      	mov	r1, r3
 8001432:	203d      	movs	r0, #61	; 0x3d
 8001434:	f000 fbd8 	bl	8001be8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d103      	bne.n	8001446 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800143e:	2013      	movs	r0, #19
 8001440:	f000 fbc6 	bl	8001bd0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8001444:	e002      	b.n	800144c <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8001446:	2007      	movs	r0, #7
 8001448:	f000 fbc2 	bl	8001bd0 <bno055_delay>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8001458:	2000      	movs	r0, #0
 800145a:	f7ff ffe3 	bl	8001424 <bno055_setOperationMode>
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}

08001462 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8001466:	200c      	movs	r0, #12
 8001468:	f7ff ffdc 	bl	8001424 <bno055_setOperationMode>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8001474:	2120      	movs	r1, #32
 8001476:	203f      	movs	r0, #63	; 0x3f
 8001478:	f000 fbb6 	bl	8001be8 <bno055_writeData>
  bno055_delay(700);
 800147c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8001480:	f000 fba6 	bl	8001bd0 <bno055_delay>
}
 8001484:	bf00      	nop
 8001486:	bd80      	pop	{r7, pc}

08001488 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
  bno055_reset();
 800148e:	f7ff ffef 	bl	8001470 <bno055_reset>

  uint8_t id = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	2201      	movs	r2, #1
 800149a:	4619      	mov	r1, r3
 800149c:	2000      	movs	r0, #0
 800149e:	f000 fc8f 	bl	8001dc0 <bno055_readData>
  if (id != BNO055_ID) {
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	2ba0      	cmp	r3, #160	; 0xa0
 80014a6:	d004      	beq.n	80014b2 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4809      	ldr	r0, [pc, #36]	; (80014d4 <bno055_setup+0x4c>)
 80014ae:	f006 fcb5 	bl	8007e1c <iprintf>
  }
  bno055_setPage(0);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff ffa8 	bl	8001408 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80014b8:	2100      	movs	r1, #0
 80014ba:	203f      	movs	r0, #63	; 0x3f
 80014bc:	f000 fb94 	bl	8001be8 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80014c0:	f7ff ffc8 	bl	8001454 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80014c4:	200a      	movs	r0, #10
 80014c6:	f000 fb83 	bl	8001bd0 <bno055_delay>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	08009e68 	.word	0x08009e68

080014d8 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80014d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014dc:	b09e      	sub	sp, #120	; 0x78
 80014de:	af00      	add	r7, sp, #0
 80014e0:	4603      	mov	r3, r0
 80014e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff ff8e 	bl	8001408 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80014ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	d108      	bne.n	8001506 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80014f4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80014f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014fc:	2208      	movs	r2, #8
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fc5e 	bl	8001dc0 <bno055_readData>
 8001504:	e007      	b.n	8001516 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8001506:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800150a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800150e:	2206      	movs	r2, #6
 8001510:	4618      	mov	r0, r3
 8001512:	f000 fc55 	bl	8001dc0 <bno055_readData>

  double scale = 1;
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b8b      	ldr	r3, [pc, #556]	; (8001748 <bno055_getVector+0x270>)
 800151c:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001524:	2b0e      	cmp	r3, #14
 8001526:	d109      	bne.n	800153c <bno055_getVector+0x64>
    scale = magScale;
 8001528:	4b88      	ldr	r3, [pc, #544]	; (800174c <bno055_getVector+0x274>)
 800152a:	881b      	ldrh	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffe1 	bl	80004f4 <__aeabi_ui2d>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800153a:	e03e      	b.n	80015ba <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 800153c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001540:	2b08      	cmp	r3, #8
 8001542:	d007      	beq.n	8001554 <bno055_getVector+0x7c>
 8001544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001548:	2b28      	cmp	r3, #40	; 0x28
 800154a:	d003      	beq.n	8001554 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 800154c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001550:	2b2e      	cmp	r3, #46	; 0x2e
 8001552:	d109      	bne.n	8001568 <bno055_getVector+0x90>
    scale = accelScale;
 8001554:	4b7e      	ldr	r3, [pc, #504]	; (8001750 <bno055_getVector+0x278>)
 8001556:	881b      	ldrh	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ffcb 	bl	80004f4 <__aeabi_ui2d>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001566:	e028      	b.n	80015ba <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8001568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800156c:	2b14      	cmp	r3, #20
 800156e:	d109      	bne.n	8001584 <bno055_getVector+0xac>
    scale = angularRateScale;
 8001570:	4b78      	ldr	r3, [pc, #480]	; (8001754 <bno055_getVector+0x27c>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ffbd 	bl	80004f4 <__aeabi_ui2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001582:	e01a      	b.n	80015ba <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8001584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001588:	2b1a      	cmp	r3, #26
 800158a:	d109      	bne.n	80015a0 <bno055_getVector+0xc8>
    scale = eulerScale;
 800158c:	4b72      	ldr	r3, [pc, #456]	; (8001758 <bno055_getVector+0x280>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f7fe ffaf 	bl	80004f4 <__aeabi_ui2d>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800159e:	e00c      	b.n	80015ba <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 80015a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a4:	2b20      	cmp	r3, #32
 80015a6:	d108      	bne.n	80015ba <bno055_getVector+0xe2>
    scale = quaScale;
 80015a8:	4b6c      	ldr	r3, [pc, #432]	; (800175c <bno055_getVector+0x284>)
 80015aa:	881b      	ldrh	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ffa1 	bl	80004f4 <__aeabi_ui2d>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }
  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	2220      	movs	r2, #32
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f006 fc22 	bl	8007e0c <memset>
    if (vec == BNO055_VECTOR_QUATERNION) {
 80015c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d150      	bne.n	8001672 <bno055_getVector+0x19a>
      xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80015d0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80015dc:	b21b      	sxth	r3, r3
 80015de:	4313      	orrs	r3, r2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff96 	bl	8000514 <__aeabi_i2d>
 80015e8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80015ec:	f7ff f926 	bl	800083c <__aeabi_ddiv>
 80015f0:	4602      	mov	r2, r0
 80015f2:	460b      	mov	r3, r1
 80015f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80015f8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	b21a      	sxth	r2, r3
 8001600:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001604:	b21b      	sxth	r3, r3
 8001606:	4313      	orrs	r3, r2
 8001608:	b21b      	sxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff82 	bl	8000514 <__aeabi_i2d>
 8001610:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001614:	f7ff f912 	bl	800083c <__aeabi_ddiv>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001620:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21a      	sxth	r2, r3
 8001628:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b21b      	sxth	r3, r3
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff6e 	bl	8000514 <__aeabi_i2d>
 8001638:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800163c:	f7ff f8fe 	bl	800083c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8001648:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800164c:	021b      	lsls	r3, r3, #8
 800164e:	b21a      	sxth	r2, r3
 8001650:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	4618      	mov	r0, r3
 800165c:	f7fe ff5a 	bl	8000514 <__aeabi_i2d>
 8001660:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001664:	f7ff f8ea 	bl	800083c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8001670:	e03b      	b.n	80016ea <bno055_getVector+0x212>
    } else {
      xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001672:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21b      	sxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7fe ff45 	bl	8000514 <__aeabi_i2d>
 800168a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800168e:	f7ff f8d5 	bl	800083c <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800169a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	4313      	orrs	r3, r2
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff31 	bl	8000514 <__aeabi_i2d>
 80016b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016b6:	f7ff f8c1 	bl	800083c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80016c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	b21a      	sxth	r2, r3
 80016ca:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ff1d 	bl	8000514 <__aeabi_i2d>
 80016da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016de:	f7ff f8ad 	bl	800083c <__aeabi_ddiv>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    return xyz;
 80016ea:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80016ee:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80016f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80016fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001702:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001706:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800170a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800170e:	ec49 8b14 	vmov	d4, r8, r9
 8001712:	ec45 4b15 	vmov	d5, r4, r5
 8001716:	ec41 0b16 	vmov	d6, r0, r1
 800171a:	ec43 2b17 	vmov	d7, r2, r3
  }
 800171e:	eeb0 0a44 	vmov.f32	s0, s8
 8001722:	eef0 0a64 	vmov.f32	s1, s9
 8001726:	eeb0 1a45 	vmov.f32	s2, s10
 800172a:	eef0 1a65 	vmov.f32	s3, s11
 800172e:	eeb0 2a46 	vmov.f32	s4, s12
 8001732:	eef0 2a66 	vmov.f32	s5, s13
 8001736:	eeb0 3a47 	vmov.f32	s6, s14
 800173a:	eef0 3a67 	vmov.f32	s7, s15
 800173e:	3778      	adds	r7, #120	; 0x78
 8001740:	46bd      	mov	sp, r7
 8001742:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001746:	bf00      	nop
 8001748:	3ff00000 	.word	0x3ff00000
 800174c:	20000006 	.word	0x20000006
 8001750:	20000000 	.word	0x20000000
 8001754:	20000002 	.word	0x20000002
 8001758:	20000004 	.word	0x20000004
 800175c:	20000008 	.word	0x20000008

08001760 <bno055_getVectorQuaternion>:
    return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
  }
  bno055_vector_t bno055_getVectorGravity() {
    return bno055_getVector(BNO055_VECTOR_GRAVITY);
  }
  bno055_vector_t bno055_getVectorQuaternion() {
 8001760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001764:	b090      	sub	sp, #64	; 0x40
 8001766:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8001768:	2020      	movs	r0, #32
 800176a:	f7ff feb5 	bl	80014d8 <bno055_getVector>
 800176e:	eeb0 4a40 	vmov.f32	s8, s0
 8001772:	eef0 4a60 	vmov.f32	s9, s1
 8001776:	eeb0 5a41 	vmov.f32	s10, s2
 800177a:	eef0 5a61 	vmov.f32	s11, s3
 800177e:	eeb0 6a42 	vmov.f32	s12, s4
 8001782:	eef0 6a62 	vmov.f32	s13, s5
 8001786:	eeb0 7a43 	vmov.f32	s14, s6
 800178a:	eef0 7a63 	vmov.f32	s15, s7
 800178e:	ed87 4b08 	vstr	d4, [r7, #32]
 8001792:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8001796:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800179a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800179e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80017a2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80017a6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017aa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80017ae:	ec49 8b14 	vmov	d4, r8, r9
 80017b2:	ec45 4b15 	vmov	d5, r4, r5
 80017b6:	ec41 0b16 	vmov	d6, r0, r1
 80017ba:	ec43 2b17 	vmov	d7, r2, r3
  }
 80017be:	eeb0 0a44 	vmov.f32	s0, s8
 80017c2:	eef0 0a64 	vmov.f32	s1, s9
 80017c6:	eeb0 1a45 	vmov.f32	s2, s10
 80017ca:	eef0 1a65 	vmov.f32	s3, s11
 80017ce:	eeb0 2a46 	vmov.f32	s4, s12
 80017d2:	eef0 2a66 	vmov.f32	s5, s13
 80017d6:	eeb0 3a47 	vmov.f32	s6, s14
 80017da:	eef0 3a67 	vmov.f32	s7, s15
 80017de:	3740      	adds	r7, #64	; 0x40
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080017e8 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <MX_CAN1_Init+0x9c>)
 80017f0:	4a25      	ldr	r2, [pc, #148]	; (8001888 <MX_CAN1_Init+0xa0>)
 80017f2:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80017f4:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_CAN1_Init+0x9c>)
 80017f6:	2206      	movs	r2, #6
 80017f8:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <MX_CAN1_Init+0x9c>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001800:	4b20      	ldr	r3, [pc, #128]	; (8001884 <MX_CAN1_Init+0x9c>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8001806:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <MX_CAN1_Init+0x9c>)
 8001808:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800180c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800180e:	4b1d      	ldr	r3, [pc, #116]	; (8001884 <MX_CAN1_Init+0x9c>)
 8001810:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001814:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <MX_CAN1_Init+0x9c>)
 8001818:	2200      	movs	r2, #0
 800181a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800181c:	4b19      	ldr	r3, [pc, #100]	; (8001884 <MX_CAN1_Init+0x9c>)
 800181e:	2200      	movs	r2, #0
 8001820:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <MX_CAN1_Init+0x9c>)
 8001824:	2200      	movs	r2, #0
 8001826:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001828:	4b16      	ldr	r3, [pc, #88]	; (8001884 <MX_CAN1_Init+0x9c>)
 800182a:	2200      	movs	r2, #0
 800182c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <MX_CAN1_Init+0x9c>)
 8001830:	2200      	movs	r2, #0
 8001832:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <MX_CAN1_Init+0x9c>)
 8001836:	2200      	movs	r2, #0
 8001838:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800183a:	4812      	ldr	r0, [pc, #72]	; (8001884 <MX_CAN1_Init+0x9c>)
 800183c:	f002 ff24 	bl	8004688 <HAL_CAN_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8001846:	f001 fdd9 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001852:	2300      	movs	r3, #0
 8001854:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x0000;
 8001856:	2300      	movs	r3, #0
 8001858:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 800185a:	2300      	movs	r3, #0
 800185c:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x0000;
 800185e:	2300      	movs	r3, #0
 8001860:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001862:	2300      	movs	r3, #0
 8001864:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800186a:	2301      	movs	r3, #1
 800186c:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 800186e:	230e      	movs	r3, #14
 8001870:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001872:	463b      	mov	r3, r7
 8001874:	4619      	mov	r1, r3
 8001876:	4803      	ldr	r0, [pc, #12]	; (8001884 <MX_CAN1_Init+0x9c>)
 8001878:	f003 f802 	bl	8004880 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000020c 	.word	0x2000020c
 8001888:	40006400 	.word	0x40006400

0800188c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a19      	ldr	r2, [pc, #100]	; (8001910 <HAL_CAN_MspInit+0x84>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d12c      	bne.n	8001908 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_CAN_MspInit+0x88>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a17      	ldr	r2, [pc, #92]	; (8001914 <HAL_CAN_MspInit+0x88>)
 80018b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_CAN_MspInit+0x88>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <HAL_CAN_MspInit+0x88>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_CAN_MspInit+0x88>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_CAN_MspInit+0x88>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80018e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018f8:	2309      	movs	r3, #9
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	4619      	mov	r1, r3
 8001902:	4805      	ldr	r0, [pc, #20]	; (8001918 <HAL_CAN_MspInit+0x8c>)
 8001904:	f003 fe64 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40006400 	.word	0x40006400
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000

0800191c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <MX_DMA_Init+0x3c>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <MX_DMA_Init+0x3c>)
 800192c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <MX_DMA_Init+0x3c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193a:	607b      	str	r3, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2038      	movs	r0, #56	; 0x38
 8001944:	f003 fa9d 	bl	8004e82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001948:	2038      	movs	r0, #56	; 0x38
 800194a:	f003 fab6 	bl	8004eba <HAL_NVIC_EnableIRQ>

}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b087      	sub	sp, #28
 8001960:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <MX_GPIO_Init+0xa0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a24      	ldr	r2, [pc, #144]	; (80019fc <MX_GPIO_Init+0xa0>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <MX_GPIO_Init+0xa0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	4b1e      	ldr	r3, [pc, #120]	; (80019fc <MX_GPIO_Init+0xa0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a1d      	ldr	r2, [pc, #116]	; (80019fc <MX_GPIO_Init+0xa0>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_GPIO_Init+0xa0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a16      	ldr	r2, [pc, #88]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019dc:	f043 0308 	orr.w	r3, r3, #8
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_GPIO_Init+0xa0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

}
 80019ee:	bf00      	nop
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <MX_I2C1_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_I2C1_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	; (8001a50 <MX_I2C1_Init+0x50>)
 8001a3e:	f003 ff63 	bl	8005908 <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f001 fcd8 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000234 	.word	0x20000234
 8001a54:	40005400 	.word	0x40005400
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a62:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <MX_I2C2_Init+0x54>)
 8001a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a68:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <MX_I2C2_Init+0x58>)
 8001a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a8c:	4b07      	ldr	r3, [pc, #28]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <MX_I2C2_Init+0x50>)
 8001a9a:	f003 ff35 	bl	8005908 <HAL_I2C_Init>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001aa4:	f001 fcaa 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000288 	.word	0x20000288
 8001ab0:	40005800 	.word	0x40005800
 8001ab4:	00061a80 	.word	0x00061a80

08001ab8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08c      	sub	sp, #48	; 0x30
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 031c 	add.w	r3, r7, #28
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a32      	ldr	r2, [pc, #200]	; (8001ba0 <HAL_I2C_MspInit+0xe8>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12c      	bne.n	8001b34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	4b31      	ldr	r3, [pc, #196]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a30      	ldr	r2, [pc, #192]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001af6:	23c0      	movs	r3, #192	; 0xc0
 8001af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001afa:	2312      	movs	r3, #18
 8001afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b06:	2304      	movs	r3, #4
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4825      	ldr	r0, [pc, #148]	; (8001ba8 <HAL_I2C_MspInit+0xf0>)
 8001b12:	f003 fd5d 	bl	80055d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b32:	e031      	b.n	8001b98 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_I2C_MspInit+0xf4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d12c      	bne.n	8001b98 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a17      	ldr	r2, [pc, #92]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f107 031c 	add.w	r3, r7, #28
 8001b74:	4619      	mov	r1, r3
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <HAL_I2C_MspInit+0xf0>)
 8001b78:	f003 fd2a 	bl	80055d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8c:	4b05      	ldr	r3, [pc, #20]	; (8001ba4 <HAL_I2C_MspInit+0xec>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	bf00      	nop
 8001b9a:	3730      	adds	r7, #48	; 0x30
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	40005800 	.word	0x40005800

08001bb0 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <bno055_assignI2C+0x1c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	200002dc 	.word	0x200002dc

08001bd0 <bno055_delay>:

void bno055_delay(int time) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 f91e 	bl	8003e1c <HAL_Delay>
#endif
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b088      	sub	sp, #32
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460a      	mov	r2, r1
 8001bf2:	71fb      	strb	r3, [r7, #7]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	733b      	strb	r3, [r7, #12]
 8001bfc:	79bb      	ldrb	r3, [r7, #6]
 8001bfe:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8001c00:	4b5a      	ldr	r3, [pc, #360]	; (8001d6c <bno055_writeData+0x184>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f107 020c 	add.w	r2, r7, #12
 8001c08:	230a      	movs	r3, #10
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	2150      	movs	r1, #80	; 0x50
 8001c10:	f003 ffbe 	bl	8005b90 <HAL_I2C_Master_Transmit>
 8001c14:	4603      	mov	r3, r0
 8001c16:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80a0 	beq.w	8001d60 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8001c20:	7dfb      	ldrb	r3, [r7, #23]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d103      	bne.n	8001c2e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001c26:	4852      	ldr	r0, [pc, #328]	; (8001d70 <bno055_writeData+0x188>)
 8001c28:	f006 f97e 	bl	8007f28 <puts>
 8001c2c:	e012      	b.n	8001c54 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8001c2e:	7dfb      	ldrb	r3, [r7, #23]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d103      	bne.n	8001c3c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001c34:	484f      	ldr	r0, [pc, #316]	; (8001d74 <bno055_writeData+0x18c>)
 8001c36:	f006 f977 	bl	8007f28 <puts>
 8001c3a:	e00b      	b.n	8001c54 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d103      	bne.n	8001c4a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8001c42:	484d      	ldr	r0, [pc, #308]	; (8001d78 <bno055_writeData+0x190>)
 8001c44:	f006 f970 	bl	8007f28 <puts>
 8001c48:	e004      	b.n	8001c54 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001c4a:	7dfb      	ldrb	r3, [r7, #23]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	484b      	ldr	r0, [pc, #300]	; (8001d7c <bno055_writeData+0x194>)
 8001c50:	f006 f8e4 	bl	8007e1c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <bno055_writeData+0x184>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f004 facb 	bl	80061f4 <HAL_I2C_GetError>
 8001c5e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d07e      	beq.n	8001d64 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d103      	bne.n	8001c74 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8001c6c:	4844      	ldr	r0, [pc, #272]	; (8001d80 <bno055_writeData+0x198>)
 8001c6e:	f006 f95b 	bl	8007f28 <puts>
 8001c72:	e021      	b.n	8001cb8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d103      	bne.n	8001c82 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8001c7a:	4842      	ldr	r0, [pc, #264]	; (8001d84 <bno055_writeData+0x19c>)
 8001c7c:	f006 f954 	bl	8007f28 <puts>
 8001c80:	e01a      	b.n	8001cb8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d103      	bne.n	8001c90 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8001c88:	483f      	ldr	r0, [pc, #252]	; (8001d88 <bno055_writeData+0x1a0>)
 8001c8a:	f006 f94d 	bl	8007f28 <puts>
 8001c8e:	e013      	b.n	8001cb8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	2b08      	cmp	r3, #8
 8001c94:	d103      	bne.n	8001c9e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8001c96:	483d      	ldr	r0, [pc, #244]	; (8001d8c <bno055_writeData+0x1a4>)
 8001c98:	f006 f946 	bl	8007f28 <puts>
 8001c9c:	e00c      	b.n	8001cb8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b10      	cmp	r3, #16
 8001ca2:	d103      	bne.n	8001cac <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8001ca4:	483a      	ldr	r0, [pc, #232]	; (8001d90 <bno055_writeData+0x1a8>)
 8001ca6:	f006 f93f 	bl	8007f28 <puts>
 8001caa:	e005      	b.n	8001cb8 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d102      	bne.n	8001cb8 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8001cb2:	4838      	ldr	r0, [pc, #224]	; (8001d94 <bno055_writeData+0x1ac>)
 8001cb4:	f006 f938 	bl	8007f28 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <bno055_writeData+0x184>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f004 fa8b 	bl	80061d8 <HAL_I2C_GetState>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d103      	bne.n	8001cd4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001ccc:	4832      	ldr	r0, [pc, #200]	; (8001d98 <bno055_writeData+0x1b0>)
 8001cce:	f006 f92b 	bl	8007f28 <puts>
 8001cd2:	e048      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b20      	cmp	r3, #32
 8001cd8:	d103      	bne.n	8001ce2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001cda:	482f      	ldr	r0, [pc, #188]	; (8001d98 <bno055_writeData+0x1b0>)
 8001cdc:	f006 f924 	bl	8007f28 <puts>
 8001ce0:	e041      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8001ce2:	7bfb      	ldrb	r3, [r7, #15]
 8001ce4:	2b24      	cmp	r3, #36	; 0x24
 8001ce6:	d103      	bne.n	8001cf0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001ce8:	482c      	ldr	r0, [pc, #176]	; (8001d9c <bno055_writeData+0x1b4>)
 8001cea:	f006 f91d 	bl	8007f28 <puts>
 8001cee:	e03a      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b21      	cmp	r3, #33	; 0x21
 8001cf4:	d103      	bne.n	8001cfe <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001cf6:	482a      	ldr	r0, [pc, #168]	; (8001da0 <bno055_writeData+0x1b8>)
 8001cf8:	f006 f916 	bl	8007f28 <puts>
 8001cfc:	e033      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b22      	cmp	r3, #34	; 0x22
 8001d02:	d103      	bne.n	8001d0c <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001d04:	4827      	ldr	r0, [pc, #156]	; (8001da4 <bno055_writeData+0x1bc>)
 8001d06:	f006 f90f 	bl	8007f28 <puts>
 8001d0a:	e02c      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b28      	cmp	r3, #40	; 0x28
 8001d10:	d103      	bne.n	8001d1a <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8001d12:	4825      	ldr	r0, [pc, #148]	; (8001da8 <bno055_writeData+0x1c0>)
 8001d14:	f006 f908 	bl	8007f28 <puts>
 8001d18:	e025      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001d1a:	7bfb      	ldrb	r3, [r7, #15]
 8001d1c:	2b29      	cmp	r3, #41	; 0x29
 8001d1e:	d103      	bne.n	8001d28 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8001d20:	4822      	ldr	r0, [pc, #136]	; (8001dac <bno055_writeData+0x1c4>)
 8001d22:	f006 f901 	bl	8007f28 <puts>
 8001d26:	e01e      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001d28:	7bfb      	ldrb	r3, [r7, #15]
 8001d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8001d2c:	d103      	bne.n	8001d36 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8001d2e:	4820      	ldr	r0, [pc, #128]	; (8001db0 <bno055_writeData+0x1c8>)
 8001d30:	f006 f8fa 	bl	8007f28 <puts>
 8001d34:	e017      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b60      	cmp	r3, #96	; 0x60
 8001d3a:	d103      	bne.n	8001d44 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001d3c:	481d      	ldr	r0, [pc, #116]	; (8001db4 <bno055_writeData+0x1cc>)
 8001d3e:	f006 f8f3 	bl	8007f28 <puts>
 8001d42:	e010      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2ba0      	cmp	r3, #160	; 0xa0
 8001d48:	d103      	bne.n	8001d52 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001d4a:	481b      	ldr	r0, [pc, #108]	; (8001db8 <bno055_writeData+0x1d0>)
 8001d4c:	f006 f8ec 	bl	8007f28 <puts>
 8001d50:	e009      	b.n	8001d66 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2be0      	cmp	r3, #224	; 0xe0
 8001d56:	d106      	bne.n	8001d66 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001d58:	4818      	ldr	r0, [pc, #96]	; (8001dbc <bno055_writeData+0x1d4>)
 8001d5a:	f006 f8e5 	bl	8007f28 <puts>
 8001d5e:	e002      	b.n	8001d66 <bno055_writeData+0x17e>
    return;
 8001d60:	bf00      	nop
 8001d62:	e000      	b.n	8001d66 <bno055_writeData+0x17e>
    return;
 8001d64:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	200002dc 	.word	0x200002dc
 8001d70:	08009ea4 	.word	0x08009ea4
 8001d74:	08009ec8 	.word	0x08009ec8
 8001d78:	08009ef0 	.word	0x08009ef0
 8001d7c:	08009f14 	.word	0x08009f14
 8001d80:	08009f2c 	.word	0x08009f2c
 8001d84:	08009f40 	.word	0x08009f40
 8001d88:	08009f54 	.word	0x08009f54
 8001d8c:	08009f68 	.word	0x08009f68
 8001d90:	08009f7c 	.word	0x08009f7c
 8001d94:	08009f90 	.word	0x08009f90
 8001d98:	08009fa8 	.word	0x08009fa8
 8001d9c:	08009fc0 	.word	0x08009fc0
 8001da0:	08009fd4 	.word	0x08009fd4
 8001da4:	08009fec 	.word	0x08009fec
 8001da8:	0800a004 	.word	0x0800a004
 8001dac:	0800a01c 	.word	0x0800a01c
 8001db0:	0800a03c 	.word	0x0800a03c
 8001db4:	0800a05c 	.word	0x0800a05c
 8001db8:	0800a074 	.word	0x0800a074
 8001dbc:	0800a08c 	.word	0x0800a08c

08001dc0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	6039      	str	r1, [r7, #0]
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <bno055_readData+0x40>)
 8001dd2:	6818      	ldr	r0, [r3, #0]
 8001dd4:	1dfa      	adds	r2, r7, #7
 8001dd6:	2364      	movs	r3, #100	; 0x64
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2301      	movs	r3, #1
 8001ddc:	2150      	movs	r1, #80	; 0x50
 8001dde:	f003 fed7 	bl	8005b90 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <bno055_readData+0x40>)
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	2264      	movs	r2, #100	; 0x64
 8001dec:	9200      	str	r2, [sp, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	2150      	movs	r1, #80	; 0x50
 8001df2:	f003 ffcb 	bl	8005d8c <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200002dc 	.word	0x200002dc

08001e04 <map>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8001e04:	b480      	push	{r7}
 8001e06:	b087      	sub	sp, #28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e0e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e12:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e16:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e1a:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8001e1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e2a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e32:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e36:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e3a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e3e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001e52:	eeb0 0a67 	vmov.f32	s0, s15
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <read_encoder>:
void read_encoder(Encoder *enc, TIM_HandleTypeDef* timer, float CPR){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	ed87 0a01 	vstr	s0, [r7, #4]
	enc->new_counter = __HAL_TIM_GET_COUNTER(timer);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	605a      	str	r2, [r3, #4]
	enc->counter_status = __HAL_TIM_IS_TIM_COUNTING_DOWN(timer);
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	bf0c      	ite	eq
 8001e86:	2301      	moveq	r3, #1
 8001e88:	2300      	movne	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	721a      	strb	r2, [r3, #8]
	int16_t count_change = enc->new_counter - enc->counter;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	82fb      	strh	r3, [r7, #22]
	if(enc->counter_status && count_change <0){
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	7a1b      	ldrb	r3, [r3, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <read_encoder+0x54>
 8001eac:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db07      	blt.n	8001ec4 <read_encoder+0x64>
		count_change += 65536;
	}else if (!enc->counter_status && count_change > 0){
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	7a1b      	ldrb	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d104      	bne.n	8001ec6 <read_encoder+0x66>
 8001ebc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <read_encoder+0x66>
		count_change += 65536;
 8001ec4:	bf00      	nop
		count_change -= 65536;
	}
	enc->counter = enc->new_counter;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	601a      	str	r2, [r3, #0]
	enc->counter_status = (count_change >=0);
 8001ece:	8afb      	ldrh	r3, [r7, #22]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	0bdb      	lsrs	r3, r3, #15
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	461a      	mov	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	721a      	strb	r2, [r3, #8]
	enc->speed = (float)count_change*1000.0f/(CPR_X * sampling_time);
 8001ede:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eea:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f70 <read_encoder+0x110>
 8001eee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ef2:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001f74 <read_encoder+0x114>
 8001ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	edc3 7a03 	vstr	s15, [r3, #12]
	enc->rdps = (float)count_change*2*PI*1000.0f/(CPR_X * sampling_time);
 8001f00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f10:	ee17 0a90 	vmov	r0, s15
 8001f14:	f7fe fb10 	bl	8000538 <__aeabi_f2d>
 8001f18:	a311      	add	r3, pc, #68	; (adr r3, 8001f60 <read_encoder+0x100>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	f7fe fb63 	bl	80005e8 <__aeabi_dmul>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f04f 0200 	mov.w	r2, #0
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <read_encoder+0x118>)
 8001f30:	f7fe fb5a 	bl	80005e8 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	4610      	mov	r0, r2
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	a30a      	add	r3, pc, #40	; (adr r3, 8001f68 <read_encoder+0x108>)
 8001f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f42:	f7fe fc7b 	bl	800083c <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fe0d 	bl	8000b6c <__aeabi_d2f>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	611a      	str	r2, [r3, #16]
}
 8001f58:	bf00      	nop
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	5532617c 	.word	0x5532617c
 8001f64:	40092a30 	.word	0x40092a30
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	40cc2000 	.word	0x40cc2000
 8001f70:	447a0000 	.word	0x447a0000
 8001f74:	46610000 	.word	0x46610000
 8001f78:	408f4000 	.word	0x408f4000

08001f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f80:	f001 feda 	bl	8003d38 <HAL_Init>

  /* USER CODE BEGIN Init */
  PID_Position_Init(&pid, 3);
 8001f84:	2103      	movs	r1, #3
 8001f86:	4835      	ldr	r0, [pc, #212]	; (800205c <main+0xe0>)
 8001f88:	f7fe ffc2 	bl	8000f10 <PID_Position_Init>
  pid.limMax = Output_max;
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <main+0xe4>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a32      	ldr	r2, [pc, #200]	; (800205c <main+0xe0>)
 8001f92:	6093      	str	r3, [r2, #8]
  pid.limMin = -Output_max;
 8001f94:	4b32      	ldr	r3, [pc, #200]	; (8002060 <main+0xe4>)
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	eef1 7a67 	vneg.f32	s15, s15
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	; (800205c <main+0xe0>)
 8001fa0:	edc3 7a01 	vstr	s15, [r3, #4]
  pid.limMaxInt = Integral_max;
 8001fa4:	4b2f      	ldr	r3, [pc, #188]	; (8002064 <main+0xe8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a2c      	ldr	r2, [pc, #176]	; (800205c <main+0xe0>)
 8001faa:	6113      	str	r3, [r2, #16]
  pid.limMinInt = -Integral_max;
 8001fac:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <main+0xe8>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	eef1 7a67 	vneg.f32	s15, s15
 8001fb6:	4b29      	ldr	r3, [pc, #164]	; (800205c <main+0xe0>)
 8001fb8:	edc3 7a03 	vstr	s15, [r3, #12]
  pid.T = dt;
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <main+0xe0>)
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <main+0xec>)
 8001fc0:	615a      	str	r2, [r3, #20]
  pid.alpha = 0.8;
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <main+0xe0>)
 8001fc4:	4a29      	ldr	r2, [pc, #164]	; (800206c <main+0xf0>)
 8001fc6:	619a      	str	r2, [r3, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc8:	f000 f862 	bl	8002090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fcc:	f7ff fcc6 	bl	800195c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd0:	f7ff fca4 	bl	800191c <MX_DMA_Init>
  MX_TIM2_Init();
 8001fd4:	f001 fbd0 	bl	8003778 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001fd8:	f001 fc22 	bl	8003820 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fdc:	f001 fc6e 	bl	80038bc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001fe0:	f001 fcc0 	bl	8003964 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001fe4:	f001 fd0c 	bl	8003a00 <MX_TIM9_Init>
  MX_TIM12_Init();
 8001fe8:	f001 fd44 	bl	8003a74 <MX_TIM12_Init>
  MX_I2C1_Init();
 8001fec:	f7ff fd08 	bl	8001a00 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001ff0:	f7ff fd34 	bl	8001a5c <MX_I2C2_Init>
  MX_CAN1_Init();
 8001ff4:	f7ff fbf8 	bl	80017e8 <MX_CAN1_Init>
  MX_ADC1_Init();
 8001ff8:	f7ff f930 	bl	800125c <MX_ADC1_Init>
  MX_SPI1_Init();
 8001ffc:	f001 fa04 	bl	8003408 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // CAN _Transmition
  	HAL_CAN_Start(&hcan1);
 8002000:	481b      	ldr	r0, [pc, #108]	; (8002070 <main+0xf4>)
 8002002:	f002 fd1d 	bl	8004a40 <HAL_CAN_Start>
  	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002006:	2102      	movs	r1, #2
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <main+0xf4>)
 800200a:	f002 fe38 	bl	8004c7e <HAL_CAN_ActivateNotification>
  	TxHeader.DLC = 7; // data length
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <main+0xf8>)
 8002010:	2207      	movs	r2, #7
 8002012:	611a      	str	r2, [r3, #16]
  	TxHeader.IDE = CAN_ID_STD;
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <main+0xf8>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  	TxHeader.RTR = CAN_RTR_DATA;
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <main+0xf8>)
 800201c:	2200      	movs	r2, #0
 800201e:	60da      	str	r2, [r3, #12]
  	TxHeader.StdId = 0x407; //Id 0x7FF
 8002020:	4b14      	ldr	r3, [pc, #80]	; (8002074 <main+0xf8>)
 8002022:	f240 4207 	movw	r2, #1031	; 0x407
 8002026:	601a      	str	r2, [r3, #0]

  	// TIMER Internal clock
  	HAL_TIM_Base_Start_IT(&htim3);
 8002028:	4813      	ldr	r0, [pc, #76]	; (8002078 <main+0xfc>)
 800202a:	f005 f939 	bl	80072a0 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim12);
 800202e:	4813      	ldr	r0, [pc, #76]	; (800207c <main+0x100>)
 8002030:	f005 f936 	bl	80072a0 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT(&htim5);
 8002034:	4812      	ldr	r0, [pc, #72]	; (8002080 <main+0x104>)
 8002036:	f005 f933 	bl	80072a0 <HAL_TIM_Base_Start_IT>

  	// IMU
	bno055_assignI2C(&hi2c1);
 800203a:	4812      	ldr	r0, [pc, #72]	; (8002084 <main+0x108>)
 800203c:	f7ff fdb8 	bl	8001bb0 <bno055_assignI2C>
	bno055_setup();
 8002040:	f7ff fa22 	bl	8001488 <bno055_setup>
	bno055_setOperationModeNDOF();
 8002044:	f7ff fa0d 	bl	8001462 <bno055_setOperationModeNDOF>

	// Read Rotary encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002048:	213c      	movs	r1, #60	; 0x3c
 800204a:	480f      	ldr	r0, [pc, #60]	; (8002088 <main+0x10c>)
 800204c:	f005 fa3e 	bl	80074cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8002050:	213c      	movs	r1, #60	; 0x3c
 8002052:	480e      	ldr	r0, [pc, #56]	; (800208c <main+0x110>)
 8002054:	f005 fa3a 	bl	80074cc <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002058:	e7fe      	b.n	8002058 <main+0xdc>
 800205a:	bf00      	nop
 800205c:	200002e0 	.word	0x200002e0
 8002060:	20000010 	.word	0x20000010
 8002064:	20000014 	.word	0x20000014
 8002068:	3c23d70a 	.word	0x3c23d70a
 800206c:	3f4ccccd 	.word	0x3f4ccccd
 8002070:	2000020c 	.word	0x2000020c
 8002074:	20000350 	.word	0x20000350
 8002078:	2000053c 	.word	0x2000053c
 800207c:	2000065c 	.word	0x2000065c
 8002080:	200005cc 	.word	0x200005cc
 8002084:	20000234 	.word	0x20000234
 8002088:	200004f4 	.word	0x200004f4
 800208c:	20000584 	.word	0x20000584

08002090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b094      	sub	sp, #80	; 0x50
 8002094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002096:	f107 0320 	add.w	r3, r7, #32
 800209a:	2230      	movs	r2, #48	; 0x30
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f005 feb4 	bl	8007e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	4b28      	ldr	r3, [pc, #160]	; (800215c <SystemClock_Config+0xcc>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <SystemClock_Config+0xcc>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6413      	str	r3, [r2, #64]	; 0x40
 80020c4:	4b25      	ldr	r3, [pc, #148]	; (800215c <SystemClock_Config+0xcc>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80020d0:	2300      	movs	r3, #0
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <SystemClock_Config+0xd0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a21      	ldr	r2, [pc, #132]	; (8002160 <SystemClock_Config+0xd0>)
 80020da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020de:	6013      	str	r3, [r2, #0]
 80020e0:	4b1f      	ldr	r3, [pc, #124]	; (8002160 <SystemClock_Config+0xd0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020ec:	2301      	movs	r3, #1
 80020ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020f6:	2302      	movs	r3, #2
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80020fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002100:	2319      	movs	r3, #25
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002104:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002108:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800210a:	2302      	movs	r3, #2
 800210c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800210e:	2304      	movs	r3, #4
 8002110:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002112:	f107 0320 	add.w	r3, r7, #32
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fba6 	bl	8006868 <HAL_RCC_OscConfig>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002122:	f001 f96b 	bl	80033fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002126:	230f      	movs	r3, #15
 8002128:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800212a:	2302      	movs	r3, #2
 800212c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002136:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	2105      	movs	r1, #5
 8002144:	4618      	mov	r0, r3
 8002146:	f004 fe07 	bl	8006d58 <HAL_RCC_ClockConfig>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002150:	f001 f954 	bl	80033fc <Error_Handler>
  }
}
 8002154:	bf00      	nop
 8002156:	3750      	adds	r7, #80	; 0x50
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800
 8002160:	40007000 	.word	0x40007000
 8002164:	00000000 	.word	0x00000000

08002168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	ed2d 8b02 	vpush	{d8}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a53      	ldr	r2, [pc, #332]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800217a:	4293      	cmp	r3, r2
 800217c:	f040 8150 	bne.w	8002420 <HAL_TIM_PeriodElapsedCallback+0x2b8>
	{
		//PID POSITION

		Output_Vx = PID_Position(&pid, goal[0], X_enR, Kp_X, Ki_X, Kd_X, X);
 8002180:	4b52      	ldr	r3, [pc, #328]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002182:	edd3 7a00 	vldr	s15, [r3]
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	2100      	movs	r1, #0
 800218e:	ed9f 2a51 	vldr	s4, [pc, #324]	; 80022d4 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8002192:	eddf 1a51 	vldr	s3, [pc, #324]	; 80022d8 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002196:	ed9f 1a51 	vldr	s2, [pc, #324]	; 80022dc <HAL_TIM_PeriodElapsedCallback+0x174>
 800219a:	eef0 0a47 	vmov.f32	s1, s14
 800219e:	eeb0 0a67 	vmov.f32	s0, s15
 80021a2:	484f      	ldr	r0, [pc, #316]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80021a4:	f7fe ff06 	bl	8000fb4 <PID_Position>
 80021a8:	eef0 7a40 	vmov.f32	s15, s0
 80021ac:	4b4d      	ldr	r3, [pc, #308]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80021ae:	edc3 7a00 	vstr	s15, [r3]
		Output_Vy = PID_Position(&pid, goal[1], Y_enR, Kp_Y, Ki_Y, Kd_Y, Y);
 80021b2:	4b46      	ldr	r3, [pc, #280]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80021b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021b8:	4b4b      	ldr	r3, [pc, #300]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80021ba:	ed93 7a00 	vldr	s14, [r3]
 80021be:	2101      	movs	r1, #1
 80021c0:	ed9f 2a44 	vldr	s4, [pc, #272]	; 80022d4 <HAL_TIM_PeriodElapsedCallback+0x16c>
 80021c4:	eddf 1a44 	vldr	s3, [pc, #272]	; 80022d8 <HAL_TIM_PeriodElapsedCallback+0x170>
 80021c8:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80021cc:	eef0 0a47 	vmov.f32	s1, s14
 80021d0:	eeb0 0a67 	vmov.f32	s0, s15
 80021d4:	4842      	ldr	r0, [pc, #264]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80021d6:	f7fe feed 	bl	8000fb4 <PID_Position>
 80021da:	eef0 7a40 	vmov.f32	s15, s0
 80021de:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x184>)
 80021e0:	edc3 7a00 	vstr	s15, [r3]
		Output_Omega = PID_Position(&pid, goal[2], theta, Kp_Yaw, Ki_Yaw, Kd_Yaw, YAW);
 80021e4:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x164>)
 80021e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80021ea:	4b41      	ldr	r3, [pc, #260]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80021ec:	ed93 7a00 	vldr	s14, [r3]
 80021f0:	2102      	movs	r1, #2
 80021f2:	ed9f 2a38 	vldr	s4, [pc, #224]	; 80022d4 <HAL_TIM_PeriodElapsedCallback+0x16c>
 80021f6:	eddf 1a38 	vldr	s3, [pc, #224]	; 80022d8 <HAL_TIM_PeriodElapsedCallback+0x170>
 80021fa:	ed9f 1a38 	vldr	s2, [pc, #224]	; 80022dc <HAL_TIM_PeriodElapsedCallback+0x174>
 80021fe:	eef0 0a47 	vmov.f32	s1, s14
 8002202:	eeb0 0a67 	vmov.f32	s0, s15
 8002206:	4836      	ldr	r0, [pc, #216]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002208:	f7fe fed4 	bl	8000fb4 <PID_Position>
 800220c:	eef0 7a40 	vmov.f32	s15, s0
 8002210:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002212:	edc3 7a00 	vstr	s15, [r3]
		vx = Output_Vx*cosf(theta) + Output_Vy*sinf(theta);
 8002216:	4b36      	ldr	r3, [pc, #216]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002218:	edd3 7a00 	vldr	s15, [r3]
 800221c:	eeb0 0a67 	vmov.f32	s0, s15
 8002220:	f006 fe00 	bl	8008e24 <cosf>
 8002224:	eeb0 7a40 	vmov.f32	s14, s0
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800222a:	edd3 7a00 	vldr	s15, [r3]
 800222e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002232:	4b2f      	ldr	r3, [pc, #188]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	f006 fe36 	bl	8008eac <sinf>
 8002240:	eeb0 7a40 	vmov.f32	s14, s0
 8002244:	4b29      	ldr	r3, [pc, #164]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002252:	4b29      	ldr	r3, [pc, #164]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002254:	edc3 7a00 	vstr	s15, [r3]
		vy = -Output_Vx*sinf(theta) + Output_Vy*cosf(theta);
 8002258:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	eeb1 8a67 	vneg.f32	s16, s15
 8002262:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	f006 fe1e 	bl	8008eac <sinf>
 8002270:	eef0 7a40 	vmov.f32	s15, s0
 8002274:	ee28 8a27 	vmul.f32	s16, s16, s15
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800227a:	edd3 7a00 	vldr	s15, [r3]
 800227e:	eeb0 0a67 	vmov.f32	s0, s15
 8002282:	f006 fdcf 	bl	8008e24 <cosf>
 8002286:	eeb0 7a40 	vmov.f32	s14, s0
 800228a:	4b18      	ldr	r3, [pc, #96]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x184>)
 800228c:	edd3 7a00 	vldr	s15, [r3]
 8002290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002294:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x194>)
 800229a:	edc3 7a00 	vstr	s15, [r3]
		omega = Output_Omega;
 800229e:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a17      	ldr	r2, [pc, #92]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80022a4:	6013      	str	r3, [r2, #0]
		if (Mode == 1)
 80022a6:	4b17      	ldr	r3, [pc, #92]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d132      	bne.n	8002314 <HAL_TIM_PeriodElapsedCallback+0x1ac>
		{
			Vx = vx;
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a15      	ldr	r2, [pc, #84]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80022b4:	6013      	str	r3, [r2, #0]
			Vy = vy;
 80022b6:	4b11      	ldr	r3, [pc, #68]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x194>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a14      	ldr	r2, [pc, #80]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80022bc:	6013      	str	r3, [r2, #0]
			Omega = omega;
 80022be:	4b10      	ldr	r3, [pc, #64]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a13      	ldr	r2, [pc, #76]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e035      	b.n	8002334 <HAL_TIM_PeriodElapsedCallback+0x1cc>
 80022c8:	40000400 	.word	0x40000400
 80022cc:	20000464 	.word	0x20000464
 80022d0:	2000000c 	.word	0x2000000c
 80022d4:	3b83126f 	.word	0x3b83126f
 80022d8:	38d1b717 	.word	0x38d1b717
 80022dc:	3fb33333 	.word	0x3fb33333
 80022e0:	200002e0 	.word	0x200002e0
 80022e4:	2000044c 	.word	0x2000044c
 80022e8:	200003f4 	.word	0x200003f4
 80022ec:	20000450 	.word	0x20000450
 80022f0:	20000408 	.word	0x20000408
 80022f4:	20000454 	.word	0x20000454
 80022f8:	20000438 	.word	0x20000438
 80022fc:	2000043c 	.word	0x2000043c
 8002300:	20000440 	.word	0x20000440
 8002304:	20000449 	.word	0x20000449
 8002308:	20000420 	.word	0x20000420
 800230c:	20000424 	.word	0x20000424
 8002310:	20000428 	.word	0x20000428
		}
		else if (Mode == 0)
 8002314:	4b76      	ldr	r3, [pc, #472]	; (80024f0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10b      	bne.n	8002334 <HAL_TIM_PeriodElapsedCallback+0x1cc>
		{
			Vx = VxM;
 800231c:	4b75      	ldr	r3, [pc, #468]	; (80024f4 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a75      	ldr	r2, [pc, #468]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002322:	6013      	str	r3, [r2, #0]
			Vy = VyM;
 8002324:	4b75      	ldr	r3, [pc, #468]	; (80024fc <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a75      	ldr	r2, [pc, #468]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800232a:	6013      	str	r3, [r2, #0]
			Omega = OmegaM;
 800232c:	4b75      	ldr	r3, [pc, #468]	; (8002504 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a75      	ldr	r2, [pc, #468]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8002332:	6013      	str	r3, [r2, #0]
		}
		V1_out = map(Vx, -3.0, 3.0, 0, 65535);
 8002334:	4b70      	ldr	r3, [pc, #448]	; (80024f8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ed9f 2a74 	vldr	s4, [pc, #464]	; 800250c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 800233e:	eddf 1a74 	vldr	s3, [pc, #464]	; 8002510 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8002342:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8002346:	eef8 0a08 	vmov.f32	s1, #136	; 0xc0400000 -3.0
 800234a:	eeb0 0a67 	vmov.f32	s0, s15
 800234e:	f7ff fd59 	bl	8001e04 <map>
 8002352:	eef0 7a40 	vmov.f32	s15, s0
 8002356:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800235a:	ee17 3a90 	vmov	r3, s15
 800235e:	b29a      	uxth	r2, r3
 8002360:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002362:	801a      	strh	r2, [r3, #0]
		V2_out = map(Vy, -3.0, 3.0, 0, 65535);
 8002364:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	ed9f 2a68 	vldr	s4, [pc, #416]	; 800250c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 800236e:	eddf 1a68 	vldr	s3, [pc, #416]	; 8002510 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8002372:	eeb0 1a08 	vmov.f32	s2, #8	; 0x40400000  3.0
 8002376:	eef8 0a08 	vmov.f32	s1, #136	; 0xc0400000 -3.0
 800237a:	eeb0 0a67 	vmov.f32	s0, s15
 800237e:	f7ff fd41 	bl	8001e04 <map>
 8002382:	eef0 7a40 	vmov.f32	s15, s0
 8002386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800238a:	ee17 3a90 	vmov	r3, s15
 800238e:	b29a      	uxth	r2, r3
 8002390:	4b61      	ldr	r3, [pc, #388]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002392:	801a      	strh	r2, [r3, #0]
		V3_out = map(Omega, -3.14, 3.14, 0, 65535);
 8002394:	4b5c      	ldr	r3, [pc, #368]	; (8002508 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ed9f 2a5c 	vldr	s4, [pc, #368]	; 800250c <HAL_TIM_PeriodElapsedCallback+0x3a4>
 800239e:	eddf 1a5c 	vldr	s3, [pc, #368]	; 8002510 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 80023a2:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800251c <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80023a6:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8002520 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 80023aa:	eeb0 0a67 	vmov.f32	s0, s15
 80023ae:	f7ff fd29 	bl	8001e04 <map>
 80023b2:	eef0 7a40 	vmov.f32	s15, s0
 80023b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ba:	ee17 3a90 	vmov	r3, s15
 80023be:	b29a      	uxth	r2, r3
 80023c0:	4b58      	ldr	r3, [pc, #352]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80023c2:	801a      	strh	r2, [r3, #0]
		TxData[0] = ((V1_out & 0xFF00) >> 8);
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80023c6:	881b      	ldrh	r3, [r3, #0]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4b56      	ldr	r3, [pc, #344]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80023d0:	701a      	strb	r2, [r3, #0]
		TxData[1] = (V1_out & 0x00FF);
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80023d4:	881b      	ldrh	r3, [r3, #0]
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80023da:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((V2_out & 0xFF00) >> 8);
 80023dc:	4b4e      	ldr	r3, [pc, #312]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80023e8:	709a      	strb	r2, [r3, #2]
		TxData[3] = (V2_out & 0x00FF);
 80023ea:	4b4b      	ldr	r3, [pc, #300]	; (8002518 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b4d      	ldr	r3, [pc, #308]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80023f2:	70da      	strb	r2, [r3, #3]
		TxData[4] = ((V3_out & 0xFF00) >> 8);
 80023f4:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002400:	711a      	strb	r2, [r3, #4]
		TxData[5] = (V3_out & 0x00FF);
 8002402:	4b48      	ldr	r3, [pc, #288]	; (8002524 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002404:	881b      	ldrh	r3, [r3, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 800240a:	715a      	strb	r2, [r3, #5]
		TxData[6] = State;
 800240c:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 800240e:	781a      	ldrb	r2, [r3, #0]
 8002410:	4b45      	ldr	r3, [pc, #276]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002412:	719a      	strb	r2, [r3, #6]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8002414:	4b46      	ldr	r3, [pc, #280]	; (8002530 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002416:	4a44      	ldr	r2, [pc, #272]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002418:	4946      	ldr	r1, [pc, #280]	; (8002534 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 800241a:	4847      	ldr	r0, [pc, #284]	; (8002538 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 800241c:	f002 fb54 	bl	8004ac8 <HAL_CAN_AddTxMessage>

	}
	if (htim->Instance == TIM5)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a45      	ldr	r2, [pc, #276]	; (800253c <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	f040 85fb 	bne.w	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
	{
		errorX = goal[0] - X_enR;
 800242c:	4b44      	ldr	r3, [pc, #272]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	4b44      	ldr	r3, [pc, #272]	; (8002544 <HAL_TIM_PeriodElapsedCallback+0x3dc>)
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800243c:	4b42      	ldr	r3, [pc, #264]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 800243e:	edc3 7a00 	vstr	s15, [r3]
		errorY = goal[1] - Y_enR;
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002444:	ed93 7a01 	vldr	s14, [r3, #4]
 8002448:	4b40      	ldr	r3, [pc, #256]	; (800254c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002452:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8002454:	edc3 7a00 	vstr	s15, [r3]
		errorYaw = goal[2] - theta;
 8002458:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 800245a:	ed93 7a02 	vldr	s14, [r3, #8]
 800245e:	4b3d      	ldr	r3, [pc, #244]	; (8002554 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8002460:	edd3 7a00 	vldr	s15, [r3]
 8002464:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002468:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800246a:	edc3 7a00 	vstr	s15, [r3]
		if (Position == 1 && State == 0) {
 800246e:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d114      	bne.n	80024a0 <HAL_TIM_PeriodElapsedCallback+0x338>
 8002476:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d110      	bne.n	80024a0 <HAL_TIM_PeriodElapsedCallback+0x338>
			goal[0] = goal1[0];
 800247e:	4b38      	ldr	r3, [pc, #224]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2f      	ldr	r2, [pc, #188]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002484:	6013      	str	r3, [r2, #0]
			goal[1] = goal1[1];
 8002486:	4b36      	ldr	r3, [pc, #216]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4a2d      	ldr	r2, [pc, #180]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 800248c:	6053      	str	r3, [r2, #4]
			goal[2] = goal1[2];
 800248e:	4b34      	ldr	r3, [pc, #208]	; (8002560 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	4a2b      	ldr	r2, [pc, #172]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8002494:	6093      	str	r3, [r2, #8]
			State = 1;
 8002496:	4b25      	ldr	r3, [pc, #148]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
 800249c:	f000 bdc1 	b.w	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
		} else if (abs(errorX) < 0.05 && State == 1) {
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024aa:	ee17 3a90 	vmov	r3, s15
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	db5a      	blt.n	8002568 <HAL_TIM_PeriodElapsedCallback+0x400>
 80024b2:	4b25      	ldr	r3, [pc, #148]	; (8002548 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024bc:	ee17 3a90 	vmov	r3, s15
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	dc51      	bgt.n	8002568 <HAL_TIM_PeriodElapsedCallback+0x400>
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d14d      	bne.n	8002568 <HAL_TIM_PeriodElapsedCallback+0x400>
			goal[0] = goal2[0];
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80024d2:	6013      	str	r3, [r2, #0]
			goal[1] = goal2[1];
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a19      	ldr	r2, [pc, #100]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80024da:	6053      	str	r3, [r2, #4]
			goal[2] = goal2[2];
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	4a17      	ldr	r2, [pc, #92]	; (8002540 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80024e2:	6093      	str	r3, [r2, #8]
			State = 2;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80024e6:	2202      	movs	r2, #2
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	f000 bd9a 	b.w	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
 80024ee:	bf00      	nop
 80024f0:	20000449 	.word	0x20000449
 80024f4:	2000042c 	.word	0x2000042c
 80024f8:	20000420 	.word	0x20000420
 80024fc:	20000430 	.word	0x20000430
 8002500:	20000424 	.word	0x20000424
 8002504:	20000434 	.word	0x20000434
 8002508:	20000428 	.word	0x20000428
 800250c:	477fff00 	.word	0x477fff00
 8002510:	00000000 	.word	0x00000000
 8002514:	200003ec 	.word	0x200003ec
 8002518:	200003ee 	.word	0x200003ee
 800251c:	4048f5c3 	.word	0x4048f5c3
 8002520:	c048f5c3 	.word	0xc048f5c3
 8002524:	200003f0 	.word	0x200003f0
 8002528:	200003e0 	.word	0x200003e0
 800252c:	20000448 	.word	0x20000448
 8002530:	200003e8 	.word	0x200003e8
 8002534:	20000350 	.word	0x20000350
 8002538:	2000020c 	.word	0x2000020c
 800253c:	40000c00 	.word	0x40000c00
 8002540:	20000464 	.word	0x20000464
 8002544:	2000000c 	.word	0x2000000c
 8002548:	20000458 	.word	0x20000458
 800254c:	200003f4 	.word	0x200003f4
 8002550:	2000045c 	.word	0x2000045c
 8002554:	20000408 	.word	0x20000408
 8002558:	20000460 	.word	0x20000460
 800255c:	2000044a 	.word	0x2000044a
 8002560:	20000018 	.word	0x20000018
 8002564:	20000024 	.word	0x20000024
		} else if (abs(errorY) < 0.05 && State == 2) {
 8002568:	4b85      	ldr	r3, [pc, #532]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002572:	ee17 3a90 	vmov	r3, s15
 8002576:	2b00      	cmp	r3, #0
 8002578:	f2c0 8082 	blt.w	8002680 <HAL_TIM_PeriodElapsedCallback+0x518>
 800257c:	4b80      	ldr	r3, [pc, #512]	; (8002780 <HAL_TIM_PeriodElapsedCallback+0x618>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002586:	ee17 3a90 	vmov	r3, s15
 800258a:	2b00      	cmp	r3, #0
 800258c:	dc78      	bgt.n	8002680 <HAL_TIM_PeriodElapsedCallback+0x518>
 800258e:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b02      	cmp	r3, #2
 8002594:	d174      	bne.n	8002680 <HAL_TIM_PeriodElapsedCallback+0x518>
			errorlaserx = target_laserx[0] - laserx;
 8002596:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002598:	e9d3 0100 	ldrd	r0, r1, [r3]
 800259c:	4b7b      	ldr	r3, [pc, #492]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x624>)
 800259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a2:	f7fd fe69 	bl	8000278 <__aeabi_dsub>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4979      	ldr	r1, [pc, #484]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80025ac:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[0] - lasery;
 80025b0:	4b78      	ldr	r3, [pc, #480]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80025b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b6:	4b78      	ldr	r3, [pc, #480]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fd fe5c 	bl	8000278 <__aeabi_dsub>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4975      	ldr	r1, [pc, #468]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80025c6:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 80025ca:	4b75      	ldr	r3, [pc, #468]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffb2 	bl	8000538 <__aeabi_f2d>
 80025d4:	4b6e      	ldr	r3, [pc, #440]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fd fe4f 	bl	800027c <__adddf3>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fac1 	bl	8000b6c <__aeabi_d2f>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a6d      	ldr	r2, [pc, #436]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80025ee:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 80025f0:	4b6d      	ldr	r3, [pc, #436]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ff9f 	bl	8000538 <__aeabi_f2d>
 80025fa:	4b68      	ldr	r3, [pc, #416]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fd fe3c 	bl	800027c <__adddf3>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	f7fe faae 	bl	8000b6c <__aeabi_d2f>
 8002610:	4603      	mov	r3, r0
 8002612:	4a64      	ldr	r2, [pc, #400]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8002614:	6053      	str	r3, [r2, #4]
			goal[2] = goal3[2];
 8002616:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_TIM_PeriodElapsedCallback+0x644>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	4a62      	ldr	r2, [pc, #392]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800261c:	6093      	str	r3, [r2, #8]
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 800261e:	4b5c      	ldr	r3, [pc, #368]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fa78 	bl	8000b1c <__aeabi_d2iz>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f2c0 84cf 	blt.w	8002fd2 <HAL_TIM_PeriodElapsedCallback+0xe6a>
 8002634:	4b56      	ldr	r3, [pc, #344]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	4610      	mov	r0, r2
 800263c:	4619      	mov	r1, r3
 800263e:	f7fe fa6d 	bl	8000b1c <__aeabi_d2iz>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	f300 84c4 	bgt.w	8002fd2 <HAL_TIM_PeriodElapsedCallback+0xe6a>
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x634>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	4610      	mov	r0, r2
 8002652:	4619      	mov	r1, r3
 8002654:	f7fe fa62 	bl	8000b1c <__aeabi_d2iz>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	f2c0 84b9 	blt.w	8002fd2 <HAL_TIM_PeriodElapsedCallback+0xe6a>
 8002660:	4b4e      	ldr	r3, [pc, #312]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8002662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f7fe fa57 	bl	8000b1c <__aeabi_d2iz>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f300 84ae 	bgt.w	8002fd2 <HAL_TIM_PeriodElapsedCallback+0xe6a>
			{
				State = 3;
 8002676:	4b43      	ldr	r3, [pc, #268]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002678:	2203      	movs	r2, #3
 800267a:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 800267c:	f000 bca9 	b.w	8002fd2 <HAL_TIM_PeriodElapsedCallback+0xe6a>
			}
		}
		else if (Position == 2 && State == 3) {
 8002680:	4b4b      	ldr	r3, [pc, #300]	; (80027b0 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	f040 8097 	bne.w	80027b8 <HAL_TIM_PeriodElapsedCallback+0x650>
 800268a:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b03      	cmp	r3, #3
 8002690:	f040 8092 	bne.w	80027b8 <HAL_TIM_PeriodElapsedCallback+0x650>
			errorlaserx = target_laserx[1] - laserx;
 8002694:	4b3c      	ldr	r3, [pc, #240]	; (8002788 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8002696:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800269a:	4b3c      	ldr	r3, [pc, #240]	; (800278c <HAL_TIM_PeriodElapsedCallback+0x624>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fd fdea 	bl	8000278 <__aeabi_dsub>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4939      	ldr	r1, [pc, #228]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80026aa:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[1] - lasery;
 80026ae:	4b39      	ldr	r3, [pc, #228]	; (8002794 <HAL_TIM_PeriodElapsedCallback+0x62c>)
 80026b0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_TIM_PeriodElapsedCallback+0x630>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	f7fd fddd 	bl	8000278 <__aeabi_dsub>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4936      	ldr	r1, [pc, #216]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80026c4:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx + X_enR;
 80026c8:	4b35      	ldr	r3, [pc, #212]	; (80027a0 <HAL_TIM_PeriodElapsedCallback+0x638>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff33 	bl	8000538 <__aeabi_f2d>
 80026d2:	4b2f      	ldr	r3, [pc, #188]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x628>)
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	f7fd fdd0 	bl	800027c <__adddf3>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe fa42 	bl	8000b6c <__aeabi_d2f>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a2e      	ldr	r2, [pc, #184]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 80026ec:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery + Y_enR;
 80026ee:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_TIM_PeriodElapsedCallback+0x640>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fd ff20 	bl	8000538 <__aeabi_f2d>
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x634>)
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	f7fd fdbd 	bl	800027c <__adddf3>
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	4610      	mov	r0, r2
 8002708:	4619      	mov	r1, r3
 800270a:	f7fe fa2f 	bl	8000b6c <__aeabi_d2f>
 800270e:	4603      	mov	r3, r0
 8002710:	4a24      	ldr	r2, [pc, #144]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8002712:	6053      	str	r3, [r2, #4]
			goal[2] = goal4[2];
 8002714:	4b27      	ldr	r3, [pc, #156]	; (80027b4 <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4a22      	ldr	r2, [pc, #136]	; (80027a4 <HAL_TIM_PeriodElapsedCallback+0x63c>)
 800271a:	6093      	str	r3, [r2, #8]
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x628>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f7fe f9f9 	bl	8000b1c <__aeabi_d2iz>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	f2c0 8452 	blt.w	8002fd6 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 8002732:	4b17      	ldr	r3, [pc, #92]	; (8002790 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8002734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe f9ee 	bl	8000b1c <__aeabi_d2iz>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f300 8447 	bgt.w	8002fd6 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x634>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe f9e3 	bl	8000b1c <__aeabi_d2iz>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	f2c0 843c 	blt.w	8002fd6 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800275e:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_TIM_PeriodElapsedCallback+0x634>)
 8002760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f7fe f9d8 	bl	8000b1c <__aeabi_d2iz>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	f300 8431 	bgt.w	8002fd6 <HAL_TIM_PeriodElapsedCallback+0xe6e>
			{
				State = 4;
 8002774:	4b03      	ldr	r3, [pc, #12]	; (8002784 <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8002776:	2204      	movs	r2, #4
 8002778:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 800277a:	f000 bc2c 	b.w	8002fd6 <HAL_TIM_PeriodElapsedCallback+0xe6e>
 800277e:	bf00      	nop
 8002780:	2000045c 	.word	0x2000045c
 8002784:	20000448 	.word	0x20000448
 8002788:	20000070 	.word	0x20000070
 800278c:	20000478 	.word	0x20000478
 8002790:	20000488 	.word	0x20000488
 8002794:	20000090 	.word	0x20000090
 8002798:	20000480 	.word	0x20000480
 800279c:	20000490 	.word	0x20000490
 80027a0:	2000000c 	.word	0x2000000c
 80027a4:	20000464 	.word	0x20000464
 80027a8:	200003f4 	.word	0x200003f4
 80027ac:	20000030 	.word	0x20000030
 80027b0:	2000044a 	.word	0x2000044a
 80027b4:	2000003c 	.word	0x2000003c
			}
		}
		else if (Position == 3 && State == 4) {
 80027b8:	4b9d      	ldr	r3, [pc, #628]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d177      	bne.n	80028b0 <HAL_TIM_PeriodElapsedCallback+0x748>
 80027c0:	4b9c      	ldr	r3, [pc, #624]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d173      	bne.n	80028b0 <HAL_TIM_PeriodElapsedCallback+0x748>
			errorlaserx = target_laserx[2] - laserx;
 80027c8:	4b9b      	ldr	r3, [pc, #620]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 80027ca:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80027ce:	4b9b      	ldr	r3, [pc, #620]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fd fd50 	bl	8000278 <__aeabi_dsub>
 80027d8:	4602      	mov	r2, r0
 80027da:	460b      	mov	r3, r1
 80027dc:	4998      	ldr	r1, [pc, #608]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 80027de:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = target_lasery[2] - lasery;
 80027e2:	4b98      	ldr	r3, [pc, #608]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 80027e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80027e8:	4b97      	ldr	r3, [pc, #604]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 80027ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ee:	f7fd fd43 	bl	8000278 <__aeabi_dsub>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	4995      	ldr	r1, [pc, #596]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80027f8:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx + X_enR;
 80027fc:	4b94      	ldr	r3, [pc, #592]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fe99 	bl	8000538 <__aeabi_f2d>
 8002806:	4b8e      	ldr	r3, [pc, #568]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280c:	f7fd fd36 	bl	800027c <__adddf3>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4610      	mov	r0, r2
 8002816:	4619      	mov	r1, r3
 8002818:	f7fe f9a8 	bl	8000b6c <__aeabi_d2f>
 800281c:	4603      	mov	r3, r0
 800281e:	4a8d      	ldr	r2, [pc, #564]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002820:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery + Y_enR;
 8002822:	4b8d      	ldr	r3, [pc, #564]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe86 	bl	8000538 <__aeabi_f2d>
 800282c:	4b87      	ldr	r3, [pc, #540]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	f7fd fd23 	bl	800027c <__adddf3>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	f7fe f995 	bl	8000b6c <__aeabi_d2f>
 8002842:	4603      	mov	r3, r0
 8002844:	4a83      	ldr	r2, [pc, #524]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002846:	6053      	str	r3, [r2, #4]
			goal[2] = goal5[2];
 8002848:	4b84      	ldr	r3, [pc, #528]	; (8002a5c <HAL_TIM_PeriodElapsedCallback+0x8f4>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a81      	ldr	r2, [pc, #516]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800284e:	6093      	str	r3, [r2, #8]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05) {
 8002850:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	f7fe f95f 	bl	8000b1c <__aeabi_d2iz>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	f2c0 83ba 	blt.w	8002fda <HAL_TIM_PeriodElapsedCallback+0xe72>
 8002866:	4b76      	ldr	r3, [pc, #472]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f7fe f954 	bl	8000b1c <__aeabi_d2iz>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	f300 83af 	bgt.w	8002fda <HAL_TIM_PeriodElapsedCallback+0xe72>
 800287c:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 800287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f7fe f949 	bl	8000b1c <__aeabi_d2iz>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	f2c0 83a4 	blt.w	8002fda <HAL_TIM_PeriodElapsedCallback+0xe72>
 8002892:	4b6e      	ldr	r3, [pc, #440]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f7fe f93e 	bl	8000b1c <__aeabi_d2iz>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f300 8399 	bgt.w	8002fda <HAL_TIM_PeriodElapsedCallback+0xe72>
				State = 5;
 80028a8:	4b62      	ldr	r3, [pc, #392]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80028aa:	2205      	movs	r2, #5
 80028ac:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05) {
 80028ae:	e394      	b.n	8002fda <HAL_TIM_PeriodElapsedCallback+0xe72>
			}
		}
		else if (Position == 4 && State == 5) {
 80028b0:	4b5f      	ldr	r3, [pc, #380]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d113      	bne.n	80028e0 <HAL_TIM_PeriodElapsedCallback+0x778>
 80028b8:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b05      	cmp	r3, #5
 80028be:	d10f      	bne.n	80028e0 <HAL_TIM_PeriodElapsedCallback+0x778>
			goal[0] = goal6[0];
 80028c0:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a63      	ldr	r2, [pc, #396]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80028c6:	6013      	str	r3, [r2, #0]
			goal[1] = goal6[1];
 80028c8:	4b65      	ldr	r3, [pc, #404]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a61      	ldr	r2, [pc, #388]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80028ce:	6053      	str	r3, [r2, #4]
			goal[2] = goal6[2];
 80028d0:	4b63      	ldr	r3, [pc, #396]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	4a5f      	ldr	r2, [pc, #380]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80028d6:	6093      	str	r3, [r2, #8]
			State = 6;
 80028d8:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 80028da:	2206      	movs	r2, #6
 80028dc:	701a      	strb	r2, [r3, #0]
 80028de:	e3a0      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
		} else if (abs(errorY) < 0.05 && State == 6) {
 80028e0:	4b60      	ldr	r3, [pc, #384]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 80028e2:	edd3 7a00 	vldr	s15, [r3]
 80028e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028ea:	ee17 3a90 	vmov	r3, s15
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	db1c      	blt.n	800292c <HAL_TIM_PeriodElapsedCallback+0x7c4>
 80028f2:	4b5c      	ldr	r3, [pc, #368]	; (8002a64 <HAL_TIM_PeriodElapsedCallback+0x8fc>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028fc:	ee17 3a90 	vmov	r3, s15
 8002900:	2b00      	cmp	r3, #0
 8002902:	dc13      	bgt.n	800292c <HAL_TIM_PeriodElapsedCallback+0x7c4>
 8002904:	4b4b      	ldr	r3, [pc, #300]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b06      	cmp	r3, #6
 800290a:	d10f      	bne.n	800292c <HAL_TIM_PeriodElapsedCallback+0x7c4>
			goal[0] = goal6[0];
 800290c:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a50      	ldr	r2, [pc, #320]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002912:	6013      	str	r3, [r2, #0]
			goal[1] = goal6[1];
 8002914:	4b52      	ldr	r3, [pc, #328]	; (8002a60 <HAL_TIM_PeriodElapsedCallback+0x8f8>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4a4e      	ldr	r2, [pc, #312]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 800291a:	6053      	str	r3, [r2, #4]
			goal[2] = goal7[2];
 800291c:	4b52      	ldr	r3, [pc, #328]	; (8002a68 <HAL_TIM_PeriodElapsedCallback+0x900>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a4c      	ldr	r2, [pc, #304]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002922:	6093      	str	r3, [r2, #8]
			State = 7;
 8002924:	4b43      	ldr	r3, [pc, #268]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002926:	2207      	movs	r2, #7
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e37a      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
		}
		else if (Position == 5 && State == 7) {
 800292c:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <HAL_TIM_PeriodElapsedCallback+0x8c8>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b05      	cmp	r3, #5
 8002932:	f040 809d 	bne.w	8002a70 <HAL_TIM_PeriodElapsedCallback+0x908>
 8002936:	4b3f      	ldr	r3, [pc, #252]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b07      	cmp	r3, #7
 800293c:	f040 8098 	bne.w	8002a70 <HAL_TIM_PeriodElapsedCallback+0x908>
			errorlaserx = target_laserx[3] - lasery;
 8002940:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_TIM_PeriodElapsedCallback+0x8d0>)
 8002942:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002946:	4b40      	ldr	r3, [pc, #256]	; (8002a48 <HAL_TIM_PeriodElapsedCallback+0x8e0>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd fc94 	bl	8000278 <__aeabi_dsub>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	493a      	ldr	r1, [pc, #232]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002956:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[3] + laserx;
 800295a:	4b38      	ldr	r3, [pc, #224]	; (8002a3c <HAL_TIM_PeriodElapsedCallback+0x8d4>)
 800295c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002960:	4b38      	ldr	r3, [pc, #224]	; (8002a44 <HAL_TIM_PeriodElapsedCallback+0x8dc>)
 8002962:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002966:	f7fd fc87 	bl	8000278 <__aeabi_dsub>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002970:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002974:	4b36      	ldr	r3, [pc, #216]	; (8002a50 <HAL_TIM_PeriodElapsedCallback+0x8e8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7fd fddd 	bl	8000538 <__aeabi_f2d>
 800297e:	4b30      	ldr	r3, [pc, #192]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 8002980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002984:	f7fd fc7a 	bl	800027c <__adddf3>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4610      	mov	r0, r2
 800298e:	4619      	mov	r1, r3
 8002990:	f7fe f8ec 	bl	8000b6c <__aeabi_d2f>
 8002994:	4603      	mov	r3, r0
 8002996:	4a2f      	ldr	r2, [pc, #188]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 8002998:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 800299a:	4b2f      	ldr	r3, [pc, #188]	; (8002a58 <HAL_TIM_PeriodElapsedCallback+0x8f0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdca 	bl	8000538 <__aeabi_f2d>
 80029a4:	4b29      	ldr	r3, [pc, #164]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd fc67 	bl	800027c <__adddf3>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f8d9 	bl	8000b6c <__aeabi_d2f>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4a25      	ldr	r2, [pc, #148]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80029be:	6053      	str	r3, [r2, #4]
			goal[2] = 1.57;
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_TIM_PeriodElapsedCallback+0x8ec>)
 80029c2:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_TIM_PeriodElapsedCallback+0x904>)
 80029c4:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 7) {
 80029c6:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	4610      	mov	r0, r2
 80029ce:	4619      	mov	r1, r3
 80029d0:	f7fe f8a4 	bl	8000b1c <__aeabi_d2iz>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	f2c0 8301 	blt.w	8002fde <HAL_TIM_PeriodElapsedCallback+0xe76>
 80029dc:	4b18      	ldr	r3, [pc, #96]	; (8002a40 <HAL_TIM_PeriodElapsedCallback+0x8d8>)
 80029de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f899 	bl	8000b1c <__aeabi_d2iz>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f300 82f6 	bgt.w	8002fde <HAL_TIM_PeriodElapsedCallback+0xe76>
 80029f2:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f88e 	bl	8000b1c <__aeabi_d2iz>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f2c0 82eb 	blt.w	8002fde <HAL_TIM_PeriodElapsedCallback+0xe76>
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <HAL_TIM_PeriodElapsedCallback+0x8e4>)
 8002a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f7fe f883 	bl	8000b1c <__aeabi_d2iz>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f300 82e0 	bgt.w	8002fde <HAL_TIM_PeriodElapsedCallback+0xe76>
 8002a1e:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b07      	cmp	r3, #7
 8002a24:	f040 82db 	bne.w	8002fde <HAL_TIM_PeriodElapsedCallback+0xe76>
				State = 8;
 8002a28:	4b02      	ldr	r3, [pc, #8]	; (8002a34 <HAL_TIM_PeriodElapsedCallback+0x8cc>)
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 7) {
 8002a2e:	e2d6      	b.n	8002fde <HAL_TIM_PeriodElapsedCallback+0xe76>
 8002a30:	2000044a 	.word	0x2000044a
 8002a34:	20000448 	.word	0x20000448
 8002a38:	20000070 	.word	0x20000070
 8002a3c:	20000478 	.word	0x20000478
 8002a40:	20000488 	.word	0x20000488
 8002a44:	20000090 	.word	0x20000090
 8002a48:	20000480 	.word	0x20000480
 8002a4c:	20000490 	.word	0x20000490
 8002a50:	2000000c 	.word	0x2000000c
 8002a54:	20000464 	.word	0x20000464
 8002a58:	200003f4 	.word	0x200003f4
 8002a5c:	20000048 	.word	0x20000048
 8002a60:	20000054 	.word	0x20000054
 8002a64:	2000045c 	.word	0x2000045c
 8002a68:	20000060 	.word	0x20000060
 8002a6c:	3fc8f5c3 	.word	0x3fc8f5c3
			}
		}
		else if (Position == 6 && State == 8) {
 8002a70:	4b80      	ldr	r3, [pc, #512]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b06      	cmp	r3, #6
 8002a76:	d17b      	bne.n	8002b70 <HAL_TIM_PeriodElapsedCallback+0xa08>
 8002a78:	4b7f      	ldr	r3, [pc, #508]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d177      	bne.n	8002b70 <HAL_TIM_PeriodElapsedCallback+0xa08>
			errorlaserx = target_laserx[3] - lasery;
 8002a80:	4b7e      	ldr	r3, [pc, #504]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0xb14>)
 8002a82:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002a86:	4b7e      	ldr	r3, [pc, #504]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fbf4 	bl	8000278 <__aeabi_dsub>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	497b      	ldr	r1, [pc, #492]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002a96:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[4] + laserx;
 8002a9a:	4b7b      	ldr	r3, [pc, #492]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0xb20>)
 8002a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa0:	4b7a      	ldr	r3, [pc, #488]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0xb24>)
 8002aa2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002aa6:	f7fd fbe7 	bl	8000278 <__aeabi_dsub>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4978      	ldr	r1, [pc, #480]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002ab0:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002ab4:	4b77      	ldr	r3, [pc, #476]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd fd3d 	bl	8000538 <__aeabi_f2d>
 8002abe:	4b71      	ldr	r3, [pc, #452]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fbda 	bl	800027c <__adddf3>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fe f84c 	bl	8000b6c <__aeabi_d2f>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4a70      	ldr	r2, [pc, #448]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002ad8:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002ada:	4b70      	ldr	r3, [pc, #448]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd2a 	bl	8000538 <__aeabi_f2d>
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f7fd fbc7 	bl	800027c <__adddf3>
 8002aee:	4602      	mov	r2, r0
 8002af0:	460b      	mov	r3, r1
 8002af2:	4610      	mov	r0, r2
 8002af4:	4619      	mov	r1, r3
 8002af6:	f7fe f839 	bl	8000b6c <__aeabi_d2f>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4a66      	ldr	r2, [pc, #408]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002afe:	6053      	str	r3, [r2, #4]
			goal[2] = 1.57;
 8002b00:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002b02:	4a67      	ldr	r2, [pc, #412]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8002b04:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 8) {
 8002b06:	4b5f      	ldr	r3, [pc, #380]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fe f804 	bl	8000b1c <__aeabi_d2iz>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f2c0 8263 	blt.w	8002fe2 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	4610      	mov	r0, r2
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7fd fff9 	bl	8000b1c <__aeabi_d2iz>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f300 8258 	bgt.w	8002fe2 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 8002b32:	4b57      	ldr	r3, [pc, #348]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fd ffee 	bl	8000b1c <__aeabi_d2iz>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f2c0 824d 	blt.w	8002fe2 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 8002b48:	4b51      	ldr	r3, [pc, #324]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f7fd ffe3 	bl	8000b1c <__aeabi_d2iz>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f300 8242 	bgt.w	8002fe2 <HAL_TIM_PeriodElapsedCallback+0xe7a>
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	f040 823d 	bne.w	8002fe2 <HAL_TIM_PeriodElapsedCallback+0xe7a>
					State = 9;
 8002b68:	4b43      	ldr	r3, [pc, #268]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002b6a:	2209      	movs	r2, #9
 8002b6c:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 8) {
 8002b6e:	e238      	b.n	8002fe2 <HAL_TIM_PeriodElapsedCallback+0xe7a>
			}
		}
		else if (Position == 7 && State == 9 ) {
 8002b70:	4b40      	ldr	r3, [pc, #256]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0xb0c>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b07      	cmp	r3, #7
 8002b76:	f040 8095 	bne.w	8002ca4 <HAL_TIM_PeriodElapsedCallback+0xb3c>
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b09      	cmp	r3, #9
 8002b80:	f040 8090 	bne.w	8002ca4 <HAL_TIM_PeriodElapsedCallback+0xb3c>
			errorlaserx = target_laserx[3] - lasery;
 8002b84:	4b3d      	ldr	r3, [pc, #244]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0xb14>)
 8002b86:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002b8a:	4b3d      	ldr	r3, [pc, #244]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0xb18>)
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f7fd fb72 	bl	8000278 <__aeabi_dsub>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	493a      	ldr	r1, [pc, #232]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002b9a:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[5] + laserx;
 8002b9e:	4b3a      	ldr	r3, [pc, #232]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0xb20>)
 8002ba0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba4:	4b39      	ldr	r3, [pc, #228]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0xb24>)
 8002ba6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002baa:	f7fd fb65 	bl	8000278 <__aeabi_dsub>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4937      	ldr	r1, [pc, #220]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002bb4:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002bb8:	4b36      	ldr	r3, [pc, #216]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0xb2c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fd fcbb 	bl	8000538 <__aeabi_f2d>
 8002bc2:	4b30      	ldr	r3, [pc, #192]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f7fd fb58 	bl	800027c <__adddf3>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f7fd ffca 	bl	8000b6c <__aeabi_d2f>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4a2f      	ldr	r2, [pc, #188]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002bdc:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002bde:	4b2f      	ldr	r3, [pc, #188]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0xb34>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fca8 	bl	8000538 <__aeabi_f2d>
 8002be8:	4b29      	ldr	r3, [pc, #164]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bee:	f7fd fb45 	bl	800027c <__adddf3>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f7fd ffb7 	bl	8000b6c <__aeabi_d2f>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4a25      	ldr	r2, [pc, #148]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002c02:	6053      	str	r3, [r2, #4]
			goal[2] = 1.57;
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0xb30>)
 8002c06:	4a26      	ldr	r2, [pc, #152]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xb38>)
 8002c08:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 9) {
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd ff82 	bl	8000b1c <__aeabi_d2iz>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f2c0 81e3 	blt.w	8002fe6 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002c20:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xb1c>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ff77 	bl	8000b1c <__aeabi_d2iz>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f300 81d8 	bgt.w	8002fe6 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002c36:	4b16      	ldr	r3, [pc, #88]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd ff6c 	bl	8000b1c <__aeabi_d2iz>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f2c0 81cd 	blt.w	8002fe6 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002c4c:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb28>)
 8002c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c52:	4610      	mov	r0, r2
 8002c54:	4619      	mov	r1, r3
 8002c56:	f7fd ff61 	bl	8000b1c <__aeabi_d2iz>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f300 81c2 	bgt.w	8002fe6 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b09      	cmp	r3, #9
 8002c68:	f040 81bd 	bne.w	8002fe6 <HAL_TIM_PeriodElapsedCallback+0xe7e>
					State = 10;
 8002c6c:	4b02      	ldr	r3, [pc, #8]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0xb10>)
 8002c6e:	220a      	movs	r2, #10
 8002c70:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 9) {
 8002c72:	e1b8      	b.n	8002fe6 <HAL_TIM_PeriodElapsedCallback+0xe7e>
 8002c74:	2000044a 	.word	0x2000044a
 8002c78:	20000448 	.word	0x20000448
 8002c7c:	20000070 	.word	0x20000070
 8002c80:	20000480 	.word	0x20000480
 8002c84:	20000488 	.word	0x20000488
 8002c88:	20000478 	.word	0x20000478
 8002c8c:	20000090 	.word	0x20000090
 8002c90:	20000490 	.word	0x20000490
 8002c94:	2000000c 	.word	0x2000000c
 8002c98:	20000464 	.word	0x20000464
 8002c9c:	200003f4 	.word	0x200003f4
 8002ca0:	3fc8f5c3 	.word	0x3fc8f5c3
			}
		}
		else if (Position == 8 && State == 10 ) {
 8002ca4:	4b80      	ldr	r3, [pc, #512]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d17b      	bne.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0xc3c>
 8002cac:	4b7f      	ldr	r3, [pc, #508]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b0a      	cmp	r3, #10
 8002cb2:	d177      	bne.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0xc3c>
			errorlaserx = target_laserx[3] - lasery;
 8002cb4:	4b7e      	ldr	r3, [pc, #504]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 8002cb6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002cba:	4b7e      	ldr	r3, [pc, #504]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8002cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc0:	f7fd fada 	bl	8000278 <__aeabi_dsub>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	497b      	ldr	r1, [pc, #492]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002cca:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[6] + laserx;
 8002cce:	4b7b      	ldr	r3, [pc, #492]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8002cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cd4:	4b7a      	ldr	r3, [pc, #488]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8002cd6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002cda:	f7fd facd 	bl	8000278 <__aeabi_dsub>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4978      	ldr	r1, [pc, #480]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002ce4:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002ce8:	4b77      	ldr	r3, [pc, #476]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fd fc23 	bl	8000538 <__aeabi_f2d>
 8002cf2:	4b71      	ldr	r3, [pc, #452]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	f7fd fac0 	bl	800027c <__adddf3>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4610      	mov	r0, r2
 8002d02:	4619      	mov	r1, r3
 8002d04:	f7fd ff32 	bl	8000b6c <__aeabi_d2f>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a70      	ldr	r2, [pc, #448]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002d0c:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002d0e:	4b70      	ldr	r3, [pc, #448]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fc10 	bl	8000538 <__aeabi_f2d>
 8002d18:	4b6a      	ldr	r3, [pc, #424]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd faad 	bl	800027c <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd ff1f 	bl	8000b6c <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a66      	ldr	r2, [pc, #408]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002d32:	6053      	str	r3, [r2, #4]
			goal[2] = 1.57;
 8002d34:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002d36:	4a67      	ldr	r2, [pc, #412]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8002d38:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 10) {
 8002d3a:	4b5f      	ldr	r3, [pc, #380]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f7fd feea 	bl	8000b1c <__aeabi_d2iz>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f2c0 814d 	blt.w	8002fea <HAL_TIM_PeriodElapsedCallback+0xe82>
 8002d50:	4b59      	ldr	r3, [pc, #356]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd fedf 	bl	8000b1c <__aeabi_d2iz>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f300 8142 	bgt.w	8002fea <HAL_TIM_PeriodElapsedCallback+0xe82>
 8002d66:	4b57      	ldr	r3, [pc, #348]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fd fed4 	bl	8000b1c <__aeabi_d2iz>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f2c0 8137 	blt.w	8002fea <HAL_TIM_PeriodElapsedCallback+0xe82>
 8002d7c:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f7fd fec9 	bl	8000b1c <__aeabi_d2iz>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f300 812c 	bgt.w	8002fea <HAL_TIM_PeriodElapsedCallback+0xe82>
 8002d92:	4b46      	ldr	r3, [pc, #280]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b0a      	cmp	r3, #10
 8002d98:	f040 8127 	bne.w	8002fea <HAL_TIM_PeriodElapsedCallback+0xe82>
					State = 11;
 8002d9c:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002d9e:	220b      	movs	r2, #11
 8002da0:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 10) {
 8002da2:	e122      	b.n	8002fea <HAL_TIM_PeriodElapsedCallback+0xe82>
			}
		}
		else if (Position == 9 && State == 11 ) {
 8002da4:	4b40      	ldr	r3, [pc, #256]	; (8002ea8 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b09      	cmp	r3, #9
 8002daa:	f040 8095 	bne.w	8002ed8 <HAL_TIM_PeriodElapsedCallback+0xd70>
 8002dae:	4b3f      	ldr	r3, [pc, #252]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b0b      	cmp	r3, #11
 8002db4:	f040 8090 	bne.w	8002ed8 <HAL_TIM_PeriodElapsedCallback+0xd70>
			errorlaserx = target_laserx[3] - lasery;
 8002db8:	4b3d      	ldr	r3, [pc, #244]	; (8002eb0 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 8002dba:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002dbe:	4b3d      	ldr	r3, [pc, #244]	; (8002eb4 <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 8002dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc4:	f7fd fa58 	bl	8000278 <__aeabi_dsub>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	493a      	ldr	r1, [pc, #232]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002dce:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[7] + laserx;
 8002dd2:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <HAL_TIM_PeriodElapsedCallback+0xd54>)
 8002dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_TIM_PeriodElapsedCallback+0xd58>)
 8002dda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002dde:	f7fd fa4b 	bl	8000278 <__aeabi_dsub>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	4937      	ldr	r1, [pc, #220]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002de8:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002dec:	4b36      	ldr	r3, [pc, #216]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0xd60>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fba1 	bl	8000538 <__aeabi_f2d>
 8002df6:	4b30      	ldr	r3, [pc, #192]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	f7fd fa3e 	bl	800027c <__adddf3>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f7fd feb0 	bl	8000b6c <__aeabi_d2f>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002e10:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002e12:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0xd68>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fb8e 	bl	8000538 <__aeabi_f2d>
 8002e1c:	4b29      	ldr	r3, [pc, #164]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	f7fd fa2b 	bl	800027c <__adddf3>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4610      	mov	r0, r2
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	f7fd fe9d 	bl	8000b6c <__aeabi_d2f>
 8002e32:	4603      	mov	r3, r0
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002e36:	6053      	str	r3, [r2, #4]
			goal[2] = 1.57;
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0xd64>)
 8002e3a:	4a26      	ldr	r2, [pc, #152]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0xd6c>)
 8002e3c:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) <= 0.03 && abs(errorlasery) <= 0.03 && State == 11) {
 8002e3e:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	f7fd fe68 	bl	8000b1c <__aeabi_d2iz>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f2c0 80e6 	blt.w	8003020 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f7fd fe5d 	bl	8000b1c <__aeabi_d2iz>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f300 80db 	bgt.w	8003020 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	f7fd fe52 	bl	8000b1c <__aeabi_d2iz>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f2c0 80d0 	blt.w	8003020 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_TIM_PeriodElapsedCallback+0xd5c>)
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f7fd fe47 	bl	8000b1c <__aeabi_d2iz>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f300 80c5 	bgt.w	8003020 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 8002e96:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b0b      	cmp	r3, #11
 8002e9c:	f040 80c0 	bne.w	8003020 <HAL_TIM_PeriodElapsedCallback+0xeb8>
					State = 12;
 8002ea0:	4b02      	ldr	r3, [pc, #8]	; (8002eac <HAL_TIM_PeriodElapsedCallback+0xd44>)
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	701a      	strb	r2, [r3, #0]
			if (abs(errorlaserx) <= 0.03 && abs(errorlasery) <= 0.03 && State == 11) {
 8002ea6:	e0bb      	b.n	8003020 <HAL_TIM_PeriodElapsedCallback+0xeb8>
 8002ea8:	2000044a 	.word	0x2000044a
 8002eac:	20000448 	.word	0x20000448
 8002eb0:	20000070 	.word	0x20000070
 8002eb4:	20000480 	.word	0x20000480
 8002eb8:	20000488 	.word	0x20000488
 8002ebc:	20000478 	.word	0x20000478
 8002ec0:	20000090 	.word	0x20000090
 8002ec4:	20000490 	.word	0x20000490
 8002ec8:	2000000c 	.word	0x2000000c
 8002ecc:	20000464 	.word	0x20000464
 8002ed0:	200003f4 	.word	0x200003f4
 8002ed4:	3fc8f5c3 	.word	0x3fc8f5c3
			}
		}
		else if (Position == 10 && State == 12 ) {
 8002ed8:	4b45      	ldr	r3, [pc, #276]	; (8002ff0 <HAL_TIM_PeriodElapsedCallback+0xe88>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b0a      	cmp	r3, #10
 8002ede:	f040 80a0 	bne.w	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
 8002ee2:	4b44      	ldr	r3, [pc, #272]	; (8002ff4 <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	f040 809b 	bne.w	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
			errorlaserx = target_laserx[3] - lasery;
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0xe90>)
 8002eee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002ef2:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0xe94>)
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f7fd f9be 	bl	8000278 <__aeabi_dsub>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	493f      	ldr	r1, [pc, #252]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 8002f02:	e9c1 2300 	strd	r2, r3, [r1]
			errorlasery = -target_lasery[8] + laserx;
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <HAL_TIM_PeriodElapsedCallback+0xe9c>)
 8002f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f0c:	4b3e      	ldr	r3, [pc, #248]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0xea0>)
 8002f0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f12:	f7fd f9b1 	bl	8000278 <__aeabi_dsub>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	493c      	ldr	r1, [pc, #240]	; (800300c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8002f1c:	e9c1 2300 	strd	r2, r3, [r1]
			goal[0] = errorlaserx+X_enR;
 8002f20:	4b3b      	ldr	r3, [pc, #236]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0xea8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fb07 	bl	8000538 <__aeabi_f2d>
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 8002f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f30:	f7fd f9a4 	bl	800027c <__adddf3>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4610      	mov	r0, r2
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	f7fd fe16 	bl	8000b6c <__aeabi_d2f>
 8002f40:	4603      	mov	r3, r0
 8002f42:	4a34      	ldr	r2, [pc, #208]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8002f44:	6013      	str	r3, [r2, #0]
			goal[1] = errorlasery+Y_enR;
 8002f46:	4b34      	ldr	r3, [pc, #208]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0xeb0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd faf4 	bl	8000538 <__aeabi_f2d>
 8002f50:	4b2e      	ldr	r3, [pc, #184]	; (800300c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8002f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f56:	f7fd f991 	bl	800027c <__adddf3>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7fd fe03 	bl	8000b6c <__aeabi_d2f>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8002f6a:	6053      	str	r3, [r2, #4]
			goal[2] = 1.57;
 8002f6c:	4b29      	ldr	r3, [pc, #164]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0xeac>)
 8002f6e:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_TIM_PeriodElapsedCallback+0xeb4>)
 8002f70:	609a      	str	r2, [r3, #8]
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 12) {
 8002f72:	4b23      	ldr	r3, [pc, #140]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	f7fd fdce 	bl	8000b1c <__aeabi_d2iz>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	db4d      	blt.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
 8002f86:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0xe98>)
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7fd fdc4 	bl	8000b1c <__aeabi_d2iz>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	dc43      	bgt.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
 8002f9a:	4b1c      	ldr	r3, [pc, #112]	; (800300c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fdba 	bl	8000b1c <__aeabi_d2iz>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db39      	blt.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <HAL_TIM_PeriodElapsedCallback+0xea4>)
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	f7fd fdb0 	bl	8000b1c <__aeabi_d2iz>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dc2f      	bgt.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
 8002fc2:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b0c      	cmp	r3, #12
 8002fc8:	d12b      	bne.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
					State = 13;
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_TIM_PeriodElapsedCallback+0xe8c>)
 8002fcc:	220d      	movs	r2, #13
 8002fce:	701a      	strb	r2, [r3, #0]
 8002fd0:	e027      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 8002fd2:	bf00      	nop
 8002fd4:	e025      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx)< 0.05 && abs(errorlasery)<0.05)
 8002fd6:	bf00      	nop
 8002fd8:	e023      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05) {
 8002fda:	bf00      	nop
 8002fdc:	e021      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 7) {
 8002fde:	bf00      	nop
 8002fe0:	e01f      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) < 0.05 && abs(errorlasery) < 0.05 && State == 8) {
 8002fe2:	bf00      	nop
 8002fe4:	e01d      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 9) {
 8002fe6:	bf00      	nop
 8002fe8:	e01b      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
			if (abs(errorlaserx) <= 0.05 && abs(errorlasery) <= 0.05 && State == 10) {
 8002fea:	bf00      	nop
 8002fec:	e019      	b.n	8003022 <HAL_TIM_PeriodElapsedCallback+0xeba>
 8002fee:	bf00      	nop
 8002ff0:	2000044a 	.word	0x2000044a
 8002ff4:	20000448 	.word	0x20000448
 8002ff8:	20000070 	.word	0x20000070
 8002ffc:	20000480 	.word	0x20000480
 8003000:	20000488 	.word	0x20000488
 8003004:	20000478 	.word	0x20000478
 8003008:	20000090 	.word	0x20000090
 800300c:	20000490 	.word	0x20000490
 8003010:	2000000c 	.word	0x2000000c
 8003014:	20000464 	.word	0x20000464
 8003018:	200003f4 	.word	0x200003f4
 800301c:	3fc8f5c3 	.word	0x3fc8f5c3
			if (abs(errorlaserx) <= 0.03 && abs(errorlasery) <= 0.03 && State == 11) {
 8003020:	bf00      	nop
			}
		}
	}
	if (htim->Instance == TIM12)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4aca      	ldr	r2, [pc, #808]	; (8003350 <HAL_TIM_PeriodElapsedCallback+0x11e8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	f040 81d5 	bne.w	80033d8 <HAL_TIM_PeriodElapsedCallback+0x1270>
	{
		read_encoder(&encoderX, &htim2, CPR_X);
 800302e:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 8003354 <HAL_TIM_PeriodElapsedCallback+0x11ec>
 8003032:	49c9      	ldr	r1, [pc, #804]	; (8003358 <HAL_TIM_PeriodElapsedCallback+0x11f0>)
 8003034:	48c9      	ldr	r0, [pc, #804]	; (800335c <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 8003036:	f7fe ff13 	bl	8001e60 <read_encoder>
	    read_encoder(&encoderY, &htim4, CPR_Y);
 800303a:	ed9f 0ac6 	vldr	s0, [pc, #792]	; 8003354 <HAL_TIM_PeriodElapsedCallback+0x11ec>
 800303e:	49c8      	ldr	r1, [pc, #800]	; (8003360 <HAL_TIM_PeriodElapsedCallback+0x11f8>)
 8003040:	48c8      	ldr	r0, [pc, #800]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 8003042:	f7fe ff0d 	bl	8001e60 <read_encoder>
	    W1 = (double) encoderX.rdps * r;
 8003046:	4bc5      	ldr	r3, [pc, #788]	; (800335c <HAL_TIM_PeriodElapsedCallback+0x11f4>)
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fa74 	bl	8000538 <__aeabi_f2d>
 8003050:	a3b5      	add	r3, pc, #724	; (adr r3, 8003328 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 8003052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003056:	f7fd fac7 	bl	80005e8 <__aeabi_dmul>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f7fd fd83 	bl	8000b6c <__aeabi_d2f>
 8003066:	4603      	mov	r3, r0
 8003068:	4abf      	ldr	r2, [pc, #764]	; (8003368 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 800306a:	6013      	str	r3, [r2, #0]
	    W2 = (double) encoderY.rdps * r;
 800306c:	4bbd      	ldr	r3, [pc, #756]	; (8003364 <HAL_TIM_PeriodElapsedCallback+0x11fc>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fd fa61 	bl	8000538 <__aeabi_f2d>
 8003076:	a3ac      	add	r3, pc, #688	; (adr r3, 8003328 <HAL_TIM_PeriodElapsedCallback+0x11c0>)
 8003078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307c:	f7fd fab4 	bl	80005e8 <__aeabi_dmul>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f7fd fd70 	bl	8000b6c <__aeabi_d2f>
 800308c:	4603      	mov	r3, r0
 800308e:	4ab7      	ldr	r2, [pc, #732]	; (800336c <HAL_TIM_PeriodElapsedCallback+0x1204>)
 8003090:	6013      	str	r3, [r2, #0]
	    Q = bno055_getVectorQuaternion();
 8003092:	f7fe fb65 	bl	8001760 <bno055_getVectorQuaternion>
 8003096:	eeb0 4a40 	vmov.f32	s8, s0
 800309a:	eef0 4a60 	vmov.f32	s9, s1
 800309e:	eeb0 5a41 	vmov.f32	s10, s2
 80030a2:	eef0 5a61 	vmov.f32	s11, s3
 80030a6:	eeb0 6a42 	vmov.f32	s12, s4
 80030aa:	eef0 6a62 	vmov.f32	s13, s5
 80030ae:	eeb0 7a43 	vmov.f32	s14, s6
 80030b2:	eef0 7a63 	vmov.f32	s15, s7
 80030b6:	4bae      	ldr	r3, [pc, #696]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 80030b8:	ed83 4b00 	vstr	d4, [r3]
 80030bc:	ed83 5b02 	vstr	d5, [r3, #8]
 80030c0:	ed83 6b04 	vstr	d6, [r3, #16]
 80030c4:	ed83 7b06 	vstr	d7, [r3, #24]
		// yaw (z-axis rotation)
		siny_cosp = 2 * (Q.w * Q.z + Q.x * Q.y);
 80030c8:	4ba9      	ldr	r3, [pc, #676]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 80030ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030ce:	4ba8      	ldr	r3, [pc, #672]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 80030d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80030d4:	f7fd fa88 	bl	80005e8 <__aeabi_dmul>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4ba3      	ldr	r3, [pc, #652]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 80030e2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80030e6:	4ba2      	ldr	r3, [pc, #648]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 80030e8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030ec:	f7fd fa7c 	bl	80005e8 <__aeabi_dmul>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4620      	mov	r0, r4
 80030f6:	4629      	mov	r1, r5
 80030f8:	f7fd f8c0 	bl	800027c <__adddf3>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	f7fd f8b8 	bl	800027c <__adddf3>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4998      	ldr	r1, [pc, #608]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 8003112:	e9c1 2300 	strd	r2, r3, [r1]
		cosy_cosp = 1 - 2 * (Q.y * Q.y + Q.z * Q.z);
 8003116:	4b96      	ldr	r3, [pc, #600]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003118:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800311c:	4b94      	ldr	r3, [pc, #592]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 800311e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003122:	f7fd fa61 	bl	80005e8 <__aeabi_dmul>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4614      	mov	r4, r2
 800312c:	461d      	mov	r5, r3
 800312e:	4b90      	ldr	r3, [pc, #576]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003130:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003134:	4b8e      	ldr	r3, [pc, #568]	; (8003370 <HAL_TIM_PeriodElapsedCallback+0x1208>)
 8003136:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800313a:	f7fd fa55 	bl	80005e8 <__aeabi_dmul>
 800313e:	4602      	mov	r2, r0
 8003140:	460b      	mov	r3, r1
 8003142:	4620      	mov	r0, r4
 8003144:	4629      	mov	r1, r5
 8003146:	f7fd f899 	bl	800027c <__adddf3>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4610      	mov	r0, r2
 8003150:	4619      	mov	r1, r3
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	f7fd f891 	bl	800027c <__adddf3>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	f04f 0000 	mov.w	r0, #0
 8003162:	4985      	ldr	r1, [pc, #532]	; (8003378 <HAL_TIM_PeriodElapsedCallback+0x1210>)
 8003164:	f7fd f888 	bl	8000278 <__aeabi_dsub>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4983      	ldr	r1, [pc, #524]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800316e:	e9c1 2300 	strd	r2, r3, [r1]
		Angle.Yaw = atan2(siny_cosp, cosy_cosp);
 8003172:	4b80      	ldr	r3, [pc, #512]	; (8003374 <HAL_TIM_PeriodElapsedCallback+0x120c>)
 8003174:	ed93 7b00 	vldr	d7, [r3]
 8003178:	4b80      	ldr	r3, [pc, #512]	; (800337c <HAL_TIM_PeriodElapsedCallback+0x1214>)
 800317a:	ed93 6b00 	vldr	d6, [r3]
 800317e:	eeb0 1a46 	vmov.f32	s2, s12
 8003182:	eef0 1a66 	vmov.f32	s3, s13
 8003186:	eeb0 0a47 	vmov.f32	s0, s14
 800318a:	eef0 0a67 	vmov.f32	s1, s15
 800318e:	f005 fed3 	bl	8008f38 <atan2>
 8003192:	eeb0 7a40 	vmov.f32	s14, s0
 8003196:	eef0 7a60 	vmov.f32	s15, s1
 800319a:	4b79      	ldr	r3, [pc, #484]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 800319c:	ed83 7b04 	vstr	d7, [r3, #16]
		//		theta = Angle.Yaw; // radians]
		theta = Angle.Yaw;
 80031a0:	4b77      	ldr	r3, [pc, #476]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x1218>)
 80031a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fcdf 	bl	8000b6c <__aeabi_d2f>
 80031ae:	4603      	mov	r3, r0
 80031b0:	4a74      	ldr	r2, [pc, #464]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 80031b2:	6013      	str	r3, [r2, #0]
		Vx_enR = W1*cosf(theta) - W2*sinf(theta);
 80031b4:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	eeb0 0a67 	vmov.f32	s0, s15
 80031be:	f005 fe31 	bl	8008e24 <cosf>
 80031c2:	eeb0 7a40 	vmov.f32	s14, s0
 80031c6:	4b68      	ldr	r3, [pc, #416]	; (8003368 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ee27 8a27 	vmul.f32	s16, s14, s15
 80031d0:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	eeb0 0a67 	vmov.f32	s0, s15
 80031da:	f005 fe67 	bl	8008eac <sinf>
 80031de:	eeb0 7a40 	vmov.f32	s14, s0
 80031e2:	4b62      	ldr	r3, [pc, #392]	; (800336c <HAL_TIM_PeriodElapsedCallback+0x1204>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ec:	ee78 7a67 	vsub.f32	s15, s16, s15
 80031f0:	4b65      	ldr	r3, [pc, #404]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 80031f2:	edc3 7a00 	vstr	s15, [r3]
		Vy_enR = W1*sinf(theta) + W2*cosf(theta);
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003200:	f005 fe54 	bl	8008eac <sinf>
 8003204:	eeb0 7a40 	vmov.f32	s14, s0
 8003208:	4b57      	ldr	r3, [pc, #348]	; (8003368 <HAL_TIM_PeriodElapsedCallback+0x1200>)
 800320a:	edd3 7a00 	vldr	s15, [r3]
 800320e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003212:	4b5c      	ldr	r3, [pc, #368]	; (8003384 <HAL_TIM_PeriodElapsedCallback+0x121c>)
 8003214:	edd3 7a00 	vldr	s15, [r3]
 8003218:	eeb0 0a67 	vmov.f32	s0, s15
 800321c:	f005 fe02 	bl	8008e24 <cosf>
 8003220:	eeb0 7a40 	vmov.f32	s14, s0
 8003224:	4b51      	ldr	r3, [pc, #324]	; (800336c <HAL_TIM_PeriodElapsedCallback+0x1204>)
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003232:	4b56      	ldr	r3, [pc, #344]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 8003234:	edc3 7a00 	vstr	s15, [r3]
		X_enR = X_enR + Vx_enR*dt;
 8003238:	4b55      	ldr	r3, [pc, #340]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd f97b 	bl	8000538 <__aeabi_f2d>
 8003242:	4604      	mov	r4, r0
 8003244:	460d      	mov	r5, r1
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <HAL_TIM_PeriodElapsedCallback+0x1220>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f974 	bl	8000538 <__aeabi_f2d>
 8003250:	a337      	add	r3, pc, #220	; (adr r3, 8003330 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fd f9c7 	bl	80005e8 <__aeabi_dmul>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4620      	mov	r0, r4
 8003260:	4629      	mov	r1, r5
 8003262:	f7fd f80b 	bl	800027c <__adddf3>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4610      	mov	r0, r2
 800326c:	4619      	mov	r1, r3
 800326e:	f7fd fc7d 	bl	8000b6c <__aeabi_d2f>
 8003272:	4603      	mov	r3, r0
 8003274:	4a46      	ldr	r2, [pc, #280]	; (8003390 <HAL_TIM_PeriodElapsedCallback+0x1228>)
 8003276:	6013      	str	r3, [r2, #0]
		Y_enR = Y_enR + Vy_enR*dt;
 8003278:	4b46      	ldr	r3, [pc, #280]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f95b 	bl	8000538 <__aeabi_f2d>
 8003282:	4604      	mov	r4, r0
 8003284:	460d      	mov	r5, r1
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_TIM_PeriodElapsedCallback+0x1224>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd f954 	bl	8000538 <__aeabi_f2d>
 8003290:	a327      	add	r3, pc, #156	; (adr r3, 8003330 <HAL_TIM_PeriodElapsedCallback+0x11c8>)
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	f7fd f9a7 	bl	80005e8 <__aeabi_dmul>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fc ffeb 	bl	800027c <__adddf3>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	f7fd fc5d 	bl	8000b6c <__aeabi_d2f>
 80032b2:	4603      	mov	r3, r0
 80032b4:	4a37      	ldr	r2, [pc, #220]	; (8003394 <HAL_TIM_PeriodElapsedCallback+0x122c>)
 80032b6:	6013      	str	r3, [r2, #0]
		HAL_ADC_Start_DMA(&hadc1, &AD_RES, 2);
 80032b8:	2202      	movs	r2, #2
 80032ba:	4937      	ldr	r1, [pc, #220]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 80032bc:	4837      	ldr	r0, [pc, #220]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x1234>)
 80032be:	f000 fe15 	bl	8003eec <HAL_ADC_Start_DMA>
		laserx = ((AD_RES[1] *0.01416) + 0.1963)/10; //aready
 80032c2:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 80032c4:	885b      	ldrh	r3, [r3, #2]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd f924 	bl	8000514 <__aeabi_i2d>
 80032cc:	a31a      	add	r3, pc, #104	; (adr r3, 8003338 <HAL_TIM_PeriodElapsedCallback+0x11d0>)
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f7fd f989 	bl	80005e8 <__aeabi_dmul>
 80032d6:	4602      	mov	r2, r0
 80032d8:	460b      	mov	r3, r1
 80032da:	4610      	mov	r0, r2
 80032dc:	4619      	mov	r1, r3
 80032de:	a318      	add	r3, pc, #96	; (adr r3, 8003340 <HAL_TIM_PeriodElapsedCallback+0x11d8>)
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	f7fc ffca 	bl	800027c <__adddf3>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	4b2a      	ldr	r3, [pc, #168]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x1238>)
 80032f6:	f7fd faa1 	bl	800083c <__aeabi_ddiv>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4929      	ldr	r1, [pc, #164]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x123c>)
 8003300:	e9c1 2300 	strd	r2, r3, [r1]
		lasery = ((AD_RES[0] *0.01289) + 0.3364)/10;
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x1230>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f903 	bl	8000514 <__aeabi_i2d>
 800330e:	a30e      	add	r3, pc, #56	; (adr r3, 8003348 <HAL_TIM_PeriodElapsedCallback+0x11e0>)
 8003310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003314:	f7fd f968 	bl	80005e8 <__aeabi_dmul>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4610      	mov	r0, r2
 800331e:	4619      	mov	r1, r3
 8003320:	e042      	b.n	80033a8 <HAL_TIM_PeriodElapsedCallback+0x1240>
 8003322:	bf00      	nop
 8003324:	f3af 8000 	nop.w
 8003328:	eb851eb8 	.word	0xeb851eb8
 800332c:	3f9eb851 	.word	0x3f9eb851
 8003330:	47ae147b 	.word	0x47ae147b
 8003334:	3f847ae1 	.word	0x3f847ae1
 8003338:	074a771d 	.word	0x074a771d
 800333c:	3f8cffeb 	.word	0x3f8cffeb
 8003340:	c01a36e3 	.word	0xc01a36e3
 8003344:	3fc9205b 	.word	0x3fc9205b
 8003348:	839042d9 	.word	0x839042d9
 800334c:	3f8a6612 	.word	0x3f8a6612
 8003350:	40001800 	.word	0x40001800
 8003354:	44b40000 	.word	0x44b40000
 8003358:	200004f4 	.word	0x200004f4
 800335c:	20000368 	.word	0x20000368
 8003360:	20000584 	.word	0x20000584
 8003364:	20000388 	.word	0x20000388
 8003368:	200003f8 	.word	0x200003f8
 800336c:	200003fc 	.word	0x200003fc
 8003370:	200003c0 	.word	0x200003c0
 8003374:	20000410 	.word	0x20000410
 8003378:	3ff00000 	.word	0x3ff00000
 800337c:	20000418 	.word	0x20000418
 8003380:	200003a8 	.word	0x200003a8
 8003384:	20000408 	.word	0x20000408
 8003388:	20000400 	.word	0x20000400
 800338c:	20000404 	.word	0x20000404
 8003390:	2000000c 	.word	0x2000000c
 8003394:	200003f4 	.word	0x200003f4
 8003398:	20000470 	.word	0x20000470
 800339c:	20000164 	.word	0x20000164
 80033a0:	40240000 	.word	0x40240000
 80033a4:	20000478 	.word	0x20000478
 80033a8:	a312      	add	r3, pc, #72	; (adr r3, 80033f4 <HAL_TIM_PeriodElapsedCallback+0x128c>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fc ff65 	bl	800027c <__adddf3>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4610      	mov	r0, r2
 80033b8:	4619      	mov	r1, r3
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	4b0a      	ldr	r3, [pc, #40]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x1280>)
 80033c0:	f7fd fa3c 	bl	800083c <__aeabi_ddiv>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4908      	ldr	r1, [pc, #32]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x1284>)
 80033ca:	e9c1 2300 	strd	r2, r3, [r1]
		p++;
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	4a06      	ldr	r2, [pc, #24]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x1288>)
 80033d6:	6013      	str	r3, [r2, #0]

	}
}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	ecbd 8b02 	vpop	{d8}
 80033e2:	bdb0      	pop	{r4, r5, r7, pc}
 80033e4:	f3af 8000 	nop.w
 80033e8:	40240000 	.word	0x40240000
 80033ec:	20000480 	.word	0x20000480
 80033f0:	20000444 	.word	0x20000444
 80033f4:	dd97f62b 	.word	0xdd97f62b
 80033f8:	3fd58793 	.word	0x3fd58793

080033fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003400:	b672      	cpsid	i
}
 8003402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003404:	e7fe      	b.n	8003404 <Error_Handler+0x8>
	...

08003408 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800340c:	4b17      	ldr	r3, [pc, #92]	; (800346c <MX_SPI1_Init+0x64>)
 800340e:	4a18      	ldr	r2, [pc, #96]	; (8003470 <MX_SPI1_Init+0x68>)
 8003410:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003412:	4b16      	ldr	r3, [pc, #88]	; (800346c <MX_SPI1_Init+0x64>)
 8003414:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003418:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800341a:	4b14      	ldr	r3, [pc, #80]	; (800346c <MX_SPI1_Init+0x64>)
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003420:	4b12      	ldr	r3, [pc, #72]	; (800346c <MX_SPI1_Init+0x64>)
 8003422:	2200      	movs	r2, #0
 8003424:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003426:	4b11      	ldr	r3, [pc, #68]	; (800346c <MX_SPI1_Init+0x64>)
 8003428:	2200      	movs	r2, #0
 800342a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <MX_SPI1_Init+0x64>)
 800342e:	2200      	movs	r2, #0
 8003430:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <MX_SPI1_Init+0x64>)
 8003434:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003438:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <MX_SPI1_Init+0x64>)
 800343c:	2200      	movs	r2, #0
 800343e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003440:	4b0a      	ldr	r3, [pc, #40]	; (800346c <MX_SPI1_Init+0x64>)
 8003442:	2200      	movs	r2, #0
 8003444:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003446:	4b09      	ldr	r3, [pc, #36]	; (800346c <MX_SPI1_Init+0x64>)
 8003448:	2200      	movs	r2, #0
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <MX_SPI1_Init+0x64>)
 800344e:	2200      	movs	r2, #0
 8003450:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <MX_SPI1_Init+0x64>)
 8003454:	220a      	movs	r2, #10
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003458:	4804      	ldr	r0, [pc, #16]	; (800346c <MX_SPI1_Init+0x64>)
 800345a:	f003 fe49 	bl	80070f0 <HAL_SPI_Init>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003464:	f7ff ffca 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003468:	bf00      	nop
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000498 	.word	0x20000498
 8003470:	40013000 	.word	0x40013000

08003474 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08a      	sub	sp, #40	; 0x28
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 0314 	add.w	r3, r7, #20
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <HAL_SPI_MspInit+0x84>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d12b      	bne.n	80034ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	4b18      	ldr	r3, [pc, #96]	; (80034fc <HAL_SPI_MspInit+0x88>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	4a17      	ldr	r2, [pc, #92]	; (80034fc <HAL_SPI_MspInit+0x88>)
 80034a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034a4:	6453      	str	r3, [r2, #68]	; 0x44
 80034a6:	4b15      	ldr	r3, [pc, #84]	; (80034fc <HAL_SPI_MspInit+0x88>)
 80034a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ae:	613b      	str	r3, [r7, #16]
 80034b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <HAL_SPI_MspInit+0x88>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	4a10      	ldr	r2, [pc, #64]	; (80034fc <HAL_SPI_MspInit+0x88>)
 80034bc:	f043 0301 	orr.w	r3, r3, #1
 80034c0:	6313      	str	r3, [r2, #48]	; 0x30
 80034c2:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_SPI_MspInit+0x88>)
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	f003 0301 	and.w	r3, r3, #1
 80034ca:	60fb      	str	r3, [r7, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034ce:	23e0      	movs	r3, #224	; 0xe0
 80034d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034da:	2303      	movs	r3, #3
 80034dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034de:	2305      	movs	r3, #5
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	4805      	ldr	r0, [pc, #20]	; (8003500 <HAL_SPI_MspInit+0x8c>)
 80034ea:	f002 f871 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80034ee:	bf00      	nop
 80034f0:	3728      	adds	r7, #40	; 0x28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40013000 	.word	0x40013000
 80034fc:	40023800 	.word	0x40023800
 8003500:	40020000 	.word	0x40020000

08003504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
 800350e:	4b10      	ldr	r3, [pc, #64]	; (8003550 <HAL_MspInit+0x4c>)
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <HAL_MspInit+0x4c>)
 8003514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003518:	6453      	str	r3, [r2, #68]	; 0x44
 800351a:	4b0d      	ldr	r3, [pc, #52]	; (8003550 <HAL_MspInit+0x4c>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003522:	607b      	str	r3, [r7, #4]
 8003524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	2300      	movs	r3, #0
 8003528:	603b      	str	r3, [r7, #0]
 800352a:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_MspInit+0x4c>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	4a08      	ldr	r2, [pc, #32]	; (8003550 <HAL_MspInit+0x4c>)
 8003530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003534:	6413      	str	r3, [r2, #64]	; 0x40
 8003536:	4b06      	ldr	r3, [pc, #24]	; (8003550 <HAL_MspInit+0x4c>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800

08003554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003558:	e7fe      	b.n	8003558 <NMI_Handler+0x4>

0800355a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800355a:	b480      	push	{r7}
 800355c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355e:	e7fe      	b.n	800355e <HardFault_Handler+0x4>

08003560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003564:	e7fe      	b.n	8003564 <MemManage_Handler+0x4>

08003566 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356a:	e7fe      	b.n	800356a <BusFault_Handler+0x4>

0800356c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003570:	e7fe      	b.n	8003570 <UsageFault_Handler+0x4>

08003572 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035a0:	f000 fc1c 	bl	8003ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035a4:	bf00      	nop
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80035ac:	4802      	ldr	r0, [pc, #8]	; (80035b8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80035ae:	f004 f81b 	bl	80075e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000614 	.word	0x20000614

080035bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <TIM3_IRQHandler+0x10>)
 80035c2:	f004 f811 	bl	80075e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000053c 	.word	0x2000053c

080035d0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80035d6:	f004 f807 	bl	80075e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2000065c 	.word	0x2000065c

080035e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <TIM5_IRQHandler+0x10>)
 80035ea:	f003 fffd 	bl	80075e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200005cc 	.word	0x200005cc

080035f8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <DMA2_Stream0_IRQHandler+0x10>)
 80035fe:	f001 fd7d 	bl	80050fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200001ac 	.word	0x200001ac

0800360c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
 800361c:	e00a      	b.n	8003634 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800361e:	f3af 8000 	nop.w
 8003622:	4601      	mov	r1, r0
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	1c5a      	adds	r2, r3, #1
 8003628:	60ba      	str	r2, [r7, #8]
 800362a:	b2ca      	uxtb	r2, r1
 800362c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	3301      	adds	r3, #1
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbf0      	blt.n	800361e <_read+0x12>
  }

  return len;
 800363c:	687b      	ldr	r3, [r7, #4]
}
 800363e:	4618      	mov	r0, r3
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e009      	b.n	800366c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	60ba      	str	r2, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	3301      	adds	r3, #1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	dbf1      	blt.n	8003658 <_write+0x12>
  }
  return len;
 8003674:	687b      	ldr	r3, [r7, #4]
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_close>:

int _close(int file)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036a6:	605a      	str	r2, [r3, #4]
  return 0;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_isatty>:

int _isatty(int file)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036be:	2301      	movs	r3, #1
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <_sbrk+0x5c>)
 80036f2:	4b15      	ldr	r3, [pc, #84]	; (8003748 <_sbrk+0x60>)
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <_sbrk+0x64>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d102      	bne.n	800370a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <_sbrk+0x64>)
 8003706:	4a12      	ldr	r2, [pc, #72]	; (8003750 <_sbrk+0x68>)
 8003708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800370a:	4b10      	ldr	r3, [pc, #64]	; (800374c <_sbrk+0x64>)
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4413      	add	r3, r2
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	429a      	cmp	r2, r3
 8003716:	d207      	bcs.n	8003728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003718:	f004 fb4e 	bl	8007db8 <__errno>
 800371c:	4603      	mov	r3, r0
 800371e:	220c      	movs	r2, #12
 8003720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003726:	e009      	b.n	800373c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <_sbrk+0x64>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800372e:	4b07      	ldr	r3, [pc, #28]	; (800374c <_sbrk+0x64>)
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4413      	add	r3, r2
 8003736:	4a05      	ldr	r2, [pc, #20]	; (800374c <_sbrk+0x64>)
 8003738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800373a:	68fb      	ldr	r3, [r7, #12]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20020000 	.word	0x20020000
 8003748:	00000400 	.word	0x00000400
 800374c:	200004f0 	.word	0x200004f0
 8003750:	200006b8 	.word	0x200006b8

08003754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <SystemInit+0x20>)
 800375a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <SystemInit+0x20>)
 8003760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800377e:	f107 030c 	add.w	r3, r7, #12
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f004 fb40 	bl	8007e0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003794:	4b21      	ldr	r3, [pc, #132]	; (800381c <MX_TIM2_Init+0xa4>)
 8003796:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800379a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800379c:	4b1f      	ldr	r3, [pc, #124]	; (800381c <MX_TIM2_Init+0xa4>)
 800379e:	2200      	movs	r2, #0
 80037a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037a2:	4b1e      	ldr	r3, [pc, #120]	; (800381c <MX_TIM2_Init+0xa4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80037a8:	4b1c      	ldr	r3, [pc, #112]	; (800381c <MX_TIM2_Init+0xa4>)
 80037aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <MX_TIM2_Init+0xa4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037b6:	4b19      	ldr	r3, [pc, #100]	; (800381c <MX_TIM2_Init+0xa4>)
 80037b8:	2280      	movs	r2, #128	; 0x80
 80037ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80037bc:	2303      	movs	r3, #3
 80037be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80037c0:	2300      	movs	r3, #0
 80037c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037c4:	2301      	movs	r3, #1
 80037c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037d0:	2300      	movs	r3, #0
 80037d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037d4:	2301      	movs	r3, #1
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037d8:	2300      	movs	r3, #0
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	4619      	mov	r1, r3
 80037e6:	480d      	ldr	r0, [pc, #52]	; (800381c <MX_TIM2_Init+0xa4>)
 80037e8:	f003 fdca 	bl	8007380 <HAL_TIM_Encoder_Init>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80037f2:	f7ff fe03 	bl	80033fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037fe:	1d3b      	adds	r3, r7, #4
 8003800:	4619      	mov	r1, r3
 8003802:	4806      	ldr	r0, [pc, #24]	; (800381c <MX_TIM2_Init+0xa4>)
 8003804:	f004 fa48 	bl	8007c98 <HAL_TIMEx_MasterConfigSynchronization>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800380e:	f7ff fdf5 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003812:	bf00      	nop
 8003814:	3730      	adds	r7, #48	; 0x30
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	200004f4 	.word	0x200004f4

08003820 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003826:	f107 0308 	add.w	r3, r7, #8
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	605a      	str	r2, [r3, #4]
 8003830:	609a      	str	r2, [r3, #8]
 8003832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003834:	463b      	mov	r3, r7
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800383c:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <MX_TIM3_Init+0x94>)
 800383e:	4a1e      	ldr	r2, [pc, #120]	; (80038b8 <MX_TIM3_Init+0x98>)
 8003840:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <MX_TIM3_Init+0x94>)
 8003844:	2253      	movs	r2, #83	; 0x53
 8003846:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003848:	4b1a      	ldr	r3, [pc, #104]	; (80038b4 <MX_TIM3_Init+0x94>)
 800384a:	2200      	movs	r2, #0
 800384c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800384e:	4b19      	ldr	r3, [pc, #100]	; (80038b4 <MX_TIM3_Init+0x94>)
 8003850:	f242 720f 	movw	r2, #9999	; 0x270f
 8003854:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003856:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <MX_TIM3_Init+0x94>)
 8003858:	2200      	movs	r2, #0
 800385a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800385c:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <MX_TIM3_Init+0x94>)
 800385e:	2280      	movs	r2, #128	; 0x80
 8003860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003862:	4814      	ldr	r0, [pc, #80]	; (80038b4 <MX_TIM3_Init+0x94>)
 8003864:	f003 fccd 	bl	8007202 <HAL_TIM_Base_Init>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800386e:	f7ff fdc5 	bl	80033fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003872:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003876:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003878:	f107 0308 	add.w	r3, r7, #8
 800387c:	4619      	mov	r1, r3
 800387e:	480d      	ldr	r0, [pc, #52]	; (80038b4 <MX_TIM3_Init+0x94>)
 8003880:	f003 ffba 	bl	80077f8 <HAL_TIM_ConfigClockSource>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800388a:	f7ff fdb7 	bl	80033fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003896:	463b      	mov	r3, r7
 8003898:	4619      	mov	r1, r3
 800389a:	4806      	ldr	r0, [pc, #24]	; (80038b4 <MX_TIM3_Init+0x94>)
 800389c:	f004 f9fc 	bl	8007c98 <HAL_TIMEx_MasterConfigSynchronization>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80038a6:	f7ff fda9 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038aa:	bf00      	nop
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000053c 	.word	0x2000053c
 80038b8:	40000400 	.word	0x40000400

080038bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08c      	sub	sp, #48	; 0x30
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80038c2:	f107 030c 	add.w	r3, r7, #12
 80038c6:	2224      	movs	r2, #36	; 0x24
 80038c8:	2100      	movs	r1, #0
 80038ca:	4618      	mov	r0, r3
 80038cc:	f004 fa9e 	bl	8007e0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d0:	1d3b      	adds	r3, r7, #4
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80038d8:	4b20      	ldr	r3, [pc, #128]	; (800395c <MX_TIM4_Init+0xa0>)
 80038da:	4a21      	ldr	r2, [pc, #132]	; (8003960 <MX_TIM4_Init+0xa4>)
 80038dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80038de:	4b1f      	ldr	r3, [pc, #124]	; (800395c <MX_TIM4_Init+0xa0>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038e4:	4b1d      	ldr	r3, [pc, #116]	; (800395c <MX_TIM4_Init+0xa0>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <MX_TIM4_Init+0xa0>)
 80038ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038f2:	4b1a      	ldr	r3, [pc, #104]	; (800395c <MX_TIM4_Init+0xa0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038f8:	4b18      	ldr	r3, [pc, #96]	; (800395c <MX_TIM4_Init+0xa0>)
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038fe:	2303      	movs	r3, #3
 8003900:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003902:	2300      	movs	r3, #0
 8003904:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003912:	2300      	movs	r3, #0
 8003914:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003916:	2301      	movs	r3, #1
 8003918:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800391a:	2300      	movs	r3, #0
 800391c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003922:	f107 030c 	add.w	r3, r7, #12
 8003926:	4619      	mov	r1, r3
 8003928:	480c      	ldr	r0, [pc, #48]	; (800395c <MX_TIM4_Init+0xa0>)
 800392a:	f003 fd29 	bl	8007380 <HAL_TIM_Encoder_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8003934:	f7ff fd62 	bl	80033fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003940:	1d3b      	adds	r3, r7, #4
 8003942:	4619      	mov	r1, r3
 8003944:	4805      	ldr	r0, [pc, #20]	; (800395c <MX_TIM4_Init+0xa0>)
 8003946:	f004 f9a7 	bl	8007c98 <HAL_TIMEx_MasterConfigSynchronization>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003950:	f7ff fd54 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003954:	bf00      	nop
 8003956:	3730      	adds	r7, #48	; 0x30
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000584 	.word	0x20000584
 8003960:	40000800 	.word	0x40000800

08003964 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800396a:	f107 0308 	add.w	r3, r7, #8
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003978:	463b      	mov	r3, r7
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003980:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <MX_TIM5_Init+0x94>)
 8003982:	4a1e      	ldr	r2, [pc, #120]	; (80039fc <MX_TIM5_Init+0x98>)
 8003984:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 183;
 8003986:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <MX_TIM5_Init+0x94>)
 8003988:	22b7      	movs	r2, #183	; 0xb7
 800398a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800398c:	4b1a      	ldr	r3, [pc, #104]	; (80039f8 <MX_TIM5_Init+0x94>)
 800398e:	2200      	movs	r2, #0
 8003990:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8003992:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <MX_TIM5_Init+0x94>)
 8003994:	f242 720f 	movw	r2, #9999	; 0x270f
 8003998:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800399a:	4b17      	ldr	r3, [pc, #92]	; (80039f8 <MX_TIM5_Init+0x94>)
 800399c:	2200      	movs	r2, #0
 800399e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039a0:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <MX_TIM5_Init+0x94>)
 80039a2:	2280      	movs	r2, #128	; 0x80
 80039a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80039a6:	4814      	ldr	r0, [pc, #80]	; (80039f8 <MX_TIM5_Init+0x94>)
 80039a8:	f003 fc2b 	bl	8007202 <HAL_TIM_Base_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80039b2:	f7ff fd23 	bl	80033fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80039bc:	f107 0308 	add.w	r3, r7, #8
 80039c0:	4619      	mov	r1, r3
 80039c2:	480d      	ldr	r0, [pc, #52]	; (80039f8 <MX_TIM5_Init+0x94>)
 80039c4:	f003 ff18 	bl	80077f8 <HAL_TIM_ConfigClockSource>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80039ce:	f7ff fd15 	bl	80033fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80039da:	463b      	mov	r3, r7
 80039dc:	4619      	mov	r1, r3
 80039de:	4806      	ldr	r0, [pc, #24]	; (80039f8 <MX_TIM5_Init+0x94>)
 80039e0:	f004 f95a 	bl	8007c98 <HAL_TIMEx_MasterConfigSynchronization>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80039ea:	f7ff fd07 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	200005cc 	.word	0x200005cc
 80039fc:	40000c00 	.word	0x40000c00

08003a00 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a06:	463b      	mov	r3, r7
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003a12:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <MX_TIM9_Init+0x6c>)
 8003a14:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <MX_TIM9_Init+0x70>)
 8003a16:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <MX_TIM9_Init+0x6c>)
 8003a1a:	22a7      	movs	r2, #167	; 0xa7
 8003a1c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a1e:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <MX_TIM9_Init+0x6c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9999;
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <MX_TIM9_Init+0x6c>)
 8003a26:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a2a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <MX_TIM9_Init+0x6c>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a32:	4b0e      	ldr	r3, [pc, #56]	; (8003a6c <MX_TIM9_Init+0x6c>)
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003a38:	480c      	ldr	r0, [pc, #48]	; (8003a6c <MX_TIM9_Init+0x6c>)
 8003a3a:	f003 fbe2 	bl	8007202 <HAL_TIM_Base_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003a44:	f7ff fcda 	bl	80033fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a4c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003a4e:	463b      	mov	r3, r7
 8003a50:	4619      	mov	r1, r3
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <MX_TIM9_Init+0x6c>)
 8003a54:	f003 fed0 	bl	80077f8 <HAL_TIM_ConfigClockSource>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003a5e:	f7ff fccd 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000614 	.word	0x20000614
 8003a70:	40014000 	.word	0x40014000

08003a74 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a7a:	463b      	mov	r3, r7
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <MX_TIM12_Init+0x6c>)
 8003a88:	4a16      	ldr	r2, [pc, #88]	; (8003ae4 <MX_TIM12_Init+0x70>)
 8003a8a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <MX_TIM12_Init+0x6c>)
 8003a8e:	2253      	movs	r2, #83	; 0x53
 8003a90:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a92:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <MX_TIM12_Init+0x6c>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9999;
 8003a98:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <MX_TIM12_Init+0x6c>)
 8003a9a:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a9e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <MX_TIM12_Init+0x6c>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	; (8003ae0 <MX_TIM12_Init+0x6c>)
 8003aa8:	2280      	movs	r2, #128	; 0x80
 8003aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003aac:	480c      	ldr	r0, [pc, #48]	; (8003ae0 <MX_TIM12_Init+0x6c>)
 8003aae:	f003 fba8 	bl	8007202 <HAL_TIM_Base_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8003ab8:	f7ff fca0 	bl	80033fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003ac2:	463b      	mov	r3, r7
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4806      	ldr	r0, [pc, #24]	; (8003ae0 <MX_TIM12_Init+0x6c>)
 8003ac8:	f003 fe96 	bl	80077f8 <HAL_TIM_ConfigClockSource>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8003ad2:	f7ff fc93 	bl	80033fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	2000065c 	.word	0x2000065c
 8003ae4:	40001800 	.word	0x40001800

08003ae8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08c      	sub	sp, #48	; 0x30
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 031c 	add.w	r3, r7, #28
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b08:	d12c      	bne.n	8003b64 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	4b30      	ldr	r3, [pc, #192]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	4a2f      	ldr	r2, [pc, #188]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6413      	str	r3, [r2, #64]	; 0x40
 8003b1a:	4b2d      	ldr	r3, [pc, #180]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	617b      	str	r3, [r7, #20]
 8003b2a:	4b29      	ldr	r3, [pc, #164]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	4a28      	ldr	r2, [pc, #160]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b30:	f043 0301 	orr.w	r3, r3, #1
 8003b34:	6313      	str	r3, [r2, #48]	; 0x30
 8003b36:	4b26      	ldr	r3, [pc, #152]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b42:	2303      	movs	r3, #3
 8003b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b46:	2302      	movs	r3, #2
 8003b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b52:	2301      	movs	r3, #1
 8003b54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b56:	f107 031c 	add.w	r3, r7, #28
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	481d      	ldr	r0, [pc, #116]	; (8003bd4 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b5e:	f001 fd37 	bl	80055d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003b62:	e031      	b.n	8003bc8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM4)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1b      	ldr	r2, [pc, #108]	; (8003bd8 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12c      	bne.n	8003bc8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	4b17      	ldr	r3, [pc, #92]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b78:	f043 0304 	orr.w	r3, r3, #4
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b14      	ldr	r3, [pc, #80]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b94:	f043 0308 	orr.w	r3, r3, #8
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b0d      	ldr	r3, [pc, #52]	; (8003bd0 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8003ba6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bac:	2302      	movs	r3, #2
 8003bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bb8:	2302      	movs	r3, #2
 8003bba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bbc:	f107 031c 	add.w	r3, r7, #28
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4806      	ldr	r0, [pc, #24]	; (8003bdc <HAL_TIM_Encoder_MspInit+0xf4>)
 8003bc4:	f001 fd04 	bl	80055d0 <HAL_GPIO_Init>
}
 8003bc8:	bf00      	nop
 8003bca:	3730      	adds	r7, #48	; 0x30
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40020000 	.word	0x40020000
 8003bd8:	40000800 	.word	0x40000800
 8003bdc:	40020c00 	.word	0x40020c00

08003be0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a38      	ldr	r2, [pc, #224]	; (8003cd0 <HAL_TIM_Base_MspInit+0xf0>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d116      	bne.n	8003c20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	4b37      	ldr	r3, [pc, #220]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	4a36      	ldr	r2, [pc, #216]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	6413      	str	r3, [r2, #64]	; 0x40
 8003c02:	4b34      	ldr	r3, [pc, #208]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	201d      	movs	r0, #29
 8003c14:	f001 f935 	bl	8004e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c18:	201d      	movs	r0, #29
 8003c1a:	f001 f94e 	bl	8004eba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003c1e:	e052      	b.n	8003cc6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM5)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a2c      	ldr	r2, [pc, #176]	; (8003cd8 <HAL_TIM_Base_MspInit+0xf8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d116      	bne.n	8003c58 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	4b29      	ldr	r3, [pc, #164]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c32:	4a28      	ldr	r2, [pc, #160]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003c34:	f043 0308 	orr.w	r3, r3, #8
 8003c38:	6413      	str	r3, [r2, #64]	; 0x40
 8003c3a:	4b26      	ldr	r3, [pc, #152]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003c46:	2200      	movs	r2, #0
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2032      	movs	r0, #50	; 0x32
 8003c4c:	f001 f919 	bl	8004e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003c50:	2032      	movs	r0, #50	; 0x32
 8003c52:	f001 f932 	bl	8004eba <HAL_NVIC_EnableIRQ>
}
 8003c56:	e036      	b.n	8003cc6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM9)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	; (8003cdc <HAL_TIM_Base_MspInit+0xfc>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d116      	bne.n	8003c90 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c70:	6453      	str	r3, [r2, #68]	; 0x44
 8003c72:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2100      	movs	r1, #0
 8003c82:	2018      	movs	r0, #24
 8003c84:	f001 f8fd 	bl	8004e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003c88:	2018      	movs	r0, #24
 8003c8a:	f001 f916 	bl	8004eba <HAL_NVIC_EnableIRQ>
}
 8003c8e:	e01a      	b.n	8003cc6 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM12)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a12      	ldr	r2, [pc, #72]	; (8003ce0 <HAL_TIM_Base_MspInit+0x100>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d115      	bne.n	8003cc6 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_TIM_Base_MspInit+0xf4>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	2100      	movs	r1, #0
 8003cba:	202b      	movs	r0, #43	; 0x2b
 8003cbc:	f001 f8e1 	bl	8004e82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003cc0:	202b      	movs	r0, #43	; 0x2b
 8003cc2:	f001 f8fa 	bl	8004eba <HAL_NVIC_EnableIRQ>
}
 8003cc6:	bf00      	nop
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40000c00 	.word	0x40000c00
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40001800 	.word	0x40001800

08003ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ce8:	480d      	ldr	r0, [pc, #52]	; (8003d20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cea:	490e      	ldr	r1, [pc, #56]	; (8003d24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cec:	4a0e      	ldr	r2, [pc, #56]	; (8003d28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cf0:	e002      	b.n	8003cf8 <LoopCopyDataInit>

08003cf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf6:	3304      	adds	r3, #4

08003cf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cfc:	d3f9      	bcc.n	8003cf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfe:	4a0b      	ldr	r2, [pc, #44]	; (8003d2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d00:	4c0b      	ldr	r4, [pc, #44]	; (8003d30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d04:	e001      	b.n	8003d0a <LoopFillZerobss>

08003d06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d08:	3204      	adds	r2, #4

08003d0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d0c:	d3fb      	bcc.n	8003d06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d0e:	f7ff fd21 	bl	8003754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d12:	f004 f857 	bl	8007dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d16:	f7fe f931 	bl	8001f7c <main>
  bx  lr    
 8003d1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003d20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d24:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8003d28:	0800a5b0 	.word	0x0800a5b0
  ldr r2, =_sbss
 8003d2c:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 8003d30:	200006b8 	.word	0x200006b8

08003d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d34:	e7fe      	b.n	8003d34 <ADC_IRQHandler>
	...

08003d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_Init+0x40>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <HAL_Init+0x40>)
 8003d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_Init+0x40>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <HAL_Init+0x40>)
 8003d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_Init+0x40>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <HAL_Init+0x40>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d60:	2003      	movs	r0, #3
 8003d62:	f001 f883 	bl	8004e6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d66:	200f      	movs	r0, #15
 8003d68:	f000 f808 	bl	8003d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d6c:	f7ff fbca 	bl	8003504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023c00 	.word	0x40023c00

08003d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d84:	4b12      	ldr	r3, [pc, #72]	; (8003dd0 <HAL_InitTick+0x54>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b12      	ldr	r3, [pc, #72]	; (8003dd4 <HAL_InitTick+0x58>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 f89b 	bl	8004ed6 <HAL_SYSTICK_Config>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e00e      	b.n	8003dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b0f      	cmp	r3, #15
 8003dae:	d80a      	bhi.n	8003dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003db0:	2200      	movs	r2, #0
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003db8:	f001 f863 	bl	8004e82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <HAL_InitTick+0x5c>)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e000      	b.n	8003dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	200000d8 	.word	0x200000d8
 8003dd4:	200000e0 	.word	0x200000e0
 8003dd8:	200000dc 	.word	0x200000dc

08003ddc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <HAL_IncTick+0x20>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_IncTick+0x24>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4413      	add	r3, r2
 8003dec:	4a04      	ldr	r2, [pc, #16]	; (8003e00 <HAL_IncTick+0x24>)
 8003dee:	6013      	str	r3, [r2, #0]
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	200000e0 	.word	0x200000e0
 8003e00:	200006a4 	.word	0x200006a4

08003e04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  return uwTick;
 8003e08:	4b03      	ldr	r3, [pc, #12]	; (8003e18 <HAL_GetTick+0x14>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	200006a4 	.word	0x200006a4

08003e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e24:	f7ff ffee 	bl	8003e04 <HAL_GetTick>
 8003e28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e34:	d005      	beq.n	8003e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e36:	4b0a      	ldr	r3, [pc, #40]	; (8003e60 <HAL_Delay+0x44>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e42:	bf00      	nop
 8003e44:	f7ff ffde 	bl	8003e04 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d8f7      	bhi.n	8003e44 <HAL_Delay+0x28>
  {
  }
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200000e0 	.word	0x200000e0

08003e64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e033      	b.n	8003ee2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d109      	bne.n	8003e96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fd fa4a 	bl	800131c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d118      	bne.n	8003ed4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003eaa:	f023 0302 	bic.w	r3, r3, #2
 8003eae:	f043 0202 	orr.w	r2, r3, #2
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fa68 	bl	800438c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	f023 0303 	bic.w	r3, r3, #3
 8003eca:	f043 0201 	orr.w	r2, r3, #1
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed2:	e001      	b.n	8003ed8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
	...

08003eec <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <HAL_ADC_Start_DMA+0x1e>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e0e9      	b.n	80040de <HAL_ADC_Start_DMA+0x1f2>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d018      	beq.n	8003f52 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0201 	orr.w	r2, r2, #1
 8003f2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f30:	4b6d      	ldr	r3, [pc, #436]	; (80040e8 <HAL_ADC_Start_DMA+0x1fc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a6d      	ldr	r2, [pc, #436]	; (80040ec <HAL_ADC_Start_DMA+0x200>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0c9a      	lsrs	r2, r3, #18
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	4413      	add	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f44:	e002      	b.n	8003f4c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f9      	bne.n	8003f46 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f60:	d107      	bne.n	8003f72 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f70:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	f040 80a1 	bne.w	80040c4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003fac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d106      	bne.n	8003fd0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f023 0206 	bic.w	r2, r3, #6
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
 8003fce:	e002      	b.n	8003fd6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fde:	4b44      	ldr	r3, [pc, #272]	; (80040f0 <HAL_ADC_Start_DMA+0x204>)
 8003fe0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	4a43      	ldr	r2, [pc, #268]	; (80040f4 <HAL_ADC_Start_DMA+0x208>)
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fee:	4a42      	ldr	r2, [pc, #264]	; (80040f8 <HAL_ADC_Start_DMA+0x20c>)
 8003ff0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff6:	4a41      	ldr	r2, [pc, #260]	; (80040fc <HAL_ADC_Start_DMA+0x210>)
 8003ff8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004002:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004012:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004022:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	334c      	adds	r3, #76	; 0x4c
 800402e:	4619      	mov	r1, r3
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f001 f80a 	bl	800504c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 031f 	and.w	r3, r3, #31
 8004040:	2b00      	cmp	r3, #0
 8004042:	d12a      	bne.n	800409a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2d      	ldr	r2, [pc, #180]	; (8004100 <HAL_ADC_Start_DMA+0x214>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d015      	beq.n	800407a <HAL_ADC_Start_DMA+0x18e>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a2c      	ldr	r2, [pc, #176]	; (8004104 <HAL_ADC_Start_DMA+0x218>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d105      	bne.n	8004064 <HAL_ADC_Start_DMA+0x178>
 8004058:	4b25      	ldr	r3, [pc, #148]	; (80040f0 <HAL_ADC_Start_DMA+0x204>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f003 031f 	and.w	r3, r3, #31
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a27      	ldr	r2, [pc, #156]	; (8004108 <HAL_ADC_Start_DMA+0x21c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d136      	bne.n	80040dc <HAL_ADC_Start_DMA+0x1f0>
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_ADC_Start_DMA+0x204>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	2b00      	cmp	r3, #0
 8004078:	d130      	bne.n	80040dc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d129      	bne.n	80040dc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689a      	ldr	r2, [r3, #8]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	e020      	b.n	80040dc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a18      	ldr	r2, [pc, #96]	; (8004100 <HAL_ADC_Start_DMA+0x214>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d11b      	bne.n	80040dc <HAL_ADC_Start_DMA+0x1f0>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d114      	bne.n	80040dc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	e00b      	b.n	80040dc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	f043 0210 	orr.w	r2, r3, #16
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d4:	f043 0201 	orr.w	r2, r3, #1
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200000d8 	.word	0x200000d8
 80040ec:	431bde83 	.word	0x431bde83
 80040f0:	40012300 	.word	0x40012300
 80040f4:	08004585 	.word	0x08004585
 80040f8:	0800463f 	.word	0x0800463f
 80040fc:	0800465b 	.word	0x0800465b
 8004100:	40012000 	.word	0x40012000
 8004104:	40012100 	.word	0x40012100
 8004108:	40012200 	.word	0x40012200

0800410c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_ADC_ConfigChannel+0x1c>
 8004160:	2302      	movs	r3, #2
 8004162:	e105      	b.n	8004370 <HAL_ADC_ConfigChannel+0x228>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b09      	cmp	r3, #9
 8004172:	d925      	bls.n	80041c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68d9      	ldr	r1, [r3, #12]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	461a      	mov	r2, r3
 8004182:	4613      	mov	r3, r2
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4413      	add	r3, r2
 8004188:	3b1e      	subs	r3, #30
 800418a:	2207      	movs	r2, #7
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	43da      	mvns	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	400a      	ands	r2, r1
 8004198:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68d9      	ldr	r1, [r3, #12]
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4618      	mov	r0, r3
 80041ac:	4603      	mov	r3, r0
 80041ae:	005b      	lsls	r3, r3, #1
 80041b0:	4403      	add	r3, r0
 80041b2:	3b1e      	subs	r3, #30
 80041b4:	409a      	lsls	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	e022      	b.n	8004206 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6919      	ldr	r1, [r3, #16]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	4613      	mov	r3, r2
 80041d0:	005b      	lsls	r3, r3, #1
 80041d2:	4413      	add	r3, r2
 80041d4:	2207      	movs	r2, #7
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	43da      	mvns	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	400a      	ands	r2, r1
 80041e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6919      	ldr	r1, [r3, #16]
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	4618      	mov	r0, r3
 80041f6:	4603      	mov	r3, r0
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4403      	add	r3, r0
 80041fc:	409a      	lsls	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b06      	cmp	r3, #6
 800420c:	d824      	bhi.n	8004258 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	3b05      	subs	r3, #5
 8004220:	221f      	movs	r2, #31
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43da      	mvns	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	400a      	ands	r2, r1
 800422e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	b29b      	uxth	r3, r3
 800423c:	4618      	mov	r0, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685a      	ldr	r2, [r3, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	3b05      	subs	r3, #5
 800424a:	fa00 f203 	lsl.w	r2, r0, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	635a      	str	r2, [r3, #52]	; 0x34
 8004256:	e04c      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b0c      	cmp	r3, #12
 800425e:	d824      	bhi.n	80042aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	3b23      	subs	r3, #35	; 0x23
 8004272:	221f      	movs	r2, #31
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	43da      	mvns	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	400a      	ands	r2, r1
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	b29b      	uxth	r3, r3
 800428e:	4618      	mov	r0, r3
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685a      	ldr	r2, [r3, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	4413      	add	r3, r2
 800429a:	3b23      	subs	r3, #35	; 0x23
 800429c:	fa00 f203 	lsl.w	r2, r0, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
 80042a8:	e023      	b.n	80042f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	3b41      	subs	r3, #65	; 0x41
 80042bc:	221f      	movs	r2, #31
 80042be:	fa02 f303 	lsl.w	r3, r2, r3
 80042c2:	43da      	mvns	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	400a      	ands	r2, r1
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	4618      	mov	r0, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4613      	mov	r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	3b41      	subs	r3, #65	; 0x41
 80042e6:	fa00 f203 	lsl.w	r2, r0, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042f2:	4b22      	ldr	r3, [pc, #136]	; (800437c <HAL_ADC_ConfigChannel+0x234>)
 80042f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a21      	ldr	r2, [pc, #132]	; (8004380 <HAL_ADC_ConfigChannel+0x238>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d109      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x1cc>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b12      	cmp	r3, #18
 8004306:	d105      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a19      	ldr	r2, [pc, #100]	; (8004380 <HAL_ADC_ConfigChannel+0x238>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d123      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x21e>
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b10      	cmp	r3, #16
 8004324:	d003      	beq.n	800432e <HAL_ADC_ConfigChannel+0x1e6>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b11      	cmp	r3, #17
 800432c:	d11b      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b10      	cmp	r3, #16
 8004340:	d111      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <HAL_ADC_ConfigChannel+0x23c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a10      	ldr	r2, [pc, #64]	; (8004388 <HAL_ADC_ConfigChannel+0x240>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	0c9a      	lsrs	r2, r3, #18
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004358:	e002      	b.n	8004360 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	3b01      	subs	r3, #1
 800435e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1f9      	bne.n	800435a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3714      	adds	r7, #20
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	40012300 	.word	0x40012300
 8004380:	40012000 	.word	0x40012000
 8004384:	200000d8 	.word	0x200000d8
 8004388:	431bde83 	.word	0x431bde83

0800438c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004394:	4b79      	ldr	r3, [pc, #484]	; (800457c <ADC_Init+0x1f0>)
 8004396:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685a      	ldr	r2, [r3, #4]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6859      	ldr	r1, [r3, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	021a      	lsls	r2, r3, #8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80043e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6859      	ldr	r1, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6899      	ldr	r1, [r3, #8]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	4a58      	ldr	r2, [pc, #352]	; (8004580 <ADC_Init+0x1f4>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d022      	beq.n	800446a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004432:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6899      	ldr	r1, [r3, #8]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689a      	ldr	r2, [r3, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004454:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	e00f      	b.n	800448a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004488:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0202 	bic.w	r2, r2, #2
 8004498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6899      	ldr	r1, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	7e1b      	ldrb	r3, [r3, #24]
 80044a4:	005a      	lsls	r2, r3, #1
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01b      	beq.n	80044f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685a      	ldr	r2, [r3, #4]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685a      	ldr	r2, [r3, #4]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80044d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6859      	ldr	r1, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	3b01      	subs	r3, #1
 80044e4:	035a      	lsls	r2, r3, #13
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	e007      	b.n	8004500 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800450e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	3b01      	subs	r3, #1
 800451c:	051a      	lsls	r2, r3, #20
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6899      	ldr	r1, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004542:	025a      	lsls	r2, r3, #9
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	6899      	ldr	r1, [r3, #8]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	029a      	lsls	r2, r3, #10
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]
}
 8004570:	bf00      	nop
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	40012300 	.word	0x40012300
 8004580:	0f000001 	.word	0x0f000001

08004584 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004590:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800459a:	2b00      	cmp	r3, #0
 800459c:	d13c      	bne.n	8004618 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d12b      	bne.n	8004610 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d127      	bne.n	8004610 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d006      	beq.n	80045dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d119      	bne.n	8004610 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0220 	bic.w	r2, r2, #32
 80045ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004600:	2b00      	cmp	r3, #0
 8004602:	d105      	bne.n	8004610 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff fd7b 	bl	800410c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004616:	e00e      	b.n	8004636 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff fd85 	bl	8004134 <HAL_ADC_ErrorCallback>
}
 800462a:	e004      	b.n	8004636 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff fd67 	bl	8004120 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2240      	movs	r2, #64	; 0x40
 800466c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	f043 0204 	orr.w	r2, r3, #4
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f7ff fd5a 	bl	8004134 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e0ed      	b.n	8004876 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d102      	bne.n	80046ac <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd f8f0 	bl	800188c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0201 	orr.w	r2, r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046bc:	f7ff fba2 	bl	8003e04 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046c2:	e012      	b.n	80046ea <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80046c4:	f7ff fb9e 	bl	8003e04 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b0a      	cmp	r3, #10
 80046d0:	d90b      	bls.n	80046ea <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2205      	movs	r2, #5
 80046e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0c5      	b.n	8004876 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d0e5      	beq.n	80046c4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0202 	bic.w	r2, r2, #2
 8004706:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004708:	f7ff fb7c 	bl	8003e04 <HAL_GetTick>
 800470c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800470e:	e012      	b.n	8004736 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004710:	f7ff fb78 	bl	8003e04 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b0a      	cmp	r3, #10
 800471c:	d90b      	bls.n	8004736 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2205      	movs	r2, #5
 800472e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e09f      	b.n	8004876 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e5      	bne.n	8004710 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7e1b      	ldrb	r3, [r3, #24]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d108      	bne.n	800475e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e007      	b.n	800476e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800476c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	7e5b      	ldrb	r3, [r3, #25]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d108      	bne.n	8004788 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e007      	b.n	8004798 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004796:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	7e9b      	ldrb	r3, [r3, #26]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d108      	bne.n	80047b2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f042 0220 	orr.w	r2, r2, #32
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	e007      	b.n	80047c2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0220 	bic.w	r2, r2, #32
 80047c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7edb      	ldrb	r3, [r3, #27]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d108      	bne.n	80047dc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0210 	bic.w	r2, r2, #16
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e007      	b.n	80047ec <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0210 	orr.w	r2, r2, #16
 80047ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	7f1b      	ldrb	r3, [r3, #28]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d108      	bne.n	8004806 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0208 	orr.w	r2, r2, #8
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e007      	b.n	8004816 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0208 	bic.w	r2, r2, #8
 8004814:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	7f5b      	ldrb	r3, [r3, #29]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d108      	bne.n	8004830 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0204 	orr.w	r2, r2, #4
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	e007      	b.n	8004840 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0204 	bic.w	r2, r2, #4
 800483e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	ea42 0103 	orr.w	r1, r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	1e5a      	subs	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	430a      	orrs	r2, r1
 8004864:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3710      	adds	r7, #16
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
	...

08004880 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004896:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004898:	7cfb      	ldrb	r3, [r7, #19]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d003      	beq.n	80048a6 <HAL_CAN_ConfigFilter+0x26>
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	f040 80be 	bne.w	8004a22 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80048a6:	4b65      	ldr	r3, [pc, #404]	; (8004a3c <HAL_CAN_ConfigFilter+0x1bc>)
 80048a8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048b0:	f043 0201 	orr.w	r2, r3, #1
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048c0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	431a      	orrs	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2201      	movs	r2, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	401a      	ands	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d123      	bne.n	8004950 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	43db      	mvns	r3, r3
 8004912:	401a      	ands	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800492a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	3248      	adds	r2, #72	; 0x48
 8004930:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004944:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004946:	6979      	ldr	r1, [r7, #20]
 8004948:	3348      	adds	r3, #72	; 0x48
 800494a:	00db      	lsls	r3, r3, #3
 800494c:	440b      	add	r3, r1
 800494e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	69db      	ldr	r3, [r3, #28]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d122      	bne.n	800499e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	431a      	orrs	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004978:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	3248      	adds	r2, #72	; 0x48
 800497e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004992:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004994:	6979      	ldr	r1, [r7, #20]
 8004996:	3348      	adds	r3, #72	; 0x48
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	440b      	add	r3, r1
 800499c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	43db      	mvns	r3, r3
 80049b0:	401a      	ands	r2, r3
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80049b8:	e007      	b.n	80049ca <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	43db      	mvns	r3, r3
 80049dc:	401a      	ands	r2, r3
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80049e4:	e007      	b.n	80049f6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d107      	bne.n	8004a0e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004a14:	f023 0201 	bic.w	r2, r3, #1
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e006      	b.n	8004a30 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
  }
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	40006400 	.word	0x40006400

08004a40 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d12e      	bne.n	8004ab2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0201 	bic.w	r2, r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a6c:	f7ff f9ca 	bl	8003e04 <HAL_GetTick>
 8004a70:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a72:	e012      	b.n	8004a9a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a74:	f7ff f9c6 	bl	8003e04 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b0a      	cmp	r3, #10
 8004a80:	d90b      	bls.n	8004a9a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2205      	movs	r2, #5
 8004a92:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e012      	b.n	8004ac0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1e5      	bne.n	8004a74 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e006      	b.n	8004ac0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
  }
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b089      	sub	sp, #36	; 0x24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
 8004ad4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004adc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ae6:	7ffb      	ldrb	r3, [r7, #31]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d003      	beq.n	8004af4 <HAL_CAN_AddTxMessage+0x2c>
 8004aec:	7ffb      	ldrb	r3, [r7, #31]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	f040 80b8 	bne.w	8004c64 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10a      	bne.n	8004b14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d105      	bne.n	8004b14 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 80a0 	beq.w	8004c54 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	0e1b      	lsrs	r3, r3, #24
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b02      	cmp	r3, #2
 8004b22:	d907      	bls.n	8004b34 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b28:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e09e      	b.n	8004c72 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b34:	2201      	movs	r2, #1
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	409a      	lsls	r2, r3
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10d      	bne.n	8004b62 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	6809      	ldr	r1, [r1, #0]
 8004b54:	431a      	orrs	r2, r3
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3318      	adds	r3, #24
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	440b      	add	r3, r1
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e00f      	b.n	8004b82 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b6c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b72:	68f9      	ldr	r1, [r7, #12]
 8004b74:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004b76:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	3318      	adds	r3, #24
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	440b      	add	r3, r1
 8004b80:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	3318      	adds	r3, #24
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	440b      	add	r3, r1
 8004b92:	3304      	adds	r3, #4
 8004b94:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	7d1b      	ldrb	r3, [r3, #20]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d111      	bne.n	8004bc2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	4413      	add	r3, r2
 8004baa:	3304      	adds	r3, #4
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	6811      	ldr	r1, [r2, #0]
 8004bb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	3318      	adds	r3, #24
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	440b      	add	r3, r1
 8004bbe:	3304      	adds	r3, #4
 8004bc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3307      	adds	r3, #7
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	061a      	lsls	r2, r3, #24
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3306      	adds	r3, #6
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	041b      	lsls	r3, r3, #16
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3305      	adds	r3, #5
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	021b      	lsls	r3, r3, #8
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	3204      	adds	r2, #4
 8004be2:	7812      	ldrb	r2, [r2, #0]
 8004be4:	4610      	mov	r0, r2
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	6811      	ldr	r1, [r2, #0]
 8004bea:	ea43 0200 	orr.w	r2, r3, r0
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8004bf8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3303      	adds	r3, #3
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	061a      	lsls	r2, r3, #24
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3302      	adds	r3, #2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	4313      	orrs	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	7812      	ldrb	r2, [r2, #0]
 8004c1a:	4610      	mov	r0, r2
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	6811      	ldr	r1, [r2, #0]
 8004c20:	ea43 0200 	orr.w	r2, r3, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	440b      	add	r3, r1
 8004c2a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004c2e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	3318      	adds	r3, #24
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	4413      	add	r3, r2
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	6811      	ldr	r1, [r2, #0]
 8004c42:	f043 0201 	orr.w	r2, r3, #1
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	3318      	adds	r3, #24
 8004c4a:	011b      	lsls	r3, r3, #4
 8004c4c:	440b      	add	r3, r1
 8004c4e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e00e      	b.n	8004c72 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e006      	b.n	8004c72 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3724      	adds	r7, #36	; 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b085      	sub	sp, #20
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c8e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d002      	beq.n	8004c9c <HAL_CAN_ActivateNotification+0x1e>
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d109      	bne.n	8004cb0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6959      	ldr	r1, [r3, #20]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	e006      	b.n	8004cbe <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
  }
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
	...

08004ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <__NVIC_SetPriorityGrouping+0x44>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ce8:	4013      	ands	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cfe:	4a04      	ldr	r2, [pc, #16]	; (8004d10 <__NVIC_SetPriorityGrouping+0x44>)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	60d3      	str	r3, [r2, #12]
}
 8004d04:	bf00      	nop
 8004d06:	3714      	adds	r7, #20
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	e000ed00 	.word	0xe000ed00

08004d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <__NVIC_GetPriorityGrouping+0x18>)
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	0a1b      	lsrs	r3, r3, #8
 8004d1e:	f003 0307 	and.w	r3, r3, #7
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	e000ed00 	.word	0xe000ed00

08004d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	db0b      	blt.n	8004d5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	f003 021f 	and.w	r2, r3, #31
 8004d48:	4907      	ldr	r1, [pc, #28]	; (8004d68 <__NVIC_EnableIRQ+0x38>)
 8004d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2001      	movs	r0, #1
 8004d52:	fa00 f202 	lsl.w	r2, r0, r2
 8004d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	e000e100 	.word	0xe000e100

08004d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	6039      	str	r1, [r7, #0]
 8004d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	db0a      	blt.n	8004d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	b2da      	uxtb	r2, r3
 8004d84:	490c      	ldr	r1, [pc, #48]	; (8004db8 <__NVIC_SetPriority+0x4c>)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	0112      	lsls	r2, r2, #4
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	440b      	add	r3, r1
 8004d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d94:	e00a      	b.n	8004dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4908      	ldr	r1, [pc, #32]	; (8004dbc <__NVIC_SetPriority+0x50>)
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	3b04      	subs	r3, #4
 8004da4:	0112      	lsls	r2, r2, #4
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	440b      	add	r3, r1
 8004daa:	761a      	strb	r2, [r3, #24]
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	e000e100 	.word	0xe000e100
 8004dbc:	e000ed00 	.word	0xe000ed00

08004dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b089      	sub	sp, #36	; 0x24
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f1c3 0307 	rsb	r3, r3, #7
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	bf28      	it	cs
 8004dde:	2304      	movcs	r3, #4
 8004de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	3304      	adds	r3, #4
 8004de6:	2b06      	cmp	r3, #6
 8004de8:	d902      	bls.n	8004df0 <NVIC_EncodePriority+0x30>
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	3b03      	subs	r3, #3
 8004dee:	e000      	b.n	8004df2 <NVIC_EncodePriority+0x32>
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43da      	mvns	r2, r3
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	401a      	ands	r2, r3
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	43d9      	mvns	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e18:	4313      	orrs	r3, r2
         );
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
	...

08004e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e38:	d301      	bcc.n	8004e3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e00f      	b.n	8004e5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e3e:	4a0a      	ldr	r2, [pc, #40]	; (8004e68 <SysTick_Config+0x40>)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e46:	210f      	movs	r1, #15
 8004e48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e4c:	f7ff ff8e 	bl	8004d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <SysTick_Config+0x40>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e56:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <SysTick_Config+0x40>)
 8004e58:	2207      	movs	r2, #7
 8004e5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	e000e010 	.word	0xe000e010

08004e6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7ff ff29 	bl	8004ccc <__NVIC_SetPriorityGrouping>
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b086      	sub	sp, #24
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	4603      	mov	r3, r0
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	607a      	str	r2, [r7, #4]
 8004e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e94:	f7ff ff3e 	bl	8004d14 <__NVIC_GetPriorityGrouping>
 8004e98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	6978      	ldr	r0, [r7, #20]
 8004ea0:	f7ff ff8e 	bl	8004dc0 <NVIC_EncodePriority>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eaa:	4611      	mov	r1, r2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff ff5d 	bl	8004d6c <__NVIC_SetPriority>
}
 8004eb2:	bf00      	nop
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff ff31 	bl	8004d30 <__NVIC_EnableIRQ>
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f7ff ffa2 	bl	8004e28 <SysTick_Config>
 8004ee4:	4603      	mov	r3, r0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004efc:	f7fe ff82 	bl	8003e04 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e099      	b.n	8005040 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f022 0201 	bic.w	r2, r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f2c:	e00f      	b.n	8004f4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f2e:	f7fe ff69 	bl	8003e04 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b05      	cmp	r3, #5
 8004f3a:	d908      	bls.n	8004f4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2203      	movs	r2, #3
 8004f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e078      	b.n	8005040 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e8      	bne.n	8004f2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	4b38      	ldr	r3, [pc, #224]	; (8005048 <HAL_DMA_Init+0x158>)
 8004f68:	4013      	ands	r3, r2
 8004f6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d107      	bne.n	8004fb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f023 0307 	bic.w	r3, r3, #7
 8004fce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d117      	bne.n	8005012 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00e      	beq.n	8005012 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fa6f 	bl	80054d8 <DMA_CheckFifoParam>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2240      	movs	r2, #64	; 0x40
 8005004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800500e:	2301      	movs	r3, #1
 8005010:	e016      	b.n	8005040 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa26 	bl	800546c <DMA_CalcBaseAndBitshift>
 8005020:	4603      	mov	r3, r0
 8005022:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005028:	223f      	movs	r2, #63	; 0x3f
 800502a:	409a      	lsls	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	f010803f 	.word	0xf010803f

0800504c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005062:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_DMA_Start_IT+0x26>
 800506e:	2302      	movs	r3, #2
 8005070:	e040      	b.n	80050f4 <HAL_DMA_Start_IT+0xa8>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b01      	cmp	r3, #1
 8005084:	d12f      	bne.n	80050e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	68b9      	ldr	r1, [r7, #8]
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f000 f9b8 	bl	8005410 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	223f      	movs	r2, #63	; 0x3f
 80050a6:	409a      	lsls	r2, r3
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f042 0216 	orr.w	r2, r2, #22
 80050ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0208 	orr.w	r2, r2, #8
 80050d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0201 	orr.w	r2, r2, #1
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	e005      	b.n	80050f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80050ee:	2302      	movs	r3, #2
 80050f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80050f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005108:	4b8e      	ldr	r3, [pc, #568]	; (8005344 <HAL_DMA_IRQHandler+0x248>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a8e      	ldr	r2, [pc, #568]	; (8005348 <HAL_DMA_IRQHandler+0x24c>)
 800510e:	fba2 2303 	umull	r2, r3, r2, r3
 8005112:	0a9b      	lsrs	r3, r3, #10
 8005114:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	2208      	movs	r2, #8
 8005128:	409a      	lsls	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4013      	ands	r3, r2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d01a      	beq.n	8005168 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0304 	and.w	r3, r3, #4
 800513c:	2b00      	cmp	r3, #0
 800513e:	d013      	beq.n	8005168 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0204 	bic.w	r2, r2, #4
 800514e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005154:	2208      	movs	r2, #8
 8005156:	409a      	lsls	r2, r3
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005160:	f043 0201 	orr.w	r2, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516c:	2201      	movs	r2, #1
 800516e:	409a      	lsls	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d012      	beq.n	800519e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800518a:	2201      	movs	r2, #1
 800518c:	409a      	lsls	r2, r3
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005196:	f043 0202 	orr.w	r2, r3, #2
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a2:	2204      	movs	r2, #4
 80051a4:	409a      	lsls	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d012      	beq.n	80051d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00b      	beq.n	80051d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051c0:	2204      	movs	r2, #4
 80051c2:	409a      	lsls	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051cc:	f043 0204 	orr.w	r2, r3, #4
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051d8:	2210      	movs	r2, #16
 80051da:	409a      	lsls	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	4013      	ands	r3, r2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d043      	beq.n	800526c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0308 	and.w	r3, r3, #8
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03c      	beq.n	800526c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f6:	2210      	movs	r2, #16
 80051f8:	409a      	lsls	r2, r3
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d018      	beq.n	800523e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d024      	beq.n	800526c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	4798      	blx	r3
 800522a:	e01f      	b.n	800526c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005230:	2b00      	cmp	r3, #0
 8005232:	d01b      	beq.n	800526c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	4798      	blx	r3
 800523c:	e016      	b.n	800526c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0208 	bic.w	r2, r2, #8
 800525a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005270:	2220      	movs	r2, #32
 8005272:	409a      	lsls	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 808f 	beq.w	800539c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0310 	and.w	r3, r3, #16
 8005288:	2b00      	cmp	r3, #0
 800528a:	f000 8087 	beq.w	800539c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005292:	2220      	movs	r2, #32
 8005294:	409a      	lsls	r2, r3
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b05      	cmp	r3, #5
 80052a4:	d136      	bne.n	8005314 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0216 	bic.w	r2, r2, #22
 80052b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d103      	bne.n	80052d6 <HAL_DMA_IRQHandler+0x1da>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0208 	bic.w	r2, r2, #8
 80052e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ea:	223f      	movs	r2, #63	; 0x3f
 80052ec:	409a      	lsls	r2, r3
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005306:	2b00      	cmp	r3, #0
 8005308:	d07e      	beq.n	8005408 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	4798      	blx	r3
        }
        return;
 8005312:	e079      	b.n	8005408 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d01d      	beq.n	800535e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10d      	bne.n	800534c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005334:	2b00      	cmp	r3, #0
 8005336:	d031      	beq.n	800539c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4798      	blx	r3
 8005340:	e02c      	b.n	800539c <HAL_DMA_IRQHandler+0x2a0>
 8005342:	bf00      	nop
 8005344:	200000d8 	.word	0x200000d8
 8005348:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005350:	2b00      	cmp	r3, #0
 8005352:	d023      	beq.n	800539c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
 800535c:	e01e      	b.n	800539c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10f      	bne.n	800538c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0210 	bic.w	r2, r2, #16
 800537a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d032      	beq.n	800540a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d022      	beq.n	80053f6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2205      	movs	r2, #5
 80053b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	3301      	adds	r3, #1
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d307      	bcc.n	80053e4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0301 	and.w	r3, r3, #1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1f2      	bne.n	80053c8 <HAL_DMA_IRQHandler+0x2cc>
 80053e2:	e000      	b.n	80053e6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80053e4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d005      	beq.n	800540a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	4798      	blx	r3
 8005406:	e000      	b.n	800540a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005408:	bf00      	nop
    }
  }
}
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
 800541c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800542c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b40      	cmp	r3, #64	; 0x40
 800543c:	d108      	bne.n	8005450 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800544e:	e007      	b.n	8005460 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]
}
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	b2db      	uxtb	r3, r3
 800547a:	3b10      	subs	r3, #16
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <DMA_CalcBaseAndBitshift+0x64>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005486:	4a13      	ldr	r2, [pc, #76]	; (80054d4 <DMA_CalcBaseAndBitshift+0x68>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2b03      	cmp	r3, #3
 8005498:	d909      	bls.n	80054ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	1d1a      	adds	r2, r3, #4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	659a      	str	r2, [r3, #88]	; 0x58
 80054ac:	e007      	b.n	80054be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	aaaaaaab 	.word	0xaaaaaaab
 80054d4:	0800a0bc 	.word	0x0800a0bc

080054d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d11f      	bne.n	8005532 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d856      	bhi.n	80055a6 <DMA_CheckFifoParam+0xce>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <DMA_CheckFifoParam+0x28>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005511 	.word	0x08005511
 8005504:	08005523 	.word	0x08005523
 8005508:	08005511 	.word	0x08005511
 800550c:	080055a7 	.word	0x080055a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d046      	beq.n	80055aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005520:	e043      	b.n	80055aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800552a:	d140      	bne.n	80055ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005530:	e03d      	b.n	80055ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800553a:	d121      	bne.n	8005580 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b03      	cmp	r3, #3
 8005540:	d837      	bhi.n	80055b2 <DMA_CheckFifoParam+0xda>
 8005542:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <DMA_CheckFifoParam+0x70>)
 8005544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005548:	08005559 	.word	0x08005559
 800554c:	0800555f 	.word	0x0800555f
 8005550:	08005559 	.word	0x08005559
 8005554:	08005571 	.word	0x08005571
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	73fb      	strb	r3, [r7, #15]
      break;
 800555c:	e030      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d025      	beq.n	80055b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800556e:	e022      	b.n	80055b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005574:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005578:	d11f      	bne.n	80055ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800557e:	e01c      	b.n	80055ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d903      	bls.n	800558e <DMA_CheckFifoParam+0xb6>
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d003      	beq.n	8005594 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800558c:	e018      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	73fb      	strb	r3, [r7, #15]
      break;
 8005592:	e015      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00e      	beq.n	80055be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	e00b      	b.n	80055be <DMA_CheckFifoParam+0xe6>
      break;
 80055a6:	bf00      	nop
 80055a8:	e00a      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
      break;
 80055aa:	bf00      	nop
 80055ac:	e008      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
      break;
 80055ae:	bf00      	nop
 80055b0:	e006      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
      break;
 80055b2:	bf00      	nop
 80055b4:	e004      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
      break;
 80055b6:	bf00      	nop
 80055b8:	e002      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80055ba:	bf00      	nop
 80055bc:	e000      	b.n	80055c0 <DMA_CheckFifoParam+0xe8>
      break;
 80055be:	bf00      	nop
    }
  } 
  
  return status; 
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3714      	adds	r7, #20
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop

080055d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
 80055ea:	e16b      	b.n	80058c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80055ec:	2201      	movs	r2, #1
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	fa02 f303 	lsl.w	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4013      	ands	r3, r2
 80055fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	429a      	cmp	r2, r3
 8005606:	f040 815a 	bne.w	80058be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d005      	beq.n	8005622 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800561e:	2b02      	cmp	r3, #2
 8005620:	d130      	bne.n	8005684 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	2203      	movs	r2, #3
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	4013      	ands	r3, r2
 8005638:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68da      	ldr	r2, [r3, #12]
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4313      	orrs	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005658:	2201      	movs	r2, #1
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	fa02 f303 	lsl.w	r3, r2, r3
 8005660:	43db      	mvns	r3, r3
 8005662:	69ba      	ldr	r2, [r7, #24]
 8005664:	4013      	ands	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 0201 	and.w	r2, r3, #1
 8005672:	69fb      	ldr	r3, [r7, #28]
 8005674:	fa02 f303 	lsl.w	r3, r2, r3
 8005678:	69ba      	ldr	r2, [r7, #24]
 800567a:	4313      	orrs	r3, r2
 800567c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	2b03      	cmp	r3, #3
 800568e:	d017      	beq.n	80056c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	2203      	movs	r2, #3
 800569c:	fa02 f303 	lsl.w	r3, r2, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	4013      	ands	r3, r2
 80056a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d123      	bne.n	8005714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	08da      	lsrs	r2, r3, #3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	3208      	adds	r2, #8
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	220f      	movs	r2, #15
 80056e4:	fa02 f303 	lsl.w	r3, r2, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	4013      	ands	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4313      	orrs	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	08da      	lsrs	r2, r3, #3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3208      	adds	r2, #8
 800570e:	69b9      	ldr	r1, [r7, #24]
 8005710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	2203      	movs	r2, #3
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	43db      	mvns	r3, r3
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	4013      	ands	r3, r2
 800572a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f003 0203 	and.w	r2, r3, #3
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	fa02 f303 	lsl.w	r3, r2, r3
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69ba      	ldr	r2, [r7, #24]
 8005746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 80b4 	beq.w	80058be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	4b60      	ldr	r3, [pc, #384]	; (80058dc <HAL_GPIO_Init+0x30c>)
 800575c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575e:	4a5f      	ldr	r2, [pc, #380]	; (80058dc <HAL_GPIO_Init+0x30c>)
 8005760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005764:	6453      	str	r3, [r2, #68]	; 0x44
 8005766:	4b5d      	ldr	r3, [pc, #372]	; (80058dc <HAL_GPIO_Init+0x30c>)
 8005768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005772:	4a5b      	ldr	r2, [pc, #364]	; (80058e0 <HAL_GPIO_Init+0x310>)
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	089b      	lsrs	r3, r3, #2
 8005778:	3302      	adds	r3, #2
 800577a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800577e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	220f      	movs	r2, #15
 800578a:	fa02 f303 	lsl.w	r3, r2, r3
 800578e:	43db      	mvns	r3, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4013      	ands	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a52      	ldr	r2, [pc, #328]	; (80058e4 <HAL_GPIO_Init+0x314>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d02b      	beq.n	80057f6 <HAL_GPIO_Init+0x226>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a51      	ldr	r2, [pc, #324]	; (80058e8 <HAL_GPIO_Init+0x318>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d025      	beq.n	80057f2 <HAL_GPIO_Init+0x222>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a50      	ldr	r2, [pc, #320]	; (80058ec <HAL_GPIO_Init+0x31c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01f      	beq.n	80057ee <HAL_GPIO_Init+0x21e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a4f      	ldr	r2, [pc, #316]	; (80058f0 <HAL_GPIO_Init+0x320>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d019      	beq.n	80057ea <HAL_GPIO_Init+0x21a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a4e      	ldr	r2, [pc, #312]	; (80058f4 <HAL_GPIO_Init+0x324>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <HAL_GPIO_Init+0x216>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a4d      	ldr	r2, [pc, #308]	; (80058f8 <HAL_GPIO_Init+0x328>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00d      	beq.n	80057e2 <HAL_GPIO_Init+0x212>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a4c      	ldr	r2, [pc, #304]	; (80058fc <HAL_GPIO_Init+0x32c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d007      	beq.n	80057de <HAL_GPIO_Init+0x20e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a4b      	ldr	r2, [pc, #300]	; (8005900 <HAL_GPIO_Init+0x330>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d101      	bne.n	80057da <HAL_GPIO_Init+0x20a>
 80057d6:	2307      	movs	r3, #7
 80057d8:	e00e      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057da:	2308      	movs	r3, #8
 80057dc:	e00c      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057de:	2306      	movs	r3, #6
 80057e0:	e00a      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057e2:	2305      	movs	r3, #5
 80057e4:	e008      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057e6:	2304      	movs	r3, #4
 80057e8:	e006      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057ea:	2303      	movs	r3, #3
 80057ec:	e004      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057ee:	2302      	movs	r3, #2
 80057f0:	e002      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <HAL_GPIO_Init+0x228>
 80057f6:	2300      	movs	r3, #0
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	f002 0203 	and.w	r2, r2, #3
 80057fe:	0092      	lsls	r2, r2, #2
 8005800:	4093      	lsls	r3, r2
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4313      	orrs	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005808:	4935      	ldr	r1, [pc, #212]	; (80058e0 <HAL_GPIO_Init+0x310>)
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	089b      	lsrs	r3, r3, #2
 800580e:	3302      	adds	r3, #2
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005816:	4b3b      	ldr	r3, [pc, #236]	; (8005904 <HAL_GPIO_Init+0x334>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	43db      	mvns	r3, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4013      	ands	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800583a:	4a32      	ldr	r2, [pc, #200]	; (8005904 <HAL_GPIO_Init+0x334>)
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005840:	4b30      	ldr	r3, [pc, #192]	; (8005904 <HAL_GPIO_Init+0x334>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	43db      	mvns	r3, r3
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4013      	ands	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4313      	orrs	r3, r2
 8005862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005864:	4a27      	ldr	r2, [pc, #156]	; (8005904 <HAL_GPIO_Init+0x334>)
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800586a:	4b26      	ldr	r3, [pc, #152]	; (8005904 <HAL_GPIO_Init+0x334>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	43db      	mvns	r3, r3
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4013      	ands	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800588e:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <HAL_GPIO_Init+0x334>)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005894:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <HAL_GPIO_Init+0x334>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80058b8:	4a12      	ldr	r2, [pc, #72]	; (8005904 <HAL_GPIO_Init+0x334>)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	3301      	adds	r3, #1
 80058c2:	61fb      	str	r3, [r7, #28]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b0f      	cmp	r3, #15
 80058c8:	f67f ae90 	bls.w	80055ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80058cc:	bf00      	nop
 80058ce:	bf00      	nop
 80058d0:	3724      	adds	r7, #36	; 0x24
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800
 80058e0:	40013800 	.word	0x40013800
 80058e4:	40020000 	.word	0x40020000
 80058e8:	40020400 	.word	0x40020400
 80058ec:	40020800 	.word	0x40020800
 80058f0:	40020c00 	.word	0x40020c00
 80058f4:	40021000 	.word	0x40021000
 80058f8:	40021400 	.word	0x40021400
 80058fc:	40021800 	.word	0x40021800
 8005900:	40021c00 	.word	0x40021c00
 8005904:	40013c00 	.word	0x40013c00

08005908 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e12b      	b.n	8005b72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fc f8c2 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2224      	movs	r2, #36	; 0x24
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800595a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800596a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800596c:	f001 fbac 	bl	80070c8 <HAL_RCC_GetPCLK1Freq>
 8005970:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4a81      	ldr	r2, [pc, #516]	; (8005b7c <HAL_I2C_Init+0x274>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d807      	bhi.n	800598c <HAL_I2C_Init+0x84>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4a80      	ldr	r2, [pc, #512]	; (8005b80 <HAL_I2C_Init+0x278>)
 8005980:	4293      	cmp	r3, r2
 8005982:	bf94      	ite	ls
 8005984:	2301      	movls	r3, #1
 8005986:	2300      	movhi	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e006      	b.n	800599a <HAL_I2C_Init+0x92>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4a7d      	ldr	r2, [pc, #500]	; (8005b84 <HAL_I2C_Init+0x27c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	bf94      	ite	ls
 8005994:	2301      	movls	r3, #1
 8005996:	2300      	movhi	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e0e7      	b.n	8005b72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4a78      	ldr	r2, [pc, #480]	; (8005b88 <HAL_I2C_Init+0x280>)
 80059a6:	fba2 2303 	umull	r2, r3, r2, r3
 80059aa:	0c9b      	lsrs	r3, r3, #18
 80059ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6a1b      	ldr	r3, [r3, #32]
 80059c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	4a6a      	ldr	r2, [pc, #424]	; (8005b7c <HAL_I2C_Init+0x274>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d802      	bhi.n	80059dc <HAL_I2C_Init+0xd4>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3301      	adds	r3, #1
 80059da:	e009      	b.n	80059f0 <HAL_I2C_Init+0xe8>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	4a69      	ldr	r2, [pc, #420]	; (8005b8c <HAL_I2C_Init+0x284>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	099b      	lsrs	r3, r3, #6
 80059ee:	3301      	adds	r3, #1
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6812      	ldr	r2, [r2, #0]
 80059f4:	430b      	orrs	r3, r1
 80059f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005a02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	495c      	ldr	r1, [pc, #368]	; (8005b7c <HAL_I2C_Init+0x274>)
 8005a0c:	428b      	cmp	r3, r1
 8005a0e:	d819      	bhi.n	8005a44 <HAL_I2C_Init+0x13c>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	1e59      	subs	r1, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a1e:	1c59      	adds	r1, r3, #1
 8005a20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005a24:	400b      	ands	r3, r1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <HAL_I2C_Init+0x138>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	1e59      	subs	r1, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8005a38:	3301      	adds	r3, #1
 8005a3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a3e:	e051      	b.n	8005ae4 <HAL_I2C_Init+0x1dc>
 8005a40:	2304      	movs	r3, #4
 8005a42:	e04f      	b.n	8005ae4 <HAL_I2C_Init+0x1dc>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d111      	bne.n	8005a70 <HAL_I2C_Init+0x168>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	1e58      	subs	r0, r3, #1
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6859      	ldr	r1, [r3, #4]
 8005a54:	460b      	mov	r3, r1
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	440b      	add	r3, r1
 8005a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a5e:	3301      	adds	r3, #1
 8005a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	bf0c      	ite	eq
 8005a68:	2301      	moveq	r3, #1
 8005a6a:	2300      	movne	r3, #0
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e012      	b.n	8005a96 <HAL_I2C_Init+0x18e>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	1e58      	subs	r0, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6859      	ldr	r1, [r3, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	0099      	lsls	r1, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a86:	3301      	adds	r3, #1
 8005a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	bf0c      	ite	eq
 8005a90:	2301      	moveq	r3, #1
 8005a92:	2300      	movne	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_I2C_Init+0x196>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e022      	b.n	8005ae4 <HAL_I2C_Init+0x1dc>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10e      	bne.n	8005ac4 <HAL_I2C_Init+0x1bc>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1e58      	subs	r0, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6859      	ldr	r1, [r3, #4]
 8005aae:	460b      	mov	r3, r1
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	440b      	add	r3, r1
 8005ab4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ab8:	3301      	adds	r3, #1
 8005aba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac2:	e00f      	b.n	8005ae4 <HAL_I2C_Init+0x1dc>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1e58      	subs	r0, r3, #1
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6859      	ldr	r1, [r3, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	440b      	add	r3, r1
 8005ad2:	0099      	lsls	r1, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ada:	3301      	adds	r3, #1
 8005adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ae0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	6809      	ldr	r1, [r1, #0]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	69da      	ldr	r2, [r3, #28]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005b12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6911      	ldr	r1, [r2, #16]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	68d2      	ldr	r2, [r2, #12]
 8005b1e:	4311      	orrs	r1, r2
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	430b      	orrs	r3, r1
 8005b26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	699b      	ldr	r3, [r3, #24]
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0201 	orr.w	r2, r2, #1
 8005b52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b70:	2300      	movs	r3, #0
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	000186a0 	.word	0x000186a0
 8005b80:	001e847f 	.word	0x001e847f
 8005b84:	003d08ff 	.word	0x003d08ff
 8005b88:	431bde83 	.word	0x431bde83
 8005b8c:	10624dd3 	.word	0x10624dd3

08005b90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	817b      	strh	r3, [r7, #10]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005ba4:	f7fe f92e 	bl	8003e04 <HAL_GetTick>
 8005ba8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b20      	cmp	r3, #32
 8005bb4:	f040 80e0 	bne.w	8005d78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	2319      	movs	r3, #25
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	4970      	ldr	r1, [pc, #448]	; (8005d84 <HAL_I2C_Master_Transmit+0x1f4>)
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 fc72 	bl	80064ac <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0d3      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_I2C_Master_Transmit+0x50>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e0cc      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d007      	beq.n	8005c06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f042 0201 	orr.w	r2, r2, #1
 8005c04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2221      	movs	r2, #33	; 0x21
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2210      	movs	r2, #16
 8005c22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	687a      	ldr	r2, [r7, #4]
 8005c30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	893a      	ldrh	r2, [r7, #8]
 8005c36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4a50      	ldr	r2, [pc, #320]	; (8005d88 <HAL_I2C_Master_Transmit+0x1f8>)
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005c48:	8979      	ldrh	r1, [r7, #10]
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	6a3a      	ldr	r2, [r7, #32]
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fadc 	bl	800620c <I2C_MasterRequestWrite>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e08d      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005c74:	e066      	b.n	8005d44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	6a39      	ldr	r1, [r7, #32]
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fcec 	bl	8006658 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00d      	beq.n	8005ca2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d107      	bne.n	8005c9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e06b      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	781a      	ldrb	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d11b      	bne.n	8005d18 <HAL_I2C_Master_Transmit+0x188>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d017      	beq.n	8005d18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	781a      	ldrb	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	1c5a      	adds	r2, r3, #1
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d10:	3b01      	subs	r3, #1
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	6a39      	ldr	r1, [r7, #32]
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 fcdc 	bl	80066da <I2C_WaitOnBTFFlagUntilTimeout>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00d      	beq.n	8005d44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2c:	2b04      	cmp	r3, #4
 8005d2e:	d107      	bne.n	8005d40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681a      	ldr	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e01a      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d194      	bne.n	8005c76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e000      	b.n	8005d7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005d78:	2302      	movs	r3, #2
  }
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	00100002 	.word	0x00100002
 8005d88:	ffff0000 	.word	0xffff0000

08005d8c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08c      	sub	sp, #48	; 0x30
 8005d90:	af02      	add	r7, sp, #8
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	461a      	mov	r2, r3
 8005d98:	460b      	mov	r3, r1
 8005d9a:	817b      	strh	r3, [r7, #10]
 8005d9c:	4613      	mov	r3, r2
 8005d9e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005da0:	f7fe f830 	bl	8003e04 <HAL_GetTick>
 8005da4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b20      	cmp	r3, #32
 8005db0:	f040 820b 	bne.w	80061ca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	9300      	str	r3, [sp, #0]
 8005db8:	2319      	movs	r3, #25
 8005dba:	2201      	movs	r2, #1
 8005dbc:	497c      	ldr	r1, [pc, #496]	; (8005fb0 <HAL_I2C_Master_Receive+0x224>)
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 fb74 	bl	80064ac <I2C_WaitOnFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005dca:	2302      	movs	r3, #2
 8005dcc:	e1fe      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_I2C_Master_Receive+0x50>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e1f7      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0301 	and.w	r3, r3, #1
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d007      	beq.n	8005e02 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e10:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2222      	movs	r2, #34	; 0x22
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2210      	movs	r2, #16
 8005e1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	893a      	ldrh	r2, [r7, #8]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4a5c      	ldr	r2, [pc, #368]	; (8005fb4 <HAL_I2C_Master_Receive+0x228>)
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e44:	8979      	ldrh	r1, [r7, #10]
 8005e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f000 fa60 	bl	8006310 <I2C_MasterRequestRead>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d001      	beq.n	8005e5a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e1b8      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d113      	bne.n	8005e8a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e62:	2300      	movs	r3, #0
 8005e64:	623b      	str	r3, [r7, #32]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	623b      	str	r3, [r7, #32]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	699b      	ldr	r3, [r3, #24]
 8005e74:	623b      	str	r3, [r7, #32]
 8005e76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	e18c      	b.n	80061a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d11b      	bne.n	8005eca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61fb      	str	r3, [r7, #28]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	695b      	ldr	r3, [r3, #20]
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	e16c      	b.n	80061a4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d11b      	bne.n	8005f0a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ee0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	61bb      	str	r3, [r7, #24]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	61bb      	str	r3, [r7, #24]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	e14c      	b.n	80061a4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	699b      	ldr	r3, [r3, #24]
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005f30:	e138      	b.n	80061a4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f36:	2b03      	cmp	r3, #3
 8005f38:	f200 80f1 	bhi.w	800611e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d123      	bne.n	8005f8c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f46:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 fc07 	bl	800675c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e139      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6a:	1c5a      	adds	r2, r3, #1
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f74:	3b01      	subs	r3, #1
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f8a:	e10b      	b.n	80061a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d14e      	bne.n	8006032 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	4906      	ldr	r1, [pc, #24]	; (8005fb8 <HAL_I2C_Master_Receive+0x22c>)
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fa84 	bl	80064ac <I2C_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d008      	beq.n	8005fbc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e10e      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
 8005fae:	bf00      	nop
 8005fb0:	00100002 	.word	0x00100002
 8005fb4:	ffff0000 	.word	0xffff0000
 8005fb8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	691a      	ldr	r2, [r3, #16]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	1c5a      	adds	r2, r3, #1
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006030:	e0b8      	b.n	80061a4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	4966      	ldr	r1, [pc, #408]	; (80061d4 <HAL_I2C_Master_Receive+0x448>)
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 fa35 	bl	80064ac <I2C_WaitOnFlagUntilTimeout>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0bf      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800605a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006078:	3b01      	subs	r3, #1
 800607a:	b29a      	uxth	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2200      	movs	r2, #0
 8006096:	494f      	ldr	r1, [pc, #316]	; (80061d4 <HAL_I2C_Master_Receive+0x448>)
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f000 fa07 	bl	80064ac <I2C_WaitOnFlagUntilTimeout>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e091      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c2:	b2d2      	uxtb	r2, r2
 80060c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	1c5a      	adds	r2, r3, #1
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	3b01      	subs	r3, #1
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fc:	1c5a      	adds	r2, r3, #1
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006106:	3b01      	subs	r3, #1
 8006108:	b29a      	uxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006112:	b29b      	uxth	r3, r3
 8006114:	3b01      	subs	r3, #1
 8006116:	b29a      	uxth	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800611c:	e042      	b.n	80061a4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800611e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006122:	68f8      	ldr	r0, [r7, #12]
 8006124:	f000 fb1a 	bl	800675c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e04c      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613c:	b2d2      	uxtb	r2, r2
 800613e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800614e:	3b01      	subs	r3, #1
 8006150:	b29a      	uxth	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b04      	cmp	r3, #4
 8006170:	d118      	bne.n	80061a4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006184:	1c5a      	adds	r2, r3, #1
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618e:	3b01      	subs	r3, #1
 8006190:	b29a      	uxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f47f aec2 	bne.w	8005f32 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	e000      	b.n	80061cc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80061ca:	2302      	movs	r3, #2
  }
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3728      	adds	r7, #40	; 0x28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}
 80061d4:	00010004 	.word	0x00010004

080061d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e6:	b2db      	uxtb	r3, r3
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8006200:	4618      	mov	r0, r3
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	607a      	str	r2, [r7, #4]
 8006216:	603b      	str	r3, [r7, #0]
 8006218:	460b      	mov	r3, r1
 800621a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	2b08      	cmp	r3, #8
 8006226:	d006      	beq.n	8006236 <I2C_MasterRequestWrite+0x2a>
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d003      	beq.n	8006236 <I2C_MasterRequestWrite+0x2a>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006234:	d108      	bne.n	8006248 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e00b      	b.n	8006260 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624c:	2b12      	cmp	r3, #18
 800624e:	d107      	bne.n	8006260 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800625e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f91d 	bl	80064ac <I2C_WaitOnFlagUntilTimeout>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d00d      	beq.n	8006294 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006286:	d103      	bne.n	8006290 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800628e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e035      	b.n	8006300 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629c:	d108      	bne.n	80062b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800629e:	897b      	ldrh	r3, [r7, #10]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	461a      	mov	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062ac:	611a      	str	r2, [r3, #16]
 80062ae:	e01b      	b.n	80062e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062b0:	897b      	ldrh	r3, [r7, #10]
 80062b2:	11db      	asrs	r3, r3, #7
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f003 0306 	and.w	r3, r3, #6
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	f063 030f 	orn	r3, r3, #15
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	490e      	ldr	r1, [pc, #56]	; (8006308 <I2C_MasterRequestWrite+0xfc>)
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f943 	bl	800655a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d001      	beq.n	80062de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e010      	b.n	8006300 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80062de:	897b      	ldrh	r3, [r7, #10]
 80062e0:	b2da      	uxtb	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	4907      	ldr	r1, [pc, #28]	; (800630c <I2C_MasterRequestWrite+0x100>)
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f933 	bl	800655a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e000      	b.n	8006300 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	00010008 	.word	0x00010008
 800630c:	00010002 	.word	0x00010002

08006310 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	607a      	str	r2, [r7, #4]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	460b      	mov	r3, r1
 800631e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006334:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b08      	cmp	r3, #8
 800633a:	d006      	beq.n	800634a <I2C_MasterRequestRead+0x3a>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d003      	beq.n	800634a <I2C_MasterRequestRead+0x3a>
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006348:	d108      	bne.n	800635c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	e00b      	b.n	8006374 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006360:	2b11      	cmp	r3, #17
 8006362:	d107      	bne.n	8006374 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006372:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006380:	68f8      	ldr	r0, [r7, #12]
 8006382:	f000 f893 	bl	80064ac <I2C_WaitOnFlagUntilTimeout>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00d      	beq.n	80063a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800639a:	d103      	bne.n	80063a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e079      	b.n	800649c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063b0:	d108      	bne.n	80063c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063b2:	897b      	ldrh	r3, [r7, #10]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f043 0301 	orr.w	r3, r3, #1
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	611a      	str	r2, [r3, #16]
 80063c2:	e05f      	b.n	8006484 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80063c4:	897b      	ldrh	r3, [r7, #10]
 80063c6:	11db      	asrs	r3, r3, #7
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 0306 	and.w	r3, r3, #6
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	f063 030f 	orn	r3, r3, #15
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4930      	ldr	r1, [pc, #192]	; (80064a4 <I2C_MasterRequestRead+0x194>)
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f000 f8b9 	bl	800655a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e054      	b.n	800649c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80063f2:	897b      	ldrh	r3, [r7, #10]
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	4929      	ldr	r1, [pc, #164]	; (80064a8 <I2C_MasterRequestRead+0x198>)
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f8a9 	bl	800655a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e044      	b.n	800649c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006412:	2300      	movs	r3, #0
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	613b      	str	r3, [r7, #16]
 8006426:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006436:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f000 f831 	bl	80064ac <I2C_WaitOnFlagUntilTimeout>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d00d      	beq.n	800646c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645e:	d103      	bne.n	8006468 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006466:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e017      	b.n	800649c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800646c:	897b      	ldrh	r3, [r7, #10]
 800646e:	11db      	asrs	r3, r3, #7
 8006470:	b2db      	uxtb	r3, r3
 8006472:	f003 0306 	and.w	r3, r3, #6
 8006476:	b2db      	uxtb	r3, r3
 8006478:	f063 030e 	orn	r3, r3, #14
 800647c:	b2da      	uxtb	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	687a      	ldr	r2, [r7, #4]
 8006488:	4907      	ldr	r1, [pc, #28]	; (80064a8 <I2C_MasterRequestRead+0x198>)
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 f865 	bl	800655a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	00010008 	.word	0x00010008
 80064a8:	00010002 	.word	0x00010002

080064ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	603b      	str	r3, [r7, #0]
 80064b8:	4613      	mov	r3, r2
 80064ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064bc:	e025      	b.n	800650a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c4:	d021      	beq.n	800650a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c6:	f7fd fc9d 	bl	8003e04 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d302      	bcc.n	80064dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d116      	bne.n	800650a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f043 0220 	orr.w	r2, r3, #32
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e023      	b.n	8006552 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b01      	cmp	r3, #1
 8006512:	d10d      	bne.n	8006530 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	43da      	mvns	r2, r3
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	4013      	ands	r3, r2
 8006520:	b29b      	uxth	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	bf0c      	ite	eq
 8006526:	2301      	moveq	r3, #1
 8006528:	2300      	movne	r3, #0
 800652a:	b2db      	uxtb	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	e00c      	b.n	800654a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	43da      	mvns	r2, r3
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	4013      	ands	r3, r2
 800653c:	b29b      	uxth	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	bf0c      	ite	eq
 8006542:	2301      	moveq	r3, #1
 8006544:	2300      	movne	r3, #0
 8006546:	b2db      	uxtb	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	429a      	cmp	r2, r3
 800654e:	d0b6      	beq.n	80064be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	60f8      	str	r0, [r7, #12]
 8006562:	60b9      	str	r1, [r7, #8]
 8006564:	607a      	str	r2, [r7, #4]
 8006566:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006568:	e051      	b.n	800660e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006578:	d123      	bne.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006588:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006592:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2220      	movs	r2, #32
 800659e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f043 0204 	orr.w	r2, r3, #4
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e046      	b.n	8006650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065c8:	d021      	beq.n	800660e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ca:	f7fd fc1b 	bl	8003e04 <HAL_GetTick>
 80065ce:	4602      	mov	r2, r0
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d302      	bcc.n	80065e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d116      	bne.n	800660e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e020      	b.n	8006650 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b01      	cmp	r3, #1
 8006616:	d10c      	bne.n	8006632 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	43da      	mvns	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	bf14      	ite	ne
 800662a:	2301      	movne	r3, #1
 800662c:	2300      	moveq	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	e00b      	b.n	800664a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	43da      	mvns	r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	4013      	ands	r3, r2
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	bf14      	ite	ne
 8006644:	2301      	movne	r3, #1
 8006646:	2300      	moveq	r3, #0
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d18d      	bne.n	800656a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006664:	e02d      	b.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f8ce 	bl	8006808 <I2C_IsAcknowledgeFailed>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e02d      	b.n	80066d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800667c:	d021      	beq.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667e:	f7fd fbc1 	bl	8003e04 <HAL_GetTick>
 8006682:	4602      	mov	r2, r0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	1ad3      	subs	r3, r2, r3
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	429a      	cmp	r2, r3
 800668c:	d302      	bcc.n	8006694 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d116      	bne.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	f043 0220 	orr.w	r2, r3, #32
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e007      	b.n	80066d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066cc:	2b80      	cmp	r3, #128	; 0x80
 80066ce:	d1ca      	bne.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066e6:	e02d      	b.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f88d 	bl	8006808 <I2C_IsAcknowledgeFailed>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e02d      	b.n	8006754 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066fe:	d021      	beq.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006700:	f7fd fb80 	bl	8003e04 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	429a      	cmp	r2, r3
 800670e:	d302      	bcc.n	8006716 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d116      	bne.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	f043 0220 	orr.w	r2, r3, #32
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e007      	b.n	8006754 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f003 0304 	and.w	r3, r3, #4
 800674e:	2b04      	cmp	r3, #4
 8006750:	d1ca      	bne.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006768:	e042      	b.n	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	f003 0310 	and.w	r3, r3, #16
 8006774:	2b10      	cmp	r3, #16
 8006776:	d119      	bne.n	80067ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f06f 0210 	mvn.w	r2, #16
 8006780:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e029      	b.n	8006800 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ac:	f7fd fb2a 	bl	8003e04 <HAL_GetTick>
 80067b0:	4602      	mov	r2, r0
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	1ad3      	subs	r3, r2, r3
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d302      	bcc.n	80067c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d116      	bne.n	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2220      	movs	r2, #32
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067dc:	f043 0220 	orr.w	r2, r3, #32
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e007      	b.n	8006800 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	695b      	ldr	r3, [r3, #20]
 80067f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fa:	2b40      	cmp	r3, #64	; 0x40
 80067fc:	d1b5      	bne.n	800676a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	695b      	ldr	r3, [r3, #20]
 8006816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800681e:	d11b      	bne.n	8006858 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006828:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2220      	movs	r2, #32
 8006834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	f043 0204 	orr.w	r2, r3, #4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
	...

08006868 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e267      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d075      	beq.n	8006972 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006886:	4b88      	ldr	r3, [pc, #544]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f003 030c 	and.w	r3, r3, #12
 800688e:	2b04      	cmp	r3, #4
 8006890:	d00c      	beq.n	80068ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006892:	4b85      	ldr	r3, [pc, #532]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800689a:	2b08      	cmp	r3, #8
 800689c:	d112      	bne.n	80068c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800689e:	4b82      	ldr	r3, [pc, #520]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068aa:	d10b      	bne.n	80068c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ac:	4b7e      	ldr	r3, [pc, #504]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d05b      	beq.n	8006970 <HAL_RCC_OscConfig+0x108>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d157      	bne.n	8006970 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e242      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068cc:	d106      	bne.n	80068dc <HAL_RCC_OscConfig+0x74>
 80068ce:	4b76      	ldr	r3, [pc, #472]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a75      	ldr	r2, [pc, #468]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80068d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	e01d      	b.n	8006918 <HAL_RCC_OscConfig+0xb0>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e4:	d10c      	bne.n	8006900 <HAL_RCC_OscConfig+0x98>
 80068e6:	4b70      	ldr	r3, [pc, #448]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a6f      	ldr	r2, [pc, #444]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80068ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068f0:	6013      	str	r3, [r2, #0]
 80068f2:	4b6d      	ldr	r3, [pc, #436]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a6c      	ldr	r2, [pc, #432]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80068f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068fc:	6013      	str	r3, [r2, #0]
 80068fe:	e00b      	b.n	8006918 <HAL_RCC_OscConfig+0xb0>
 8006900:	4b69      	ldr	r3, [pc, #420]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a68      	ldr	r2, [pc, #416]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	4b66      	ldr	r3, [pc, #408]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a65      	ldr	r2, [pc, #404]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d013      	beq.n	8006948 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006920:	f7fd fa70 	bl	8003e04 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006928:	f7fd fa6c 	bl	8003e04 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b64      	cmp	r3, #100	; 0x64
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e207      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800693a:	4b5b      	ldr	r3, [pc, #364]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0xc0>
 8006946:	e014      	b.n	8006972 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006948:	f7fd fa5c 	bl	8003e04 <HAL_GetTick>
 800694c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800694e:	e008      	b.n	8006962 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006950:	f7fd fa58 	bl	8003e04 <HAL_GetTick>
 8006954:	4602      	mov	r2, r0
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	2b64      	cmp	r3, #100	; 0x64
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e1f3      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006962:	4b51      	ldr	r3, [pc, #324]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1f0      	bne.n	8006950 <HAL_RCC_OscConfig+0xe8>
 800696e:	e000      	b.n	8006972 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b00      	cmp	r3, #0
 800697c:	d063      	beq.n	8006a46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800697e:	4b4a      	ldr	r3, [pc, #296]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 030c 	and.w	r3, r3, #12
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800698a:	4b47      	ldr	r3, [pc, #284]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006992:	2b08      	cmp	r3, #8
 8006994:	d11c      	bne.n	80069d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006996:	4b44      	ldr	r3, [pc, #272]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d116      	bne.n	80069d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a2:	4b41      	ldr	r3, [pc, #260]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d005      	beq.n	80069ba <HAL_RCC_OscConfig+0x152>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d001      	beq.n	80069ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	e1c7      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ba:	4b3b      	ldr	r3, [pc, #236]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	00db      	lsls	r3, r3, #3
 80069c8:	4937      	ldr	r1, [pc, #220]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069ce:	e03a      	b.n	8006a46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d020      	beq.n	8006a1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069d8:	4b34      	ldr	r3, [pc, #208]	; (8006aac <HAL_RCC_OscConfig+0x244>)
 80069da:	2201      	movs	r2, #1
 80069dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069de:	f7fd fa11 	bl	8003e04 <HAL_GetTick>
 80069e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069e6:	f7fd fa0d 	bl	8003e04 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e1a8      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069f8:	4b2b      	ldr	r3, [pc, #172]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a04:	4b28      	ldr	r3, [pc, #160]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	00db      	lsls	r3, r3, #3
 8006a12:	4925      	ldr	r1, [pc, #148]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	600b      	str	r3, [r1, #0]
 8006a18:	e015      	b.n	8006a46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a1a:	4b24      	ldr	r3, [pc, #144]	; (8006aac <HAL_RCC_OscConfig+0x244>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a20:	f7fd f9f0 	bl	8003e04 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a28:	f7fd f9ec 	bl	8003e04 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e187      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d036      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	695b      	ldr	r3, [r3, #20]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d016      	beq.n	8006a88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a5a:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <HAL_RCC_OscConfig+0x248>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a60:	f7fd f9d0 	bl	8003e04 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a68:	f7fd f9cc 	bl	8003e04 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e167      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <HAL_RCC_OscConfig+0x240>)
 8006a7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a7e:	f003 0302 	and.w	r3, r3, #2
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d0f0      	beq.n	8006a68 <HAL_RCC_OscConfig+0x200>
 8006a86:	e01b      	b.n	8006ac0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a88:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <HAL_RCC_OscConfig+0x248>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a8e:	f7fd f9b9 	bl	8003e04 <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a94:	e00e      	b.n	8006ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a96:	f7fd f9b5 	bl	8003e04 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d907      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e150      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	42470000 	.word	0x42470000
 8006ab0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab4:	4b88      	ldr	r3, [pc, #544]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1ea      	bne.n	8006a96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	f000 8097 	beq.w	8006bfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ad2:	4b81      	ldr	r3, [pc, #516]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10f      	bne.n	8006afe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	4b7d      	ldr	r3, [pc, #500]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae6:	4a7c      	ldr	r2, [pc, #496]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006aec:	6413      	str	r3, [r2, #64]	; 0x40
 8006aee:	4b7a      	ldr	r3, [pc, #488]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af6:	60bb      	str	r3, [r7, #8]
 8006af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006afa:	2301      	movs	r3, #1
 8006afc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006afe:	4b77      	ldr	r3, [pc, #476]	; (8006cdc <HAL_RCC_OscConfig+0x474>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d118      	bne.n	8006b3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b0a:	4b74      	ldr	r3, [pc, #464]	; (8006cdc <HAL_RCC_OscConfig+0x474>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a73      	ldr	r2, [pc, #460]	; (8006cdc <HAL_RCC_OscConfig+0x474>)
 8006b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b16:	f7fd f975 	bl	8003e04 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b1e:	f7fd f971 	bl	8003e04 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e10c      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b30:	4b6a      	ldr	r3, [pc, #424]	; (8006cdc <HAL_RCC_OscConfig+0x474>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d106      	bne.n	8006b52 <HAL_RCC_OscConfig+0x2ea>
 8006b44:	4b64      	ldr	r3, [pc, #400]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b48:	4a63      	ldr	r2, [pc, #396]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b4a:	f043 0301 	orr.w	r3, r3, #1
 8006b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b50:	e01c      	b.n	8006b8c <HAL_RCC_OscConfig+0x324>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	2b05      	cmp	r3, #5
 8006b58:	d10c      	bne.n	8006b74 <HAL_RCC_OscConfig+0x30c>
 8006b5a:	4b5f      	ldr	r3, [pc, #380]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5e:	4a5e      	ldr	r2, [pc, #376]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b60:	f043 0304 	orr.w	r3, r3, #4
 8006b64:	6713      	str	r3, [r2, #112]	; 0x70
 8006b66:	4b5c      	ldr	r3, [pc, #368]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6a:	4a5b      	ldr	r2, [pc, #364]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b6c:	f043 0301 	orr.w	r3, r3, #1
 8006b70:	6713      	str	r3, [r2, #112]	; 0x70
 8006b72:	e00b      	b.n	8006b8c <HAL_RCC_OscConfig+0x324>
 8006b74:	4b58      	ldr	r3, [pc, #352]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b78:	4a57      	ldr	r2, [pc, #348]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b7a:	f023 0301 	bic.w	r3, r3, #1
 8006b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b80:	4b55      	ldr	r3, [pc, #340]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b84:	4a54      	ldr	r2, [pc, #336]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006b86:	f023 0304 	bic.w	r3, r3, #4
 8006b8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b94:	f7fd f936 	bl	8003e04 <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b9c:	f7fd f932 	bl	8003e04 <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e0cb      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb2:	4b49      	ldr	r3, [pc, #292]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0ee      	beq.n	8006b9c <HAL_RCC_OscConfig+0x334>
 8006bbe:	e014      	b.n	8006bea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bc0:	f7fd f920 	bl	8003e04 <HAL_GetTick>
 8006bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bc6:	e00a      	b.n	8006bde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bc8:	f7fd f91c 	bl	8003e04 <HAL_GetTick>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e0b5      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bde:	4b3e      	ldr	r3, [pc, #248]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1ee      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bea:	7dfb      	ldrb	r3, [r7, #23]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d105      	bne.n	8006bfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bf0:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf4:	4a38      	ldr	r2, [pc, #224]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006bf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80a1 	beq.w	8006d48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c06:	4b34      	ldr	r3, [pc, #208]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 030c 	and.w	r3, r3, #12
 8006c0e:	2b08      	cmp	r3, #8
 8006c10:	d05c      	beq.n	8006ccc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d141      	bne.n	8006c9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1a:	4b31      	ldr	r3, [pc, #196]	; (8006ce0 <HAL_RCC_OscConfig+0x478>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c20:	f7fd f8f0 	bl	8003e04 <HAL_GetTick>
 8006c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fd f8ec 	bl	8003e04 <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e087      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c3a:	4b27      	ldr	r3, [pc, #156]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1f0      	bne.n	8006c28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	019b      	lsls	r3, r3, #6
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5c:	085b      	lsrs	r3, r3, #1
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	041b      	lsls	r3, r3, #16
 8006c62:	431a      	orrs	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	061b      	lsls	r3, r3, #24
 8006c6a:	491b      	ldr	r1, [pc, #108]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c70:	4b1b      	ldr	r3, [pc, #108]	; (8006ce0 <HAL_RCC_OscConfig+0x478>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c76:	f7fd f8c5 	bl	8003e04 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c7e:	f7fd f8c1 	bl	8003e04 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e05c      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCC_OscConfig+0x416>
 8006c9c:	e054      	b.n	8006d48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c9e:	4b10      	ldr	r3, [pc, #64]	; (8006ce0 <HAL_RCC_OscConfig+0x478>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ca4:	f7fd f8ae 	bl	8003e04 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006caa:	e008      	b.n	8006cbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cac:	f7fd f8aa 	bl	8003e04 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d901      	bls.n	8006cbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e045      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <HAL_RCC_OscConfig+0x470>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1f0      	bne.n	8006cac <HAL_RCC_OscConfig+0x444>
 8006cca:	e03d      	b.n	8006d48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d107      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e038      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
 8006cd8:	40023800 	.word	0x40023800
 8006cdc:	40007000 	.word	0x40007000
 8006ce0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ce4:	4b1b      	ldr	r3, [pc, #108]	; (8006d54 <HAL_RCC_OscConfig+0x4ec>)
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d028      	beq.n	8006d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d121      	bne.n	8006d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d11a      	bne.n	8006d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d14:	4013      	ands	r3, r2
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d111      	bne.n	8006d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d107      	bne.n	8006d44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d001      	beq.n	8006d48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40023800 	.word	0x40023800

08006d58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0cc      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d6c:	4b68      	ldr	r3, [pc, #416]	; (8006f10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0307 	and.w	r3, r3, #7
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d90c      	bls.n	8006d94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d7a:	4b65      	ldr	r3, [pc, #404]	; (8006f10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d82:	4b63      	ldr	r3, [pc, #396]	; (8006f10 <HAL_RCC_ClockConfig+0x1b8>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d001      	beq.n	8006d94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0b8      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f003 0302 	and.w	r3, r3, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d020      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dac:	4b59      	ldr	r3, [pc, #356]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	4a58      	ldr	r2, [pc, #352]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006db6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f003 0308 	and.w	r3, r3, #8
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dc4:	4b53      	ldr	r3, [pc, #332]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	4a52      	ldr	r2, [pc, #328]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dd0:	4b50      	ldr	r3, [pc, #320]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	494d      	ldr	r1, [pc, #308]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d044      	beq.n	8006e78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d107      	bne.n	8006e06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006df6:	4b47      	ldr	r3, [pc, #284]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d119      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e07f      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d003      	beq.n	8006e16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d107      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e16:	4b3f      	ldr	r3, [pc, #252]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e06f      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e26:	4b3b      	ldr	r3, [pc, #236]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0302 	and.w	r3, r3, #2
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e067      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e36:	4b37      	ldr	r3, [pc, #220]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006e38:	689b      	ldr	r3, [r3, #8]
 8006e3a:	f023 0203 	bic.w	r2, r3, #3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	4934      	ldr	r1, [pc, #208]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e48:	f7fc ffdc 	bl	8003e04 <HAL_GetTick>
 8006e4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e4e:	e00a      	b.n	8006e66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e50:	f7fc ffd8 	bl	8003e04 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e04f      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e66:	4b2b      	ldr	r3, [pc, #172]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 020c 	and.w	r2, r3, #12
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d1eb      	bne.n	8006e50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e78:	4b25      	ldr	r3, [pc, #148]	; (8006f10 <HAL_RCC_ClockConfig+0x1b8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d20c      	bcs.n	8006ea0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e86:	4b22      	ldr	r3, [pc, #136]	; (8006f10 <HAL_RCC_ClockConfig+0x1b8>)
 8006e88:	683a      	ldr	r2, [r7, #0]
 8006e8a:	b2d2      	uxtb	r2, r2
 8006e8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e8e:	4b20      	ldr	r3, [pc, #128]	; (8006f10 <HAL_RCC_ClockConfig+0x1b8>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e032      	b.n	8006f06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d008      	beq.n	8006ebe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006eac:	4b19      	ldr	r3, [pc, #100]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	4916      	ldr	r1, [pc, #88]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0308 	and.w	r3, r3, #8
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d009      	beq.n	8006ede <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eca:	4b12      	ldr	r3, [pc, #72]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	490e      	ldr	r1, [pc, #56]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ede:	f000 f821 	bl	8006f24 <HAL_RCC_GetSysClockFreq>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <HAL_RCC_ClockConfig+0x1bc>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	091b      	lsrs	r3, r3, #4
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	490a      	ldr	r1, [pc, #40]	; (8006f18 <HAL_RCC_ClockConfig+0x1c0>)
 8006ef0:	5ccb      	ldrb	r3, [r1, r3]
 8006ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ef6:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <HAL_RCC_ClockConfig+0x1c4>)
 8006ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006efa:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <HAL_RCC_ClockConfig+0x1c8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fc ff3c 	bl	8003d7c <HAL_InitTick>

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40023c00 	.word	0x40023c00
 8006f14:	40023800 	.word	0x40023800
 8006f18:	0800a0a4 	.word	0x0800a0a4
 8006f1c:	200000d8 	.word	0x200000d8
 8006f20:	200000dc 	.word	0x200000dc

08006f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f28:	b090      	sub	sp, #64	; 0x40
 8006f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f30:	2300      	movs	r3, #0
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f34:	2300      	movs	r3, #0
 8006f36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f3c:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 030c 	and.w	r3, r3, #12
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d00d      	beq.n	8006f64 <HAL_RCC_GetSysClockFreq+0x40>
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	f200 80a1 	bhi.w	8007090 <HAL_RCC_GetSysClockFreq+0x16c>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <HAL_RCC_GetSysClockFreq+0x34>
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d003      	beq.n	8006f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8006f56:	e09b      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f58:	4b53      	ldr	r3, [pc, #332]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f5a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006f5c:	e09b      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f5e:	4b53      	ldr	r3, [pc, #332]	; (80070ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006f60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f62:	e098      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f64:	4b4f      	ldr	r3, [pc, #316]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f6e:	4b4d      	ldr	r3, [pc, #308]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d028      	beq.n	8006fcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f7a:	4b4a      	ldr	r3, [pc, #296]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	099b      	lsrs	r3, r3, #6
 8006f80:	2200      	movs	r2, #0
 8006f82:	623b      	str	r3, [r7, #32]
 8006f84:	627a      	str	r2, [r7, #36]	; 0x24
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	4b47      	ldr	r3, [pc, #284]	; (80070ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006f90:	fb03 f201 	mul.w	r2, r3, r1
 8006f94:	2300      	movs	r3, #0
 8006f96:	fb00 f303 	mul.w	r3, r0, r3
 8006f9a:	4413      	add	r3, r2
 8006f9c:	4a43      	ldr	r2, [pc, #268]	; (80070ac <HAL_RCC_GetSysClockFreq+0x188>)
 8006f9e:	fba0 1202 	umull	r1, r2, r0, r2
 8006fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fa4:	460a      	mov	r2, r1
 8006fa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006faa:	4413      	add	r3, r2
 8006fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	61bb      	str	r3, [r7, #24]
 8006fb4:	61fa      	str	r2, [r7, #28]
 8006fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006fbe:	f7f9 fe25 	bl	8000c0c <__aeabi_uldivmod>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fca:	e053      	b.n	8007074 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fcc:	4b35      	ldr	r3, [pc, #212]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	099b      	lsrs	r3, r3, #6
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	617a      	str	r2, [r7, #20]
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006fde:	f04f 0b00 	mov.w	fp, #0
 8006fe2:	4652      	mov	r2, sl
 8006fe4:	465b      	mov	r3, fp
 8006fe6:	f04f 0000 	mov.w	r0, #0
 8006fea:	f04f 0100 	mov.w	r1, #0
 8006fee:	0159      	lsls	r1, r3, #5
 8006ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ff4:	0150      	lsls	r0, r2, #5
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	ebb2 080a 	subs.w	r8, r2, sl
 8006ffe:	eb63 090b 	sbc.w	r9, r3, fp
 8007002:	f04f 0200 	mov.w	r2, #0
 8007006:	f04f 0300 	mov.w	r3, #0
 800700a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800700e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007012:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007016:	ebb2 0408 	subs.w	r4, r2, r8
 800701a:	eb63 0509 	sbc.w	r5, r3, r9
 800701e:	f04f 0200 	mov.w	r2, #0
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	00eb      	lsls	r3, r5, #3
 8007028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800702c:	00e2      	lsls	r2, r4, #3
 800702e:	4614      	mov	r4, r2
 8007030:	461d      	mov	r5, r3
 8007032:	eb14 030a 	adds.w	r3, r4, sl
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	eb45 030b 	adc.w	r3, r5, fp
 800703c:	607b      	str	r3, [r7, #4]
 800703e:	f04f 0200 	mov.w	r2, #0
 8007042:	f04f 0300 	mov.w	r3, #0
 8007046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800704a:	4629      	mov	r1, r5
 800704c:	028b      	lsls	r3, r1, #10
 800704e:	4621      	mov	r1, r4
 8007050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007054:	4621      	mov	r1, r4
 8007056:	028a      	lsls	r2, r1, #10
 8007058:	4610      	mov	r0, r2
 800705a:	4619      	mov	r1, r3
 800705c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705e:	2200      	movs	r2, #0
 8007060:	60bb      	str	r3, [r7, #8]
 8007062:	60fa      	str	r2, [r7, #12]
 8007064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007068:	f7f9 fdd0 	bl	8000c0c <__aeabi_uldivmod>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4613      	mov	r3, r2
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007074:	4b0b      	ldr	r3, [pc, #44]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	0c1b      	lsrs	r3, r3, #16
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	3301      	adds	r3, #1
 8007080:	005b      	lsls	r3, r3, #1
 8007082:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	fbb2 f3f3 	udiv	r3, r2, r3
 800708c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800708e:	e002      	b.n	8007096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007090:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007092:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007098:	4618      	mov	r0, r3
 800709a:	3740      	adds	r7, #64	; 0x40
 800709c:	46bd      	mov	sp, r7
 800709e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070a2:	bf00      	nop
 80070a4:	40023800 	.word	0x40023800
 80070a8:	00f42400 	.word	0x00f42400
 80070ac:	017d7840 	.word	0x017d7840

080070b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070b4:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070b6:	681b      	ldr	r3, [r3, #0]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	200000d8 	.word	0x200000d8

080070c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070cc:	f7ff fff0 	bl	80070b0 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	0a9b      	lsrs	r3, r3, #10
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4903      	ldr	r1, [pc, #12]	; (80070ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40023800 	.word	0x40023800
 80070ec:	0800a0b4 	.word	0x0800a0b4

080070f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e07b      	b.n	80071fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	d108      	bne.n	800711c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007112:	d009      	beq.n	8007128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	61da      	str	r2, [r3, #28]
 800711a:	e005      	b.n	8007128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d106      	bne.n	8007148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7fc f996 	bl	8003474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2202      	movs	r2, #2
 800714c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800715e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800717a:	431a      	orrs	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	431a      	orrs	r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071a2:	431a      	orrs	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ac:	ea42 0103 	orr.w	r1, r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	430a      	orrs	r2, r1
 80071be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	699b      	ldr	r3, [r3, #24]
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	f003 0104 	and.w	r1, r3, #4
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	f003 0210 	and.w	r2, r3, #16
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	69da      	ldr	r2, [r3, #28]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3708      	adds	r7, #8
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e041      	b.n	8007298 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7fc fcd9 	bl	8003be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2202      	movs	r2, #2
 8007232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3304      	adds	r3, #4
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f000 fbc9 	bl	80079d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2201      	movs	r2, #1
 800724a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2201      	movs	r2, #1
 800727a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3708      	adds	r7, #8
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d001      	beq.n	80072b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e04e      	b.n	8007356 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68da      	ldr	r2, [r3, #12]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0201 	orr.w	r2, r2, #1
 80072ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a23      	ldr	r2, [pc, #140]	; (8007364 <HAL_TIM_Base_Start_IT+0xc4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d022      	beq.n	8007320 <HAL_TIM_Base_Start_IT+0x80>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e2:	d01d      	beq.n	8007320 <HAL_TIM_Base_Start_IT+0x80>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a1f      	ldr	r2, [pc, #124]	; (8007368 <HAL_TIM_Base_Start_IT+0xc8>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d018      	beq.n	8007320 <HAL_TIM_Base_Start_IT+0x80>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a1e      	ldr	r2, [pc, #120]	; (800736c <HAL_TIM_Base_Start_IT+0xcc>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d013      	beq.n	8007320 <HAL_TIM_Base_Start_IT+0x80>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <HAL_TIM_Base_Start_IT+0xd0>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d00e      	beq.n	8007320 <HAL_TIM_Base_Start_IT+0x80>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <HAL_TIM_Base_Start_IT+0xd4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d009      	beq.n	8007320 <HAL_TIM_Base_Start_IT+0x80>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a19      	ldr	r2, [pc, #100]	; (8007378 <HAL_TIM_Base_Start_IT+0xd8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <HAL_TIM_Base_Start_IT+0x80>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a18      	ldr	r2, [pc, #96]	; (800737c <HAL_TIM_Base_Start_IT+0xdc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d111      	bne.n	8007344 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2b06      	cmp	r3, #6
 8007330:	d010      	beq.n	8007354 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f042 0201 	orr.w	r2, r2, #1
 8007340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007342:	e007      	b.n	8007354 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007354:	2300      	movs	r3, #0
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	40010000 	.word	0x40010000
 8007368:	40000400 	.word	0x40000400
 800736c:	40000800 	.word	0x40000800
 8007370:	40000c00 	.word	0x40000c00
 8007374:	40010400 	.word	0x40010400
 8007378:	40014000 	.word	0x40014000
 800737c:	40001800 	.word	0x40001800

08007380 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e097      	b.n	80074c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d106      	bne.n	80073ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7fc fb9d 	bl	8003ae8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2202      	movs	r2, #2
 80073b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	6812      	ldr	r2, [r2, #0]
 80073c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073c4:	f023 0307 	bic.w	r3, r3, #7
 80073c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f000 faff 	bl	80079d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007402:	f023 0303 	bic.w	r3, r3, #3
 8007406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	021b      	lsls	r3, r3, #8
 8007412:	4313      	orrs	r3, r2
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	4313      	orrs	r3, r2
 8007418:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007420:	f023 030c 	bic.w	r3, r3, #12
 8007424:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800742c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007430:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68da      	ldr	r2, [r3, #12]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	69db      	ldr	r3, [r3, #28]
 800743a:	021b      	lsls	r3, r3, #8
 800743c:	4313      	orrs	r3, r2
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	4313      	orrs	r3, r2
 8007442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	691b      	ldr	r3, [r3, #16]
 8007448:	011a      	lsls	r2, r3, #4
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	031b      	lsls	r3, r3, #12
 8007450:	4313      	orrs	r3, r2
 8007452:	693a      	ldr	r2, [r7, #16]
 8007454:	4313      	orrs	r3, r2
 8007456:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800745e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007466:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	011b      	lsls	r3, r3, #4
 8007472:	4313      	orrs	r3, r2
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	4313      	orrs	r3, r2
 8007478:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3718      	adds	r7, #24
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d110      	bne.n	800751e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d102      	bne.n	8007508 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007502:	7b7b      	ldrb	r3, [r7, #13]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d001      	beq.n	800750c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	e069      	b.n	80075e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2202      	movs	r2, #2
 8007518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800751c:	e031      	b.n	8007582 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	2b04      	cmp	r3, #4
 8007522:	d110      	bne.n	8007546 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d102      	bne.n	8007530 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800752a:	7b3b      	ldrb	r3, [r7, #12]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d001      	beq.n	8007534 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e055      	b.n	80075e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007544:	e01d      	b.n	8007582 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	2b01      	cmp	r3, #1
 800754a:	d108      	bne.n	800755e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800754c:	7bbb      	ldrb	r3, [r7, #14]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d105      	bne.n	800755e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007552:	7b7b      	ldrb	r3, [r7, #13]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d102      	bne.n	800755e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007558:	7b3b      	ldrb	r3, [r7, #12]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d001      	beq.n	8007562 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800755e:	2301      	movs	r3, #1
 8007560:	e03e      	b.n	80075e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2202      	movs	r2, #2
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2202      	movs	r2, #2
 800756e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2202      	movs	r2, #2
 8007576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2202      	movs	r2, #2
 800757e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_TIM_Encoder_Start+0xc4>
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2b04      	cmp	r3, #4
 800758c:	d008      	beq.n	80075a0 <HAL_TIM_Encoder_Start+0xd4>
 800758e:	e00f      	b.n	80075b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2201      	movs	r2, #1
 8007596:	2100      	movs	r1, #0
 8007598:	4618      	mov	r0, r3
 800759a:	f000 fb57 	bl	8007c4c <TIM_CCxChannelCmd>
      break;
 800759e:	e016      	b.n	80075ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2201      	movs	r2, #1
 80075a6:	2104      	movs	r1, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fb4f 	bl	8007c4c <TIM_CCxChannelCmd>
      break;
 80075ae:	e00e      	b.n	80075ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2201      	movs	r2, #1
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 fb47 	bl	8007c4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2201      	movs	r2, #1
 80075c4:	2104      	movs	r1, #4
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fb40 	bl	8007c4c <TIM_CCxChannelCmd>
      break;
 80075cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 0201 	orr.w	r2, r2, #1
 80075dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80075de:	2300      	movs	r3, #0
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3710      	adds	r7, #16
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b02      	cmp	r3, #2
 80075fc:	d122      	bne.n	8007644 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b02      	cmp	r3, #2
 800760a:	d11b      	bne.n	8007644 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f06f 0202 	mvn.w	r2, #2
 8007614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 f9b5 	bl	800799a <HAL_TIM_IC_CaptureCallback>
 8007630:	e005      	b.n	800763e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f9a7 	bl	8007986 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 f9b8 	bl	80079ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0304 	and.w	r3, r3, #4
 800764e:	2b04      	cmp	r3, #4
 8007650:	d122      	bne.n	8007698 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0304 	and.w	r3, r3, #4
 800765c:	2b04      	cmp	r3, #4
 800765e:	d11b      	bne.n	8007698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0204 	mvn.w	r2, #4
 8007668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2202      	movs	r2, #2
 800766e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	699b      	ldr	r3, [r3, #24]
 8007676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 f98b 	bl	800799a <HAL_TIM_IC_CaptureCallback>
 8007684:	e005      	b.n	8007692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 f97d 	bl	8007986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f98e 	bl	80079ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 0308 	and.w	r3, r3, #8
 80076a2:	2b08      	cmp	r3, #8
 80076a4:	d122      	bne.n	80076ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f003 0308 	and.w	r3, r3, #8
 80076b0:	2b08      	cmp	r3, #8
 80076b2:	d11b      	bne.n	80076ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f06f 0208 	mvn.w	r2, #8
 80076bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2204      	movs	r2, #4
 80076c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	f003 0303 	and.w	r3, r3, #3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f961 	bl	800799a <HAL_TIM_IC_CaptureCallback>
 80076d8:	e005      	b.n	80076e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 f953 	bl	8007986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f964 	bl	80079ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b10      	cmp	r3, #16
 80076f8:	d122      	bne.n	8007740 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b10      	cmp	r3, #16
 8007706:	d11b      	bne.n	8007740 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0210 	mvn.w	r2, #16
 8007710:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2208      	movs	r2, #8
 8007716:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	69db      	ldr	r3, [r3, #28]
 800771e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f937 	bl	800799a <HAL_TIM_IC_CaptureCallback>
 800772c:	e005      	b.n	800773a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f929 	bl	8007986 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f93a 	bl	80079ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	f003 0301 	and.w	r3, r3, #1
 800774a:	2b01      	cmp	r3, #1
 800774c:	d10e      	bne.n	800776c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	2b01      	cmp	r3, #1
 800775a:	d107      	bne.n	800776c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f06f 0201 	mvn.w	r2, #1
 8007764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fa fcfe 	bl	8002168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007776:	2b80      	cmp	r3, #128	; 0x80
 8007778:	d10e      	bne.n	8007798 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007784:	2b80      	cmp	r3, #128	; 0x80
 8007786:	d107      	bne.n	8007798 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 fb06 	bl	8007da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a2:	2b40      	cmp	r3, #64	; 0x40
 80077a4:	d10e      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077b0:	2b40      	cmp	r3, #64	; 0x40
 80077b2:	d107      	bne.n	80077c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f8ff 	bl	80079c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	f003 0320 	and.w	r3, r3, #32
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d10e      	bne.n	80077f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f003 0320 	and.w	r3, r3, #32
 80077dc:	2b20      	cmp	r3, #32
 80077de:	d107      	bne.n	80077f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f06f 0220 	mvn.w	r2, #32
 80077e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fad0 	bl	8007d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_TIM_ConfigClockSource+0x1c>
 8007810:	2302      	movs	r3, #2
 8007812:	e0b4      	b.n	800797e <HAL_TIM_ConfigClockSource+0x186>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007832:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800783a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784c:	d03e      	beq.n	80078cc <HAL_TIM_ConfigClockSource+0xd4>
 800784e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007852:	f200 8087 	bhi.w	8007964 <HAL_TIM_ConfigClockSource+0x16c>
 8007856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785a:	f000 8086 	beq.w	800796a <HAL_TIM_ConfigClockSource+0x172>
 800785e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007862:	d87f      	bhi.n	8007964 <HAL_TIM_ConfigClockSource+0x16c>
 8007864:	2b70      	cmp	r3, #112	; 0x70
 8007866:	d01a      	beq.n	800789e <HAL_TIM_ConfigClockSource+0xa6>
 8007868:	2b70      	cmp	r3, #112	; 0x70
 800786a:	d87b      	bhi.n	8007964 <HAL_TIM_ConfigClockSource+0x16c>
 800786c:	2b60      	cmp	r3, #96	; 0x60
 800786e:	d050      	beq.n	8007912 <HAL_TIM_ConfigClockSource+0x11a>
 8007870:	2b60      	cmp	r3, #96	; 0x60
 8007872:	d877      	bhi.n	8007964 <HAL_TIM_ConfigClockSource+0x16c>
 8007874:	2b50      	cmp	r3, #80	; 0x50
 8007876:	d03c      	beq.n	80078f2 <HAL_TIM_ConfigClockSource+0xfa>
 8007878:	2b50      	cmp	r3, #80	; 0x50
 800787a:	d873      	bhi.n	8007964 <HAL_TIM_ConfigClockSource+0x16c>
 800787c:	2b40      	cmp	r3, #64	; 0x40
 800787e:	d058      	beq.n	8007932 <HAL_TIM_ConfigClockSource+0x13a>
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	d86f      	bhi.n	8007964 <HAL_TIM_ConfigClockSource+0x16c>
 8007884:	2b30      	cmp	r3, #48	; 0x30
 8007886:	d064      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0x15a>
 8007888:	2b30      	cmp	r3, #48	; 0x30
 800788a:	d86b      	bhi.n	8007964 <HAL_TIM_ConfigClockSource+0x16c>
 800788c:	2b20      	cmp	r3, #32
 800788e:	d060      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0x15a>
 8007890:	2b20      	cmp	r3, #32
 8007892:	d867      	bhi.n	8007964 <HAL_TIM_ConfigClockSource+0x16c>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d05c      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0x15a>
 8007898:	2b10      	cmp	r3, #16
 800789a:	d05a      	beq.n	8007952 <HAL_TIM_ConfigClockSource+0x15a>
 800789c:	e062      	b.n	8007964 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6899      	ldr	r1, [r3, #8]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	f000 f9ad 	bl	8007c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	609a      	str	r2, [r3, #8]
      break;
 80078ca:	e04f      	b.n	800796c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6818      	ldr	r0, [r3, #0]
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	6899      	ldr	r1, [r3, #8]
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	685a      	ldr	r2, [r3, #4]
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	68db      	ldr	r3, [r3, #12]
 80078dc:	f000 f996 	bl	8007c0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	689a      	ldr	r2, [r3, #8]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078ee:	609a      	str	r2, [r3, #8]
      break;
 80078f0:	e03c      	b.n	800796c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6818      	ldr	r0, [r3, #0]
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6859      	ldr	r1, [r3, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	461a      	mov	r2, r3
 8007900:	f000 f90a 	bl	8007b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2150      	movs	r1, #80	; 0x50
 800790a:	4618      	mov	r0, r3
 800790c:	f000 f963 	bl	8007bd6 <TIM_ITRx_SetConfig>
      break;
 8007910:	e02c      	b.n	800796c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	6859      	ldr	r1, [r3, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	461a      	mov	r2, r3
 8007920:	f000 f929 	bl	8007b76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2160      	movs	r1, #96	; 0x60
 800792a:	4618      	mov	r0, r3
 800792c:	f000 f953 	bl	8007bd6 <TIM_ITRx_SetConfig>
      break;
 8007930:	e01c      	b.n	800796c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	6859      	ldr	r1, [r3, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	461a      	mov	r2, r3
 8007940:	f000 f8ea 	bl	8007b18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2140      	movs	r1, #64	; 0x40
 800794a:	4618      	mov	r0, r3
 800794c:	f000 f943 	bl	8007bd6 <TIM_ITRx_SetConfig>
      break;
 8007950:	e00c      	b.n	800796c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4619      	mov	r1, r3
 800795c:	4610      	mov	r0, r2
 800795e:	f000 f93a 	bl	8007bd6 <TIM_ITRx_SetConfig>
      break;
 8007962:	e003      	b.n	800796c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	73fb      	strb	r3, [r7, #15]
      break;
 8007968:	e000      	b.n	800796c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800796a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079a2:	bf00      	nop
 80079a4:	370c      	adds	r7, #12
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079ae:	b480      	push	{r7}
 80079b0:	b083      	sub	sp, #12
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079b6:	bf00      	nop
 80079b8:	370c      	adds	r7, #12
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
	...

080079d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a40      	ldr	r2, [pc, #256]	; (8007aec <TIM_Base_SetConfig+0x114>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d013      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079f6:	d00f      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a3d      	ldr	r2, [pc, #244]	; (8007af0 <TIM_Base_SetConfig+0x118>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d00b      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	4a3c      	ldr	r2, [pc, #240]	; (8007af4 <TIM_Base_SetConfig+0x11c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d007      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a3b      	ldr	r2, [pc, #236]	; (8007af8 <TIM_Base_SetConfig+0x120>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_Base_SetConfig+0x40>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a3a      	ldr	r2, [pc, #232]	; (8007afc <TIM_Base_SetConfig+0x124>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d108      	bne.n	8007a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	4a2f      	ldr	r2, [pc, #188]	; (8007aec <TIM_Base_SetConfig+0x114>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d02b      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a38:	d027      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a2c      	ldr	r2, [pc, #176]	; (8007af0 <TIM_Base_SetConfig+0x118>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d023      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a2b      	ldr	r2, [pc, #172]	; (8007af4 <TIM_Base_SetConfig+0x11c>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d01f      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a2a      	ldr	r2, [pc, #168]	; (8007af8 <TIM_Base_SetConfig+0x120>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d01b      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a29      	ldr	r2, [pc, #164]	; (8007afc <TIM_Base_SetConfig+0x124>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d017      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a28      	ldr	r2, [pc, #160]	; (8007b00 <TIM_Base_SetConfig+0x128>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d013      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a27      	ldr	r2, [pc, #156]	; (8007b04 <TIM_Base_SetConfig+0x12c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d00f      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a26      	ldr	r2, [pc, #152]	; (8007b08 <TIM_Base_SetConfig+0x130>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d00b      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a25      	ldr	r2, [pc, #148]	; (8007b0c <TIM_Base_SetConfig+0x134>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d007      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	4a24      	ldr	r2, [pc, #144]	; (8007b10 <TIM_Base_SetConfig+0x138>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d003      	beq.n	8007a8a <TIM_Base_SetConfig+0xb2>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	4a23      	ldr	r2, [pc, #140]	; (8007b14 <TIM_Base_SetConfig+0x13c>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d108      	bne.n	8007a9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	689a      	ldr	r2, [r3, #8]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <TIM_Base_SetConfig+0x114>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d003      	beq.n	8007ad0 <TIM_Base_SetConfig+0xf8>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a0c      	ldr	r2, [pc, #48]	; (8007afc <TIM_Base_SetConfig+0x124>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d103      	bne.n	8007ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2201      	movs	r2, #1
 8007adc:	615a      	str	r2, [r3, #20]
}
 8007ade:	bf00      	nop
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	40010000 	.word	0x40010000
 8007af0:	40000400 	.word	0x40000400
 8007af4:	40000800 	.word	0x40000800
 8007af8:	40000c00 	.word	0x40000c00
 8007afc:	40010400 	.word	0x40010400
 8007b00:	40014000 	.word	0x40014000
 8007b04:	40014400 	.word	0x40014400
 8007b08:	40014800 	.word	0x40014800
 8007b0c:	40001800 	.word	0x40001800
 8007b10:	40001c00 	.word	0x40001c00
 8007b14:	40002000 	.word	0x40002000

08007b18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	f023 0201 	bic.w	r2, r3, #1
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	011b      	lsls	r3, r3, #4
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f023 030a 	bic.w	r3, r3, #10
 8007b54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b76:	b480      	push	{r7}
 8007b78:	b087      	sub	sp, #28
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	f023 0210 	bic.w	r2, r3, #16
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a1b      	ldr	r3, [r3, #32]
 8007b98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ba0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	031b      	lsls	r3, r3, #12
 8007ba6:	697a      	ldr	r2, [r7, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007bb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	011b      	lsls	r3, r3, #4
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	697a      	ldr	r2, [r7, #20]
 8007bc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bd6:	b480      	push	{r7}
 8007bd8:	b085      	sub	sp, #20
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bee:	683a      	ldr	r2, [r7, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	f043 0307 	orr.w	r3, r3, #7
 8007bf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	609a      	str	r2, [r3, #8]
}
 8007c00:	bf00      	nop
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	021a      	lsls	r2, r3, #8
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	697a      	ldr	r2, [r7, #20]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	697a      	ldr	r2, [r7, #20]
 8007c3e:	609a      	str	r2, [r3, #8]
}
 8007c40:	bf00      	nop
 8007c42:	371c      	adds	r7, #28
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 031f 	and.w	r3, r3, #31
 8007c5e:	2201      	movs	r2, #1
 8007c60:	fa02 f303 	lsl.w	r3, r2, r3
 8007c64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6a1a      	ldr	r2, [r3, #32]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	401a      	ands	r2, r3
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a1a      	ldr	r2, [r3, #32]
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	fa01 f303 	lsl.w	r3, r1, r3
 8007c84:	431a      	orrs	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
	...

08007c98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b085      	sub	sp, #20
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e05a      	b.n	8007d66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d022      	beq.n	8007d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfc:	d01d      	beq.n	8007d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a1d      	ldr	r2, [pc, #116]	; (8007d78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d018      	beq.n	8007d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a1b      	ldr	r2, [pc, #108]	; (8007d7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d013      	beq.n	8007d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a1a      	ldr	r2, [pc, #104]	; (8007d80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d00e      	beq.n	8007d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a18      	ldr	r2, [pc, #96]	; (8007d84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d009      	beq.n	8007d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a17      	ldr	r2, [pc, #92]	; (8007d88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d004      	beq.n	8007d3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a15      	ldr	r2, [pc, #84]	; (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d10c      	bne.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40000400 	.word	0x40000400
 8007d7c:	40000800 	.word	0x40000800
 8007d80:	40000c00 	.word	0x40000c00
 8007d84:	40010400 	.word	0x40010400
 8007d88:	40014000 	.word	0x40014000
 8007d8c:	40001800 	.word	0x40001800

08007d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dac:	bf00      	nop
 8007dae:	370c      	adds	r7, #12
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <__errno>:
 8007db8:	4b01      	ldr	r3, [pc, #4]	; (8007dc0 <__errno+0x8>)
 8007dba:	6818      	ldr	r0, [r3, #0]
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	200000e4 	.word	0x200000e4

08007dc4 <__libc_init_array>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4d0d      	ldr	r5, [pc, #52]	; (8007dfc <__libc_init_array+0x38>)
 8007dc8:	4c0d      	ldr	r4, [pc, #52]	; (8007e00 <__libc_init_array+0x3c>)
 8007dca:	1b64      	subs	r4, r4, r5
 8007dcc:	10a4      	asrs	r4, r4, #2
 8007dce:	2600      	movs	r6, #0
 8007dd0:	42a6      	cmp	r6, r4
 8007dd2:	d109      	bne.n	8007de8 <__libc_init_array+0x24>
 8007dd4:	4d0b      	ldr	r5, [pc, #44]	; (8007e04 <__libc_init_array+0x40>)
 8007dd6:	4c0c      	ldr	r4, [pc, #48]	; (8007e08 <__libc_init_array+0x44>)
 8007dd8:	f002 f83a 	bl	8009e50 <_init>
 8007ddc:	1b64      	subs	r4, r4, r5
 8007dde:	10a4      	asrs	r4, r4, #2
 8007de0:	2600      	movs	r6, #0
 8007de2:	42a6      	cmp	r6, r4
 8007de4:	d105      	bne.n	8007df2 <__libc_init_array+0x2e>
 8007de6:	bd70      	pop	{r4, r5, r6, pc}
 8007de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dec:	4798      	blx	r3
 8007dee:	3601      	adds	r6, #1
 8007df0:	e7ee      	b.n	8007dd0 <__libc_init_array+0xc>
 8007df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df6:	4798      	blx	r3
 8007df8:	3601      	adds	r6, #1
 8007dfa:	e7f2      	b.n	8007de2 <__libc_init_array+0x1e>
 8007dfc:	0800a5a8 	.word	0x0800a5a8
 8007e00:	0800a5a8 	.word	0x0800a5a8
 8007e04:	0800a5a8 	.word	0x0800a5a8
 8007e08:	0800a5ac 	.word	0x0800a5ac

08007e0c <memset>:
 8007e0c:	4402      	add	r2, r0
 8007e0e:	4603      	mov	r3, r0
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d100      	bne.n	8007e16 <memset+0xa>
 8007e14:	4770      	bx	lr
 8007e16:	f803 1b01 	strb.w	r1, [r3], #1
 8007e1a:	e7f9      	b.n	8007e10 <memset+0x4>

08007e1c <iprintf>:
 8007e1c:	b40f      	push	{r0, r1, r2, r3}
 8007e1e:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <iprintf+0x2c>)
 8007e20:	b513      	push	{r0, r1, r4, lr}
 8007e22:	681c      	ldr	r4, [r3, #0]
 8007e24:	b124      	cbz	r4, 8007e30 <iprintf+0x14>
 8007e26:	69a3      	ldr	r3, [r4, #24]
 8007e28:	b913      	cbnz	r3, 8007e30 <iprintf+0x14>
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	f000 fa5e 	bl	80082ec <__sinit>
 8007e30:	ab05      	add	r3, sp, #20
 8007e32:	9a04      	ldr	r2, [sp, #16]
 8007e34:	68a1      	ldr	r1, [r4, #8]
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	4620      	mov	r0, r4
 8007e3a:	f000 fc67 	bl	800870c <_vfiprintf_r>
 8007e3e:	b002      	add	sp, #8
 8007e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e44:	b004      	add	sp, #16
 8007e46:	4770      	bx	lr
 8007e48:	200000e4 	.word	0x200000e4

08007e4c <_puts_r>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	460e      	mov	r6, r1
 8007e50:	4605      	mov	r5, r0
 8007e52:	b118      	cbz	r0, 8007e5c <_puts_r+0x10>
 8007e54:	6983      	ldr	r3, [r0, #24]
 8007e56:	b90b      	cbnz	r3, 8007e5c <_puts_r+0x10>
 8007e58:	f000 fa48 	bl	80082ec <__sinit>
 8007e5c:	69ab      	ldr	r3, [r5, #24]
 8007e5e:	68ac      	ldr	r4, [r5, #8]
 8007e60:	b913      	cbnz	r3, 8007e68 <_puts_r+0x1c>
 8007e62:	4628      	mov	r0, r5
 8007e64:	f000 fa42 	bl	80082ec <__sinit>
 8007e68:	4b2c      	ldr	r3, [pc, #176]	; (8007f1c <_puts_r+0xd0>)
 8007e6a:	429c      	cmp	r4, r3
 8007e6c:	d120      	bne.n	8007eb0 <_puts_r+0x64>
 8007e6e:	686c      	ldr	r4, [r5, #4]
 8007e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e72:	07db      	lsls	r3, r3, #31
 8007e74:	d405      	bmi.n	8007e82 <_puts_r+0x36>
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	0598      	lsls	r0, r3, #22
 8007e7a:	d402      	bmi.n	8007e82 <_puts_r+0x36>
 8007e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e7e:	f000 fad3 	bl	8008428 <__retarget_lock_acquire_recursive>
 8007e82:	89a3      	ldrh	r3, [r4, #12]
 8007e84:	0719      	lsls	r1, r3, #28
 8007e86:	d51d      	bpl.n	8007ec4 <_puts_r+0x78>
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	b1db      	cbz	r3, 8007ec4 <_puts_r+0x78>
 8007e8c:	3e01      	subs	r6, #1
 8007e8e:	68a3      	ldr	r3, [r4, #8]
 8007e90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e94:	3b01      	subs	r3, #1
 8007e96:	60a3      	str	r3, [r4, #8]
 8007e98:	bb39      	cbnz	r1, 8007eea <_puts_r+0x9e>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da38      	bge.n	8007f10 <_puts_r+0xc4>
 8007e9e:	4622      	mov	r2, r4
 8007ea0:	210a      	movs	r1, #10
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 f848 	bl	8007f38 <__swbuf_r>
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d011      	beq.n	8007ed0 <_puts_r+0x84>
 8007eac:	250a      	movs	r5, #10
 8007eae:	e011      	b.n	8007ed4 <_puts_r+0x88>
 8007eb0:	4b1b      	ldr	r3, [pc, #108]	; (8007f20 <_puts_r+0xd4>)
 8007eb2:	429c      	cmp	r4, r3
 8007eb4:	d101      	bne.n	8007eba <_puts_r+0x6e>
 8007eb6:	68ac      	ldr	r4, [r5, #8]
 8007eb8:	e7da      	b.n	8007e70 <_puts_r+0x24>
 8007eba:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <_puts_r+0xd8>)
 8007ebc:	429c      	cmp	r4, r3
 8007ebe:	bf08      	it	eq
 8007ec0:	68ec      	ldreq	r4, [r5, #12]
 8007ec2:	e7d5      	b.n	8007e70 <_puts_r+0x24>
 8007ec4:	4621      	mov	r1, r4
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 f888 	bl	8007fdc <__swsetup_r>
 8007ecc:	2800      	cmp	r0, #0
 8007ece:	d0dd      	beq.n	8007e8c <_puts_r+0x40>
 8007ed0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ed6:	07da      	lsls	r2, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_puts_r+0x9a>
 8007eda:	89a3      	ldrh	r3, [r4, #12]
 8007edc:	059b      	lsls	r3, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_puts_r+0x9a>
 8007ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ee2:	f000 faa2 	bl	800842a <__retarget_lock_release_recursive>
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	da04      	bge.n	8007ef8 <_puts_r+0xac>
 8007eee:	69a2      	ldr	r2, [r4, #24]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	dc06      	bgt.n	8007f02 <_puts_r+0xb6>
 8007ef4:	290a      	cmp	r1, #10
 8007ef6:	d004      	beq.n	8007f02 <_puts_r+0xb6>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	1c5a      	adds	r2, r3, #1
 8007efc:	6022      	str	r2, [r4, #0]
 8007efe:	7019      	strb	r1, [r3, #0]
 8007f00:	e7c5      	b.n	8007e8e <_puts_r+0x42>
 8007f02:	4622      	mov	r2, r4
 8007f04:	4628      	mov	r0, r5
 8007f06:	f000 f817 	bl	8007f38 <__swbuf_r>
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d1bf      	bne.n	8007e8e <_puts_r+0x42>
 8007f0e:	e7df      	b.n	8007ed0 <_puts_r+0x84>
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	250a      	movs	r5, #10
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	6022      	str	r2, [r4, #0]
 8007f18:	701d      	strb	r5, [r3, #0]
 8007f1a:	e7db      	b.n	8007ed4 <_puts_r+0x88>
 8007f1c:	0800a0e8 	.word	0x0800a0e8
 8007f20:	0800a108 	.word	0x0800a108
 8007f24:	0800a0c8 	.word	0x0800a0c8

08007f28 <puts>:
 8007f28:	4b02      	ldr	r3, [pc, #8]	; (8007f34 <puts+0xc>)
 8007f2a:	4601      	mov	r1, r0
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	f7ff bf8d 	b.w	8007e4c <_puts_r>
 8007f32:	bf00      	nop
 8007f34:	200000e4 	.word	0x200000e4

08007f38 <__swbuf_r>:
 8007f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3a:	460e      	mov	r6, r1
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	4605      	mov	r5, r0
 8007f40:	b118      	cbz	r0, 8007f4a <__swbuf_r+0x12>
 8007f42:	6983      	ldr	r3, [r0, #24]
 8007f44:	b90b      	cbnz	r3, 8007f4a <__swbuf_r+0x12>
 8007f46:	f000 f9d1 	bl	80082ec <__sinit>
 8007f4a:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <__swbuf_r+0x98>)
 8007f4c:	429c      	cmp	r4, r3
 8007f4e:	d12b      	bne.n	8007fa8 <__swbuf_r+0x70>
 8007f50:	686c      	ldr	r4, [r5, #4]
 8007f52:	69a3      	ldr	r3, [r4, #24]
 8007f54:	60a3      	str	r3, [r4, #8]
 8007f56:	89a3      	ldrh	r3, [r4, #12]
 8007f58:	071a      	lsls	r2, r3, #28
 8007f5a:	d52f      	bpl.n	8007fbc <__swbuf_r+0x84>
 8007f5c:	6923      	ldr	r3, [r4, #16]
 8007f5e:	b36b      	cbz	r3, 8007fbc <__swbuf_r+0x84>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	6820      	ldr	r0, [r4, #0]
 8007f64:	1ac0      	subs	r0, r0, r3
 8007f66:	6963      	ldr	r3, [r4, #20]
 8007f68:	b2f6      	uxtb	r6, r6
 8007f6a:	4283      	cmp	r3, r0
 8007f6c:	4637      	mov	r7, r6
 8007f6e:	dc04      	bgt.n	8007f7a <__swbuf_r+0x42>
 8007f70:	4621      	mov	r1, r4
 8007f72:	4628      	mov	r0, r5
 8007f74:	f000 f926 	bl	80081c4 <_fflush_r>
 8007f78:	bb30      	cbnz	r0, 8007fc8 <__swbuf_r+0x90>
 8007f7a:	68a3      	ldr	r3, [r4, #8]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	60a3      	str	r3, [r4, #8]
 8007f80:	6823      	ldr	r3, [r4, #0]
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	6022      	str	r2, [r4, #0]
 8007f86:	701e      	strb	r6, [r3, #0]
 8007f88:	6963      	ldr	r3, [r4, #20]
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	4283      	cmp	r3, r0
 8007f8e:	d004      	beq.n	8007f9a <__swbuf_r+0x62>
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	07db      	lsls	r3, r3, #31
 8007f94:	d506      	bpl.n	8007fa4 <__swbuf_r+0x6c>
 8007f96:	2e0a      	cmp	r6, #10
 8007f98:	d104      	bne.n	8007fa4 <__swbuf_r+0x6c>
 8007f9a:	4621      	mov	r1, r4
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	f000 f911 	bl	80081c4 <_fflush_r>
 8007fa2:	b988      	cbnz	r0, 8007fc8 <__swbuf_r+0x90>
 8007fa4:	4638      	mov	r0, r7
 8007fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <__swbuf_r+0x9c>)
 8007faa:	429c      	cmp	r4, r3
 8007fac:	d101      	bne.n	8007fb2 <__swbuf_r+0x7a>
 8007fae:	68ac      	ldr	r4, [r5, #8]
 8007fb0:	e7cf      	b.n	8007f52 <__swbuf_r+0x1a>
 8007fb2:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <__swbuf_r+0xa0>)
 8007fb4:	429c      	cmp	r4, r3
 8007fb6:	bf08      	it	eq
 8007fb8:	68ec      	ldreq	r4, [r5, #12]
 8007fba:	e7ca      	b.n	8007f52 <__swbuf_r+0x1a>
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f000 f80c 	bl	8007fdc <__swsetup_r>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d0cb      	beq.n	8007f60 <__swbuf_r+0x28>
 8007fc8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007fcc:	e7ea      	b.n	8007fa4 <__swbuf_r+0x6c>
 8007fce:	bf00      	nop
 8007fd0:	0800a0e8 	.word	0x0800a0e8
 8007fd4:	0800a108 	.word	0x0800a108
 8007fd8:	0800a0c8 	.word	0x0800a0c8

08007fdc <__swsetup_r>:
 8007fdc:	4b32      	ldr	r3, [pc, #200]	; (80080a8 <__swsetup_r+0xcc>)
 8007fde:	b570      	push	{r4, r5, r6, lr}
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	b125      	cbz	r5, 8007ff2 <__swsetup_r+0x16>
 8007fe8:	69ab      	ldr	r3, [r5, #24]
 8007fea:	b913      	cbnz	r3, 8007ff2 <__swsetup_r+0x16>
 8007fec:	4628      	mov	r0, r5
 8007fee:	f000 f97d 	bl	80082ec <__sinit>
 8007ff2:	4b2e      	ldr	r3, [pc, #184]	; (80080ac <__swsetup_r+0xd0>)
 8007ff4:	429c      	cmp	r4, r3
 8007ff6:	d10f      	bne.n	8008018 <__swsetup_r+0x3c>
 8007ff8:	686c      	ldr	r4, [r5, #4]
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008000:	0719      	lsls	r1, r3, #28
 8008002:	d42c      	bmi.n	800805e <__swsetup_r+0x82>
 8008004:	06dd      	lsls	r5, r3, #27
 8008006:	d411      	bmi.n	800802c <__swsetup_r+0x50>
 8008008:	2309      	movs	r3, #9
 800800a:	6033      	str	r3, [r6, #0]
 800800c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008016:	e03e      	b.n	8008096 <__swsetup_r+0xba>
 8008018:	4b25      	ldr	r3, [pc, #148]	; (80080b0 <__swsetup_r+0xd4>)
 800801a:	429c      	cmp	r4, r3
 800801c:	d101      	bne.n	8008022 <__swsetup_r+0x46>
 800801e:	68ac      	ldr	r4, [r5, #8]
 8008020:	e7eb      	b.n	8007ffa <__swsetup_r+0x1e>
 8008022:	4b24      	ldr	r3, [pc, #144]	; (80080b4 <__swsetup_r+0xd8>)
 8008024:	429c      	cmp	r4, r3
 8008026:	bf08      	it	eq
 8008028:	68ec      	ldreq	r4, [r5, #12]
 800802a:	e7e6      	b.n	8007ffa <__swsetup_r+0x1e>
 800802c:	0758      	lsls	r0, r3, #29
 800802e:	d512      	bpl.n	8008056 <__swsetup_r+0x7a>
 8008030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008032:	b141      	cbz	r1, 8008046 <__swsetup_r+0x6a>
 8008034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008038:	4299      	cmp	r1, r3
 800803a:	d002      	beq.n	8008042 <__swsetup_r+0x66>
 800803c:	4630      	mov	r0, r6
 800803e:	f000 fa5b 	bl	80084f8 <_free_r>
 8008042:	2300      	movs	r3, #0
 8008044:	6363      	str	r3, [r4, #52]	; 0x34
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800804c:	81a3      	strh	r3, [r4, #12]
 800804e:	2300      	movs	r3, #0
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6923      	ldr	r3, [r4, #16]
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	b94b      	cbnz	r3, 8008076 <__swsetup_r+0x9a>
 8008062:	89a3      	ldrh	r3, [r4, #12]
 8008064:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008068:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806c:	d003      	beq.n	8008076 <__swsetup_r+0x9a>
 800806e:	4621      	mov	r1, r4
 8008070:	4630      	mov	r0, r6
 8008072:	f000 fa01 	bl	8008478 <__smakebuf_r>
 8008076:	89a0      	ldrh	r0, [r4, #12]
 8008078:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800807c:	f010 0301 	ands.w	r3, r0, #1
 8008080:	d00a      	beq.n	8008098 <__swsetup_r+0xbc>
 8008082:	2300      	movs	r3, #0
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6963      	ldr	r3, [r4, #20]
 8008088:	425b      	negs	r3, r3
 800808a:	61a3      	str	r3, [r4, #24]
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	b943      	cbnz	r3, 80080a2 <__swsetup_r+0xc6>
 8008090:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008094:	d1ba      	bne.n	800800c <__swsetup_r+0x30>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	0781      	lsls	r1, r0, #30
 800809a:	bf58      	it	pl
 800809c:	6963      	ldrpl	r3, [r4, #20]
 800809e:	60a3      	str	r3, [r4, #8]
 80080a0:	e7f4      	b.n	800808c <__swsetup_r+0xb0>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e7f7      	b.n	8008096 <__swsetup_r+0xba>
 80080a6:	bf00      	nop
 80080a8:	200000e4 	.word	0x200000e4
 80080ac:	0800a0e8 	.word	0x0800a0e8
 80080b0:	0800a108 	.word	0x0800a108
 80080b4:	0800a0c8 	.word	0x0800a0c8

080080b8 <__sflush_r>:
 80080b8:	898a      	ldrh	r2, [r1, #12]
 80080ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080be:	4605      	mov	r5, r0
 80080c0:	0710      	lsls	r0, r2, #28
 80080c2:	460c      	mov	r4, r1
 80080c4:	d458      	bmi.n	8008178 <__sflush_r+0xc0>
 80080c6:	684b      	ldr	r3, [r1, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	dc05      	bgt.n	80080d8 <__sflush_r+0x20>
 80080cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	dc02      	bgt.n	80080d8 <__sflush_r+0x20>
 80080d2:	2000      	movs	r0, #0
 80080d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080da:	2e00      	cmp	r6, #0
 80080dc:	d0f9      	beq.n	80080d2 <__sflush_r+0x1a>
 80080de:	2300      	movs	r3, #0
 80080e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080e4:	682f      	ldr	r7, [r5, #0]
 80080e6:	602b      	str	r3, [r5, #0]
 80080e8:	d032      	beq.n	8008150 <__sflush_r+0x98>
 80080ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080ec:	89a3      	ldrh	r3, [r4, #12]
 80080ee:	075a      	lsls	r2, r3, #29
 80080f0:	d505      	bpl.n	80080fe <__sflush_r+0x46>
 80080f2:	6863      	ldr	r3, [r4, #4]
 80080f4:	1ac0      	subs	r0, r0, r3
 80080f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080f8:	b10b      	cbz	r3, 80080fe <__sflush_r+0x46>
 80080fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080fc:	1ac0      	subs	r0, r0, r3
 80080fe:	2300      	movs	r3, #0
 8008100:	4602      	mov	r2, r0
 8008102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008104:	6a21      	ldr	r1, [r4, #32]
 8008106:	4628      	mov	r0, r5
 8008108:	47b0      	blx	r6
 800810a:	1c43      	adds	r3, r0, #1
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	d106      	bne.n	800811e <__sflush_r+0x66>
 8008110:	6829      	ldr	r1, [r5, #0]
 8008112:	291d      	cmp	r1, #29
 8008114:	d82c      	bhi.n	8008170 <__sflush_r+0xb8>
 8008116:	4a2a      	ldr	r2, [pc, #168]	; (80081c0 <__sflush_r+0x108>)
 8008118:	40ca      	lsrs	r2, r1
 800811a:	07d6      	lsls	r6, r2, #31
 800811c:	d528      	bpl.n	8008170 <__sflush_r+0xb8>
 800811e:	2200      	movs	r2, #0
 8008120:	6062      	str	r2, [r4, #4]
 8008122:	04d9      	lsls	r1, r3, #19
 8008124:	6922      	ldr	r2, [r4, #16]
 8008126:	6022      	str	r2, [r4, #0]
 8008128:	d504      	bpl.n	8008134 <__sflush_r+0x7c>
 800812a:	1c42      	adds	r2, r0, #1
 800812c:	d101      	bne.n	8008132 <__sflush_r+0x7a>
 800812e:	682b      	ldr	r3, [r5, #0]
 8008130:	b903      	cbnz	r3, 8008134 <__sflush_r+0x7c>
 8008132:	6560      	str	r0, [r4, #84]	; 0x54
 8008134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008136:	602f      	str	r7, [r5, #0]
 8008138:	2900      	cmp	r1, #0
 800813a:	d0ca      	beq.n	80080d2 <__sflush_r+0x1a>
 800813c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008140:	4299      	cmp	r1, r3
 8008142:	d002      	beq.n	800814a <__sflush_r+0x92>
 8008144:	4628      	mov	r0, r5
 8008146:	f000 f9d7 	bl	80084f8 <_free_r>
 800814a:	2000      	movs	r0, #0
 800814c:	6360      	str	r0, [r4, #52]	; 0x34
 800814e:	e7c1      	b.n	80080d4 <__sflush_r+0x1c>
 8008150:	6a21      	ldr	r1, [r4, #32]
 8008152:	2301      	movs	r3, #1
 8008154:	4628      	mov	r0, r5
 8008156:	47b0      	blx	r6
 8008158:	1c41      	adds	r1, r0, #1
 800815a:	d1c7      	bne.n	80080ec <__sflush_r+0x34>
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0c4      	beq.n	80080ec <__sflush_r+0x34>
 8008162:	2b1d      	cmp	r3, #29
 8008164:	d001      	beq.n	800816a <__sflush_r+0xb2>
 8008166:	2b16      	cmp	r3, #22
 8008168:	d101      	bne.n	800816e <__sflush_r+0xb6>
 800816a:	602f      	str	r7, [r5, #0]
 800816c:	e7b1      	b.n	80080d2 <__sflush_r+0x1a>
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	e7ad      	b.n	80080d4 <__sflush_r+0x1c>
 8008178:	690f      	ldr	r7, [r1, #16]
 800817a:	2f00      	cmp	r7, #0
 800817c:	d0a9      	beq.n	80080d2 <__sflush_r+0x1a>
 800817e:	0793      	lsls	r3, r2, #30
 8008180:	680e      	ldr	r6, [r1, #0]
 8008182:	bf08      	it	eq
 8008184:	694b      	ldreq	r3, [r1, #20]
 8008186:	600f      	str	r7, [r1, #0]
 8008188:	bf18      	it	ne
 800818a:	2300      	movne	r3, #0
 800818c:	eba6 0807 	sub.w	r8, r6, r7
 8008190:	608b      	str	r3, [r1, #8]
 8008192:	f1b8 0f00 	cmp.w	r8, #0
 8008196:	dd9c      	ble.n	80080d2 <__sflush_r+0x1a>
 8008198:	6a21      	ldr	r1, [r4, #32]
 800819a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800819c:	4643      	mov	r3, r8
 800819e:	463a      	mov	r2, r7
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b0      	blx	r6
 80081a4:	2800      	cmp	r0, #0
 80081a6:	dc06      	bgt.n	80081b6 <__sflush_r+0xfe>
 80081a8:	89a3      	ldrh	r3, [r4, #12]
 80081aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ae:	81a3      	strh	r3, [r4, #12]
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80081b4:	e78e      	b.n	80080d4 <__sflush_r+0x1c>
 80081b6:	4407      	add	r7, r0
 80081b8:	eba8 0800 	sub.w	r8, r8, r0
 80081bc:	e7e9      	b.n	8008192 <__sflush_r+0xda>
 80081be:	bf00      	nop
 80081c0:	20400001 	.word	0x20400001

080081c4 <_fflush_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	690b      	ldr	r3, [r1, #16]
 80081c8:	4605      	mov	r5, r0
 80081ca:	460c      	mov	r4, r1
 80081cc:	b913      	cbnz	r3, 80081d4 <_fflush_r+0x10>
 80081ce:	2500      	movs	r5, #0
 80081d0:	4628      	mov	r0, r5
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	b118      	cbz	r0, 80081de <_fflush_r+0x1a>
 80081d6:	6983      	ldr	r3, [r0, #24]
 80081d8:	b90b      	cbnz	r3, 80081de <_fflush_r+0x1a>
 80081da:	f000 f887 	bl	80082ec <__sinit>
 80081de:	4b14      	ldr	r3, [pc, #80]	; (8008230 <_fflush_r+0x6c>)
 80081e0:	429c      	cmp	r4, r3
 80081e2:	d11b      	bne.n	800821c <_fflush_r+0x58>
 80081e4:	686c      	ldr	r4, [r5, #4]
 80081e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ef      	beq.n	80081ce <_fflush_r+0xa>
 80081ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081f0:	07d0      	lsls	r0, r2, #31
 80081f2:	d404      	bmi.n	80081fe <_fflush_r+0x3a>
 80081f4:	0599      	lsls	r1, r3, #22
 80081f6:	d402      	bmi.n	80081fe <_fflush_r+0x3a>
 80081f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081fa:	f000 f915 	bl	8008428 <__retarget_lock_acquire_recursive>
 80081fe:	4628      	mov	r0, r5
 8008200:	4621      	mov	r1, r4
 8008202:	f7ff ff59 	bl	80080b8 <__sflush_r>
 8008206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008208:	07da      	lsls	r2, r3, #31
 800820a:	4605      	mov	r5, r0
 800820c:	d4e0      	bmi.n	80081d0 <_fflush_r+0xc>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	059b      	lsls	r3, r3, #22
 8008212:	d4dd      	bmi.n	80081d0 <_fflush_r+0xc>
 8008214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008216:	f000 f908 	bl	800842a <__retarget_lock_release_recursive>
 800821a:	e7d9      	b.n	80081d0 <_fflush_r+0xc>
 800821c:	4b05      	ldr	r3, [pc, #20]	; (8008234 <_fflush_r+0x70>)
 800821e:	429c      	cmp	r4, r3
 8008220:	d101      	bne.n	8008226 <_fflush_r+0x62>
 8008222:	68ac      	ldr	r4, [r5, #8]
 8008224:	e7df      	b.n	80081e6 <_fflush_r+0x22>
 8008226:	4b04      	ldr	r3, [pc, #16]	; (8008238 <_fflush_r+0x74>)
 8008228:	429c      	cmp	r4, r3
 800822a:	bf08      	it	eq
 800822c:	68ec      	ldreq	r4, [r5, #12]
 800822e:	e7da      	b.n	80081e6 <_fflush_r+0x22>
 8008230:	0800a0e8 	.word	0x0800a0e8
 8008234:	0800a108 	.word	0x0800a108
 8008238:	0800a0c8 	.word	0x0800a0c8

0800823c <std>:
 800823c:	2300      	movs	r3, #0
 800823e:	b510      	push	{r4, lr}
 8008240:	4604      	mov	r4, r0
 8008242:	e9c0 3300 	strd	r3, r3, [r0]
 8008246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800824a:	6083      	str	r3, [r0, #8]
 800824c:	8181      	strh	r1, [r0, #12]
 800824e:	6643      	str	r3, [r0, #100]	; 0x64
 8008250:	81c2      	strh	r2, [r0, #14]
 8008252:	6183      	str	r3, [r0, #24]
 8008254:	4619      	mov	r1, r3
 8008256:	2208      	movs	r2, #8
 8008258:	305c      	adds	r0, #92	; 0x5c
 800825a:	f7ff fdd7 	bl	8007e0c <memset>
 800825e:	4b05      	ldr	r3, [pc, #20]	; (8008274 <std+0x38>)
 8008260:	6263      	str	r3, [r4, #36]	; 0x24
 8008262:	4b05      	ldr	r3, [pc, #20]	; (8008278 <std+0x3c>)
 8008264:	62a3      	str	r3, [r4, #40]	; 0x28
 8008266:	4b05      	ldr	r3, [pc, #20]	; (800827c <std+0x40>)
 8008268:	62e3      	str	r3, [r4, #44]	; 0x2c
 800826a:	4b05      	ldr	r3, [pc, #20]	; (8008280 <std+0x44>)
 800826c:	6224      	str	r4, [r4, #32]
 800826e:	6323      	str	r3, [r4, #48]	; 0x30
 8008270:	bd10      	pop	{r4, pc}
 8008272:	bf00      	nop
 8008274:	08008cb5 	.word	0x08008cb5
 8008278:	08008cd7 	.word	0x08008cd7
 800827c:	08008d0f 	.word	0x08008d0f
 8008280:	08008d33 	.word	0x08008d33

08008284 <_cleanup_r>:
 8008284:	4901      	ldr	r1, [pc, #4]	; (800828c <_cleanup_r+0x8>)
 8008286:	f000 b8af 	b.w	80083e8 <_fwalk_reent>
 800828a:	bf00      	nop
 800828c:	080081c5 	.word	0x080081c5

08008290 <__sfmoreglue>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	2268      	movs	r2, #104	; 0x68
 8008294:	1e4d      	subs	r5, r1, #1
 8008296:	4355      	muls	r5, r2
 8008298:	460e      	mov	r6, r1
 800829a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800829e:	f000 f997 	bl	80085d0 <_malloc_r>
 80082a2:	4604      	mov	r4, r0
 80082a4:	b140      	cbz	r0, 80082b8 <__sfmoreglue+0x28>
 80082a6:	2100      	movs	r1, #0
 80082a8:	e9c0 1600 	strd	r1, r6, [r0]
 80082ac:	300c      	adds	r0, #12
 80082ae:	60a0      	str	r0, [r4, #8]
 80082b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082b4:	f7ff fdaa 	bl	8007e0c <memset>
 80082b8:	4620      	mov	r0, r4
 80082ba:	bd70      	pop	{r4, r5, r6, pc}

080082bc <__sfp_lock_acquire>:
 80082bc:	4801      	ldr	r0, [pc, #4]	; (80082c4 <__sfp_lock_acquire+0x8>)
 80082be:	f000 b8b3 	b.w	8008428 <__retarget_lock_acquire_recursive>
 80082c2:	bf00      	nop
 80082c4:	200006a9 	.word	0x200006a9

080082c8 <__sfp_lock_release>:
 80082c8:	4801      	ldr	r0, [pc, #4]	; (80082d0 <__sfp_lock_release+0x8>)
 80082ca:	f000 b8ae 	b.w	800842a <__retarget_lock_release_recursive>
 80082ce:	bf00      	nop
 80082d0:	200006a9 	.word	0x200006a9

080082d4 <__sinit_lock_acquire>:
 80082d4:	4801      	ldr	r0, [pc, #4]	; (80082dc <__sinit_lock_acquire+0x8>)
 80082d6:	f000 b8a7 	b.w	8008428 <__retarget_lock_acquire_recursive>
 80082da:	bf00      	nop
 80082dc:	200006aa 	.word	0x200006aa

080082e0 <__sinit_lock_release>:
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <__sinit_lock_release+0x8>)
 80082e2:	f000 b8a2 	b.w	800842a <__retarget_lock_release_recursive>
 80082e6:	bf00      	nop
 80082e8:	200006aa 	.word	0x200006aa

080082ec <__sinit>:
 80082ec:	b510      	push	{r4, lr}
 80082ee:	4604      	mov	r4, r0
 80082f0:	f7ff fff0 	bl	80082d4 <__sinit_lock_acquire>
 80082f4:	69a3      	ldr	r3, [r4, #24]
 80082f6:	b11b      	cbz	r3, 8008300 <__sinit+0x14>
 80082f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082fc:	f7ff bff0 	b.w	80082e0 <__sinit_lock_release>
 8008300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008304:	6523      	str	r3, [r4, #80]	; 0x50
 8008306:	4b13      	ldr	r3, [pc, #76]	; (8008354 <__sinit+0x68>)
 8008308:	4a13      	ldr	r2, [pc, #76]	; (8008358 <__sinit+0x6c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	62a2      	str	r2, [r4, #40]	; 0x28
 800830e:	42a3      	cmp	r3, r4
 8008310:	bf04      	itt	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	61a3      	streq	r3, [r4, #24]
 8008316:	4620      	mov	r0, r4
 8008318:	f000 f820 	bl	800835c <__sfp>
 800831c:	6060      	str	r0, [r4, #4]
 800831e:	4620      	mov	r0, r4
 8008320:	f000 f81c 	bl	800835c <__sfp>
 8008324:	60a0      	str	r0, [r4, #8]
 8008326:	4620      	mov	r0, r4
 8008328:	f000 f818 	bl	800835c <__sfp>
 800832c:	2200      	movs	r2, #0
 800832e:	60e0      	str	r0, [r4, #12]
 8008330:	2104      	movs	r1, #4
 8008332:	6860      	ldr	r0, [r4, #4]
 8008334:	f7ff ff82 	bl	800823c <std>
 8008338:	68a0      	ldr	r0, [r4, #8]
 800833a:	2201      	movs	r2, #1
 800833c:	2109      	movs	r1, #9
 800833e:	f7ff ff7d 	bl	800823c <std>
 8008342:	68e0      	ldr	r0, [r4, #12]
 8008344:	2202      	movs	r2, #2
 8008346:	2112      	movs	r1, #18
 8008348:	f7ff ff78 	bl	800823c <std>
 800834c:	2301      	movs	r3, #1
 800834e:	61a3      	str	r3, [r4, #24]
 8008350:	e7d2      	b.n	80082f8 <__sinit+0xc>
 8008352:	bf00      	nop
 8008354:	0800a0c4 	.word	0x0800a0c4
 8008358:	08008285 	.word	0x08008285

0800835c <__sfp>:
 800835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800835e:	4607      	mov	r7, r0
 8008360:	f7ff ffac 	bl	80082bc <__sfp_lock_acquire>
 8008364:	4b1e      	ldr	r3, [pc, #120]	; (80083e0 <__sfp+0x84>)
 8008366:	681e      	ldr	r6, [r3, #0]
 8008368:	69b3      	ldr	r3, [r6, #24]
 800836a:	b913      	cbnz	r3, 8008372 <__sfp+0x16>
 800836c:	4630      	mov	r0, r6
 800836e:	f7ff ffbd 	bl	80082ec <__sinit>
 8008372:	3648      	adds	r6, #72	; 0x48
 8008374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008378:	3b01      	subs	r3, #1
 800837a:	d503      	bpl.n	8008384 <__sfp+0x28>
 800837c:	6833      	ldr	r3, [r6, #0]
 800837e:	b30b      	cbz	r3, 80083c4 <__sfp+0x68>
 8008380:	6836      	ldr	r6, [r6, #0]
 8008382:	e7f7      	b.n	8008374 <__sfp+0x18>
 8008384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008388:	b9d5      	cbnz	r5, 80083c0 <__sfp+0x64>
 800838a:	4b16      	ldr	r3, [pc, #88]	; (80083e4 <__sfp+0x88>)
 800838c:	60e3      	str	r3, [r4, #12]
 800838e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008392:	6665      	str	r5, [r4, #100]	; 0x64
 8008394:	f000 f847 	bl	8008426 <__retarget_lock_init_recursive>
 8008398:	f7ff ff96 	bl	80082c8 <__sfp_lock_release>
 800839c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083a4:	6025      	str	r5, [r4, #0]
 80083a6:	61a5      	str	r5, [r4, #24]
 80083a8:	2208      	movs	r2, #8
 80083aa:	4629      	mov	r1, r5
 80083ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083b0:	f7ff fd2c 	bl	8007e0c <memset>
 80083b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083bc:	4620      	mov	r0, r4
 80083be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083c0:	3468      	adds	r4, #104	; 0x68
 80083c2:	e7d9      	b.n	8008378 <__sfp+0x1c>
 80083c4:	2104      	movs	r1, #4
 80083c6:	4638      	mov	r0, r7
 80083c8:	f7ff ff62 	bl	8008290 <__sfmoreglue>
 80083cc:	4604      	mov	r4, r0
 80083ce:	6030      	str	r0, [r6, #0]
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d1d5      	bne.n	8008380 <__sfp+0x24>
 80083d4:	f7ff ff78 	bl	80082c8 <__sfp_lock_release>
 80083d8:	230c      	movs	r3, #12
 80083da:	603b      	str	r3, [r7, #0]
 80083dc:	e7ee      	b.n	80083bc <__sfp+0x60>
 80083de:	bf00      	nop
 80083e0:	0800a0c4 	.word	0x0800a0c4
 80083e4:	ffff0001 	.word	0xffff0001

080083e8 <_fwalk_reent>:
 80083e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083ec:	4606      	mov	r6, r0
 80083ee:	4688      	mov	r8, r1
 80083f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80083f4:	2700      	movs	r7, #0
 80083f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80083fa:	f1b9 0901 	subs.w	r9, r9, #1
 80083fe:	d505      	bpl.n	800840c <_fwalk_reent+0x24>
 8008400:	6824      	ldr	r4, [r4, #0]
 8008402:	2c00      	cmp	r4, #0
 8008404:	d1f7      	bne.n	80083f6 <_fwalk_reent+0xe>
 8008406:	4638      	mov	r0, r7
 8008408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840c:	89ab      	ldrh	r3, [r5, #12]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d907      	bls.n	8008422 <_fwalk_reent+0x3a>
 8008412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008416:	3301      	adds	r3, #1
 8008418:	d003      	beq.n	8008422 <_fwalk_reent+0x3a>
 800841a:	4629      	mov	r1, r5
 800841c:	4630      	mov	r0, r6
 800841e:	47c0      	blx	r8
 8008420:	4307      	orrs	r7, r0
 8008422:	3568      	adds	r5, #104	; 0x68
 8008424:	e7e9      	b.n	80083fa <_fwalk_reent+0x12>

08008426 <__retarget_lock_init_recursive>:
 8008426:	4770      	bx	lr

08008428 <__retarget_lock_acquire_recursive>:
 8008428:	4770      	bx	lr

0800842a <__retarget_lock_release_recursive>:
 800842a:	4770      	bx	lr

0800842c <__swhatbuf_r>:
 800842c:	b570      	push	{r4, r5, r6, lr}
 800842e:	460e      	mov	r6, r1
 8008430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008434:	2900      	cmp	r1, #0
 8008436:	b096      	sub	sp, #88	; 0x58
 8008438:	4614      	mov	r4, r2
 800843a:	461d      	mov	r5, r3
 800843c:	da08      	bge.n	8008450 <__swhatbuf_r+0x24>
 800843e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	061a      	lsls	r2, r3, #24
 8008448:	d410      	bmi.n	800846c <__swhatbuf_r+0x40>
 800844a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800844e:	e00e      	b.n	800846e <__swhatbuf_r+0x42>
 8008450:	466a      	mov	r2, sp
 8008452:	f000 fc95 	bl	8008d80 <_fstat_r>
 8008456:	2800      	cmp	r0, #0
 8008458:	dbf1      	blt.n	800843e <__swhatbuf_r+0x12>
 800845a:	9a01      	ldr	r2, [sp, #4]
 800845c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008460:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008464:	425a      	negs	r2, r3
 8008466:	415a      	adcs	r2, r3
 8008468:	602a      	str	r2, [r5, #0]
 800846a:	e7ee      	b.n	800844a <__swhatbuf_r+0x1e>
 800846c:	2340      	movs	r3, #64	; 0x40
 800846e:	2000      	movs	r0, #0
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	b016      	add	sp, #88	; 0x58
 8008474:	bd70      	pop	{r4, r5, r6, pc}
	...

08008478 <__smakebuf_r>:
 8008478:	898b      	ldrh	r3, [r1, #12]
 800847a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800847c:	079d      	lsls	r5, r3, #30
 800847e:	4606      	mov	r6, r0
 8008480:	460c      	mov	r4, r1
 8008482:	d507      	bpl.n	8008494 <__smakebuf_r+0x1c>
 8008484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008488:	6023      	str	r3, [r4, #0]
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	2301      	movs	r3, #1
 800848e:	6163      	str	r3, [r4, #20]
 8008490:	b002      	add	sp, #8
 8008492:	bd70      	pop	{r4, r5, r6, pc}
 8008494:	ab01      	add	r3, sp, #4
 8008496:	466a      	mov	r2, sp
 8008498:	f7ff ffc8 	bl	800842c <__swhatbuf_r>
 800849c:	9900      	ldr	r1, [sp, #0]
 800849e:	4605      	mov	r5, r0
 80084a0:	4630      	mov	r0, r6
 80084a2:	f000 f895 	bl	80085d0 <_malloc_r>
 80084a6:	b948      	cbnz	r0, 80084bc <__smakebuf_r+0x44>
 80084a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ac:	059a      	lsls	r2, r3, #22
 80084ae:	d4ef      	bmi.n	8008490 <__smakebuf_r+0x18>
 80084b0:	f023 0303 	bic.w	r3, r3, #3
 80084b4:	f043 0302 	orr.w	r3, r3, #2
 80084b8:	81a3      	strh	r3, [r4, #12]
 80084ba:	e7e3      	b.n	8008484 <__smakebuf_r+0xc>
 80084bc:	4b0d      	ldr	r3, [pc, #52]	; (80084f4 <__smakebuf_r+0x7c>)
 80084be:	62b3      	str	r3, [r6, #40]	; 0x28
 80084c0:	89a3      	ldrh	r3, [r4, #12]
 80084c2:	6020      	str	r0, [r4, #0]
 80084c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c8:	81a3      	strh	r3, [r4, #12]
 80084ca:	9b00      	ldr	r3, [sp, #0]
 80084cc:	6163      	str	r3, [r4, #20]
 80084ce:	9b01      	ldr	r3, [sp, #4]
 80084d0:	6120      	str	r0, [r4, #16]
 80084d2:	b15b      	cbz	r3, 80084ec <__smakebuf_r+0x74>
 80084d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084d8:	4630      	mov	r0, r6
 80084da:	f000 fc63 	bl	8008da4 <_isatty_r>
 80084de:	b128      	cbz	r0, 80084ec <__smakebuf_r+0x74>
 80084e0:	89a3      	ldrh	r3, [r4, #12]
 80084e2:	f023 0303 	bic.w	r3, r3, #3
 80084e6:	f043 0301 	orr.w	r3, r3, #1
 80084ea:	81a3      	strh	r3, [r4, #12]
 80084ec:	89a0      	ldrh	r0, [r4, #12]
 80084ee:	4305      	orrs	r5, r0
 80084f0:	81a5      	strh	r5, [r4, #12]
 80084f2:	e7cd      	b.n	8008490 <__smakebuf_r+0x18>
 80084f4:	08008285 	.word	0x08008285

080084f8 <_free_r>:
 80084f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084fa:	2900      	cmp	r1, #0
 80084fc:	d044      	beq.n	8008588 <_free_r+0x90>
 80084fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008502:	9001      	str	r0, [sp, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	f1a1 0404 	sub.w	r4, r1, #4
 800850a:	bfb8      	it	lt
 800850c:	18e4      	addlt	r4, r4, r3
 800850e:	f000 fc6b 	bl	8008de8 <__malloc_lock>
 8008512:	4a1e      	ldr	r2, [pc, #120]	; (800858c <_free_r+0x94>)
 8008514:	9801      	ldr	r0, [sp, #4]
 8008516:	6813      	ldr	r3, [r2, #0]
 8008518:	b933      	cbnz	r3, 8008528 <_free_r+0x30>
 800851a:	6063      	str	r3, [r4, #4]
 800851c:	6014      	str	r4, [r2, #0]
 800851e:	b003      	add	sp, #12
 8008520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008524:	f000 bc66 	b.w	8008df4 <__malloc_unlock>
 8008528:	42a3      	cmp	r3, r4
 800852a:	d908      	bls.n	800853e <_free_r+0x46>
 800852c:	6825      	ldr	r5, [r4, #0]
 800852e:	1961      	adds	r1, r4, r5
 8008530:	428b      	cmp	r3, r1
 8008532:	bf01      	itttt	eq
 8008534:	6819      	ldreq	r1, [r3, #0]
 8008536:	685b      	ldreq	r3, [r3, #4]
 8008538:	1949      	addeq	r1, r1, r5
 800853a:	6021      	streq	r1, [r4, #0]
 800853c:	e7ed      	b.n	800851a <_free_r+0x22>
 800853e:	461a      	mov	r2, r3
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	b10b      	cbz	r3, 8008548 <_free_r+0x50>
 8008544:	42a3      	cmp	r3, r4
 8008546:	d9fa      	bls.n	800853e <_free_r+0x46>
 8008548:	6811      	ldr	r1, [r2, #0]
 800854a:	1855      	adds	r5, r2, r1
 800854c:	42a5      	cmp	r5, r4
 800854e:	d10b      	bne.n	8008568 <_free_r+0x70>
 8008550:	6824      	ldr	r4, [r4, #0]
 8008552:	4421      	add	r1, r4
 8008554:	1854      	adds	r4, r2, r1
 8008556:	42a3      	cmp	r3, r4
 8008558:	6011      	str	r1, [r2, #0]
 800855a:	d1e0      	bne.n	800851e <_free_r+0x26>
 800855c:	681c      	ldr	r4, [r3, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	6053      	str	r3, [r2, #4]
 8008562:	4421      	add	r1, r4
 8008564:	6011      	str	r1, [r2, #0]
 8008566:	e7da      	b.n	800851e <_free_r+0x26>
 8008568:	d902      	bls.n	8008570 <_free_r+0x78>
 800856a:	230c      	movs	r3, #12
 800856c:	6003      	str	r3, [r0, #0]
 800856e:	e7d6      	b.n	800851e <_free_r+0x26>
 8008570:	6825      	ldr	r5, [r4, #0]
 8008572:	1961      	adds	r1, r4, r5
 8008574:	428b      	cmp	r3, r1
 8008576:	bf04      	itt	eq
 8008578:	6819      	ldreq	r1, [r3, #0]
 800857a:	685b      	ldreq	r3, [r3, #4]
 800857c:	6063      	str	r3, [r4, #4]
 800857e:	bf04      	itt	eq
 8008580:	1949      	addeq	r1, r1, r5
 8008582:	6021      	streq	r1, [r4, #0]
 8008584:	6054      	str	r4, [r2, #4]
 8008586:	e7ca      	b.n	800851e <_free_r+0x26>
 8008588:	b003      	add	sp, #12
 800858a:	bd30      	pop	{r4, r5, pc}
 800858c:	200006ac 	.word	0x200006ac

08008590 <sbrk_aligned>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	4e0e      	ldr	r6, [pc, #56]	; (80085cc <sbrk_aligned+0x3c>)
 8008594:	460c      	mov	r4, r1
 8008596:	6831      	ldr	r1, [r6, #0]
 8008598:	4605      	mov	r5, r0
 800859a:	b911      	cbnz	r1, 80085a2 <sbrk_aligned+0x12>
 800859c:	f000 fb7a 	bl	8008c94 <_sbrk_r>
 80085a0:	6030      	str	r0, [r6, #0]
 80085a2:	4621      	mov	r1, r4
 80085a4:	4628      	mov	r0, r5
 80085a6:	f000 fb75 	bl	8008c94 <_sbrk_r>
 80085aa:	1c43      	adds	r3, r0, #1
 80085ac:	d00a      	beq.n	80085c4 <sbrk_aligned+0x34>
 80085ae:	1cc4      	adds	r4, r0, #3
 80085b0:	f024 0403 	bic.w	r4, r4, #3
 80085b4:	42a0      	cmp	r0, r4
 80085b6:	d007      	beq.n	80085c8 <sbrk_aligned+0x38>
 80085b8:	1a21      	subs	r1, r4, r0
 80085ba:	4628      	mov	r0, r5
 80085bc:	f000 fb6a 	bl	8008c94 <_sbrk_r>
 80085c0:	3001      	adds	r0, #1
 80085c2:	d101      	bne.n	80085c8 <sbrk_aligned+0x38>
 80085c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80085c8:	4620      	mov	r0, r4
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	200006b0 	.word	0x200006b0

080085d0 <_malloc_r>:
 80085d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085d4:	1ccd      	adds	r5, r1, #3
 80085d6:	f025 0503 	bic.w	r5, r5, #3
 80085da:	3508      	adds	r5, #8
 80085dc:	2d0c      	cmp	r5, #12
 80085de:	bf38      	it	cc
 80085e0:	250c      	movcc	r5, #12
 80085e2:	2d00      	cmp	r5, #0
 80085e4:	4607      	mov	r7, r0
 80085e6:	db01      	blt.n	80085ec <_malloc_r+0x1c>
 80085e8:	42a9      	cmp	r1, r5
 80085ea:	d905      	bls.n	80085f8 <_malloc_r+0x28>
 80085ec:	230c      	movs	r3, #12
 80085ee:	603b      	str	r3, [r7, #0]
 80085f0:	2600      	movs	r6, #0
 80085f2:	4630      	mov	r0, r6
 80085f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f8:	4e2e      	ldr	r6, [pc, #184]	; (80086b4 <_malloc_r+0xe4>)
 80085fa:	f000 fbf5 	bl	8008de8 <__malloc_lock>
 80085fe:	6833      	ldr	r3, [r6, #0]
 8008600:	461c      	mov	r4, r3
 8008602:	bb34      	cbnz	r4, 8008652 <_malloc_r+0x82>
 8008604:	4629      	mov	r1, r5
 8008606:	4638      	mov	r0, r7
 8008608:	f7ff ffc2 	bl	8008590 <sbrk_aligned>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	4604      	mov	r4, r0
 8008610:	d14d      	bne.n	80086ae <_malloc_r+0xde>
 8008612:	6834      	ldr	r4, [r6, #0]
 8008614:	4626      	mov	r6, r4
 8008616:	2e00      	cmp	r6, #0
 8008618:	d140      	bne.n	800869c <_malloc_r+0xcc>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	4631      	mov	r1, r6
 800861e:	4638      	mov	r0, r7
 8008620:	eb04 0803 	add.w	r8, r4, r3
 8008624:	f000 fb36 	bl	8008c94 <_sbrk_r>
 8008628:	4580      	cmp	r8, r0
 800862a:	d13a      	bne.n	80086a2 <_malloc_r+0xd2>
 800862c:	6821      	ldr	r1, [r4, #0]
 800862e:	3503      	adds	r5, #3
 8008630:	1a6d      	subs	r5, r5, r1
 8008632:	f025 0503 	bic.w	r5, r5, #3
 8008636:	3508      	adds	r5, #8
 8008638:	2d0c      	cmp	r5, #12
 800863a:	bf38      	it	cc
 800863c:	250c      	movcc	r5, #12
 800863e:	4629      	mov	r1, r5
 8008640:	4638      	mov	r0, r7
 8008642:	f7ff ffa5 	bl	8008590 <sbrk_aligned>
 8008646:	3001      	adds	r0, #1
 8008648:	d02b      	beq.n	80086a2 <_malloc_r+0xd2>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	442b      	add	r3, r5
 800864e:	6023      	str	r3, [r4, #0]
 8008650:	e00e      	b.n	8008670 <_malloc_r+0xa0>
 8008652:	6822      	ldr	r2, [r4, #0]
 8008654:	1b52      	subs	r2, r2, r5
 8008656:	d41e      	bmi.n	8008696 <_malloc_r+0xc6>
 8008658:	2a0b      	cmp	r2, #11
 800865a:	d916      	bls.n	800868a <_malloc_r+0xba>
 800865c:	1961      	adds	r1, r4, r5
 800865e:	42a3      	cmp	r3, r4
 8008660:	6025      	str	r5, [r4, #0]
 8008662:	bf18      	it	ne
 8008664:	6059      	strne	r1, [r3, #4]
 8008666:	6863      	ldr	r3, [r4, #4]
 8008668:	bf08      	it	eq
 800866a:	6031      	streq	r1, [r6, #0]
 800866c:	5162      	str	r2, [r4, r5]
 800866e:	604b      	str	r3, [r1, #4]
 8008670:	4638      	mov	r0, r7
 8008672:	f104 060b 	add.w	r6, r4, #11
 8008676:	f000 fbbd 	bl	8008df4 <__malloc_unlock>
 800867a:	f026 0607 	bic.w	r6, r6, #7
 800867e:	1d23      	adds	r3, r4, #4
 8008680:	1af2      	subs	r2, r6, r3
 8008682:	d0b6      	beq.n	80085f2 <_malloc_r+0x22>
 8008684:	1b9b      	subs	r3, r3, r6
 8008686:	50a3      	str	r3, [r4, r2]
 8008688:	e7b3      	b.n	80085f2 <_malloc_r+0x22>
 800868a:	6862      	ldr	r2, [r4, #4]
 800868c:	42a3      	cmp	r3, r4
 800868e:	bf0c      	ite	eq
 8008690:	6032      	streq	r2, [r6, #0]
 8008692:	605a      	strne	r2, [r3, #4]
 8008694:	e7ec      	b.n	8008670 <_malloc_r+0xa0>
 8008696:	4623      	mov	r3, r4
 8008698:	6864      	ldr	r4, [r4, #4]
 800869a:	e7b2      	b.n	8008602 <_malloc_r+0x32>
 800869c:	4634      	mov	r4, r6
 800869e:	6876      	ldr	r6, [r6, #4]
 80086a0:	e7b9      	b.n	8008616 <_malloc_r+0x46>
 80086a2:	230c      	movs	r3, #12
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	4638      	mov	r0, r7
 80086a8:	f000 fba4 	bl	8008df4 <__malloc_unlock>
 80086ac:	e7a1      	b.n	80085f2 <_malloc_r+0x22>
 80086ae:	6025      	str	r5, [r4, #0]
 80086b0:	e7de      	b.n	8008670 <_malloc_r+0xa0>
 80086b2:	bf00      	nop
 80086b4:	200006ac 	.word	0x200006ac

080086b8 <__sfputc_r>:
 80086b8:	6893      	ldr	r3, [r2, #8]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	b410      	push	{r4}
 80086c0:	6093      	str	r3, [r2, #8]
 80086c2:	da08      	bge.n	80086d6 <__sfputc_r+0x1e>
 80086c4:	6994      	ldr	r4, [r2, #24]
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	db01      	blt.n	80086ce <__sfputc_r+0x16>
 80086ca:	290a      	cmp	r1, #10
 80086cc:	d103      	bne.n	80086d6 <__sfputc_r+0x1e>
 80086ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086d2:	f7ff bc31 	b.w	8007f38 <__swbuf_r>
 80086d6:	6813      	ldr	r3, [r2, #0]
 80086d8:	1c58      	adds	r0, r3, #1
 80086da:	6010      	str	r0, [r2, #0]
 80086dc:	7019      	strb	r1, [r3, #0]
 80086de:	4608      	mov	r0, r1
 80086e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80086e4:	4770      	bx	lr

080086e6 <__sfputs_r>:
 80086e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086e8:	4606      	mov	r6, r0
 80086ea:	460f      	mov	r7, r1
 80086ec:	4614      	mov	r4, r2
 80086ee:	18d5      	adds	r5, r2, r3
 80086f0:	42ac      	cmp	r4, r5
 80086f2:	d101      	bne.n	80086f8 <__sfputs_r+0x12>
 80086f4:	2000      	movs	r0, #0
 80086f6:	e007      	b.n	8008708 <__sfputs_r+0x22>
 80086f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086fc:	463a      	mov	r2, r7
 80086fe:	4630      	mov	r0, r6
 8008700:	f7ff ffda 	bl	80086b8 <__sfputc_r>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	d1f3      	bne.n	80086f0 <__sfputs_r+0xa>
 8008708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800870c <_vfiprintf_r>:
 800870c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008710:	460d      	mov	r5, r1
 8008712:	b09d      	sub	sp, #116	; 0x74
 8008714:	4614      	mov	r4, r2
 8008716:	4698      	mov	r8, r3
 8008718:	4606      	mov	r6, r0
 800871a:	b118      	cbz	r0, 8008724 <_vfiprintf_r+0x18>
 800871c:	6983      	ldr	r3, [r0, #24]
 800871e:	b90b      	cbnz	r3, 8008724 <_vfiprintf_r+0x18>
 8008720:	f7ff fde4 	bl	80082ec <__sinit>
 8008724:	4b89      	ldr	r3, [pc, #548]	; (800894c <_vfiprintf_r+0x240>)
 8008726:	429d      	cmp	r5, r3
 8008728:	d11b      	bne.n	8008762 <_vfiprintf_r+0x56>
 800872a:	6875      	ldr	r5, [r6, #4]
 800872c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800872e:	07d9      	lsls	r1, r3, #31
 8008730:	d405      	bmi.n	800873e <_vfiprintf_r+0x32>
 8008732:	89ab      	ldrh	r3, [r5, #12]
 8008734:	059a      	lsls	r2, r3, #22
 8008736:	d402      	bmi.n	800873e <_vfiprintf_r+0x32>
 8008738:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800873a:	f7ff fe75 	bl	8008428 <__retarget_lock_acquire_recursive>
 800873e:	89ab      	ldrh	r3, [r5, #12]
 8008740:	071b      	lsls	r3, r3, #28
 8008742:	d501      	bpl.n	8008748 <_vfiprintf_r+0x3c>
 8008744:	692b      	ldr	r3, [r5, #16]
 8008746:	b9eb      	cbnz	r3, 8008784 <_vfiprintf_r+0x78>
 8008748:	4629      	mov	r1, r5
 800874a:	4630      	mov	r0, r6
 800874c:	f7ff fc46 	bl	8007fdc <__swsetup_r>
 8008750:	b1c0      	cbz	r0, 8008784 <_vfiprintf_r+0x78>
 8008752:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008754:	07dc      	lsls	r4, r3, #31
 8008756:	d50e      	bpl.n	8008776 <_vfiprintf_r+0x6a>
 8008758:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800875c:	b01d      	add	sp, #116	; 0x74
 800875e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008762:	4b7b      	ldr	r3, [pc, #492]	; (8008950 <_vfiprintf_r+0x244>)
 8008764:	429d      	cmp	r5, r3
 8008766:	d101      	bne.n	800876c <_vfiprintf_r+0x60>
 8008768:	68b5      	ldr	r5, [r6, #8]
 800876a:	e7df      	b.n	800872c <_vfiprintf_r+0x20>
 800876c:	4b79      	ldr	r3, [pc, #484]	; (8008954 <_vfiprintf_r+0x248>)
 800876e:	429d      	cmp	r5, r3
 8008770:	bf08      	it	eq
 8008772:	68f5      	ldreq	r5, [r6, #12]
 8008774:	e7da      	b.n	800872c <_vfiprintf_r+0x20>
 8008776:	89ab      	ldrh	r3, [r5, #12]
 8008778:	0598      	lsls	r0, r3, #22
 800877a:	d4ed      	bmi.n	8008758 <_vfiprintf_r+0x4c>
 800877c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800877e:	f7ff fe54 	bl	800842a <__retarget_lock_release_recursive>
 8008782:	e7e9      	b.n	8008758 <_vfiprintf_r+0x4c>
 8008784:	2300      	movs	r3, #0
 8008786:	9309      	str	r3, [sp, #36]	; 0x24
 8008788:	2320      	movs	r3, #32
 800878a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800878e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008792:	2330      	movs	r3, #48	; 0x30
 8008794:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008958 <_vfiprintf_r+0x24c>
 8008798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800879c:	f04f 0901 	mov.w	r9, #1
 80087a0:	4623      	mov	r3, r4
 80087a2:	469a      	mov	sl, r3
 80087a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087a8:	b10a      	cbz	r2, 80087ae <_vfiprintf_r+0xa2>
 80087aa:	2a25      	cmp	r2, #37	; 0x25
 80087ac:	d1f9      	bne.n	80087a2 <_vfiprintf_r+0x96>
 80087ae:	ebba 0b04 	subs.w	fp, sl, r4
 80087b2:	d00b      	beq.n	80087cc <_vfiprintf_r+0xc0>
 80087b4:	465b      	mov	r3, fp
 80087b6:	4622      	mov	r2, r4
 80087b8:	4629      	mov	r1, r5
 80087ba:	4630      	mov	r0, r6
 80087bc:	f7ff ff93 	bl	80086e6 <__sfputs_r>
 80087c0:	3001      	adds	r0, #1
 80087c2:	f000 80aa 	beq.w	800891a <_vfiprintf_r+0x20e>
 80087c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80087c8:	445a      	add	r2, fp
 80087ca:	9209      	str	r2, [sp, #36]	; 0x24
 80087cc:	f89a 3000 	ldrb.w	r3, [sl]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f000 80a2 	beq.w	800891a <_vfiprintf_r+0x20e>
 80087d6:	2300      	movs	r3, #0
 80087d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087e0:	f10a 0a01 	add.w	sl, sl, #1
 80087e4:	9304      	str	r3, [sp, #16]
 80087e6:	9307      	str	r3, [sp, #28]
 80087e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087ec:	931a      	str	r3, [sp, #104]	; 0x68
 80087ee:	4654      	mov	r4, sl
 80087f0:	2205      	movs	r2, #5
 80087f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087f6:	4858      	ldr	r0, [pc, #352]	; (8008958 <_vfiprintf_r+0x24c>)
 80087f8:	f7f7 fcea 	bl	80001d0 <memchr>
 80087fc:	9a04      	ldr	r2, [sp, #16]
 80087fe:	b9d8      	cbnz	r0, 8008838 <_vfiprintf_r+0x12c>
 8008800:	06d1      	lsls	r1, r2, #27
 8008802:	bf44      	itt	mi
 8008804:	2320      	movmi	r3, #32
 8008806:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800880a:	0713      	lsls	r3, r2, #28
 800880c:	bf44      	itt	mi
 800880e:	232b      	movmi	r3, #43	; 0x2b
 8008810:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008814:	f89a 3000 	ldrb.w	r3, [sl]
 8008818:	2b2a      	cmp	r3, #42	; 0x2a
 800881a:	d015      	beq.n	8008848 <_vfiprintf_r+0x13c>
 800881c:	9a07      	ldr	r2, [sp, #28]
 800881e:	4654      	mov	r4, sl
 8008820:	2000      	movs	r0, #0
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4621      	mov	r1, r4
 8008828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800882c:	3b30      	subs	r3, #48	; 0x30
 800882e:	2b09      	cmp	r3, #9
 8008830:	d94e      	bls.n	80088d0 <_vfiprintf_r+0x1c4>
 8008832:	b1b0      	cbz	r0, 8008862 <_vfiprintf_r+0x156>
 8008834:	9207      	str	r2, [sp, #28]
 8008836:	e014      	b.n	8008862 <_vfiprintf_r+0x156>
 8008838:	eba0 0308 	sub.w	r3, r0, r8
 800883c:	fa09 f303 	lsl.w	r3, r9, r3
 8008840:	4313      	orrs	r3, r2
 8008842:	9304      	str	r3, [sp, #16]
 8008844:	46a2      	mov	sl, r4
 8008846:	e7d2      	b.n	80087ee <_vfiprintf_r+0xe2>
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	1d19      	adds	r1, r3, #4
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	9103      	str	r1, [sp, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	bfbb      	ittet	lt
 8008854:	425b      	neglt	r3, r3
 8008856:	f042 0202 	orrlt.w	r2, r2, #2
 800885a:	9307      	strge	r3, [sp, #28]
 800885c:	9307      	strlt	r3, [sp, #28]
 800885e:	bfb8      	it	lt
 8008860:	9204      	strlt	r2, [sp, #16]
 8008862:	7823      	ldrb	r3, [r4, #0]
 8008864:	2b2e      	cmp	r3, #46	; 0x2e
 8008866:	d10c      	bne.n	8008882 <_vfiprintf_r+0x176>
 8008868:	7863      	ldrb	r3, [r4, #1]
 800886a:	2b2a      	cmp	r3, #42	; 0x2a
 800886c:	d135      	bne.n	80088da <_vfiprintf_r+0x1ce>
 800886e:	9b03      	ldr	r3, [sp, #12]
 8008870:	1d1a      	adds	r2, r3, #4
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	9203      	str	r2, [sp, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	bfb8      	it	lt
 800887a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800887e:	3402      	adds	r4, #2
 8008880:	9305      	str	r3, [sp, #20]
 8008882:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008968 <_vfiprintf_r+0x25c>
 8008886:	7821      	ldrb	r1, [r4, #0]
 8008888:	2203      	movs	r2, #3
 800888a:	4650      	mov	r0, sl
 800888c:	f7f7 fca0 	bl	80001d0 <memchr>
 8008890:	b140      	cbz	r0, 80088a4 <_vfiprintf_r+0x198>
 8008892:	2340      	movs	r3, #64	; 0x40
 8008894:	eba0 000a 	sub.w	r0, r0, sl
 8008898:	fa03 f000 	lsl.w	r0, r3, r0
 800889c:	9b04      	ldr	r3, [sp, #16]
 800889e:	4303      	orrs	r3, r0
 80088a0:	3401      	adds	r4, #1
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a8:	482c      	ldr	r0, [pc, #176]	; (800895c <_vfiprintf_r+0x250>)
 80088aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80088ae:	2206      	movs	r2, #6
 80088b0:	f7f7 fc8e 	bl	80001d0 <memchr>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	d03f      	beq.n	8008938 <_vfiprintf_r+0x22c>
 80088b8:	4b29      	ldr	r3, [pc, #164]	; (8008960 <_vfiprintf_r+0x254>)
 80088ba:	bb1b      	cbnz	r3, 8008904 <_vfiprintf_r+0x1f8>
 80088bc:	9b03      	ldr	r3, [sp, #12]
 80088be:	3307      	adds	r3, #7
 80088c0:	f023 0307 	bic.w	r3, r3, #7
 80088c4:	3308      	adds	r3, #8
 80088c6:	9303      	str	r3, [sp, #12]
 80088c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ca:	443b      	add	r3, r7
 80088cc:	9309      	str	r3, [sp, #36]	; 0x24
 80088ce:	e767      	b.n	80087a0 <_vfiprintf_r+0x94>
 80088d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088d4:	460c      	mov	r4, r1
 80088d6:	2001      	movs	r0, #1
 80088d8:	e7a5      	b.n	8008826 <_vfiprintf_r+0x11a>
 80088da:	2300      	movs	r3, #0
 80088dc:	3401      	adds	r4, #1
 80088de:	9305      	str	r3, [sp, #20]
 80088e0:	4619      	mov	r1, r3
 80088e2:	f04f 0c0a 	mov.w	ip, #10
 80088e6:	4620      	mov	r0, r4
 80088e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088ec:	3a30      	subs	r2, #48	; 0x30
 80088ee:	2a09      	cmp	r2, #9
 80088f0:	d903      	bls.n	80088fa <_vfiprintf_r+0x1ee>
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0c5      	beq.n	8008882 <_vfiprintf_r+0x176>
 80088f6:	9105      	str	r1, [sp, #20]
 80088f8:	e7c3      	b.n	8008882 <_vfiprintf_r+0x176>
 80088fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80088fe:	4604      	mov	r4, r0
 8008900:	2301      	movs	r3, #1
 8008902:	e7f0      	b.n	80088e6 <_vfiprintf_r+0x1da>
 8008904:	ab03      	add	r3, sp, #12
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	462a      	mov	r2, r5
 800890a:	4b16      	ldr	r3, [pc, #88]	; (8008964 <_vfiprintf_r+0x258>)
 800890c:	a904      	add	r1, sp, #16
 800890e:	4630      	mov	r0, r6
 8008910:	f3af 8000 	nop.w
 8008914:	4607      	mov	r7, r0
 8008916:	1c78      	adds	r0, r7, #1
 8008918:	d1d6      	bne.n	80088c8 <_vfiprintf_r+0x1bc>
 800891a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800891c:	07d9      	lsls	r1, r3, #31
 800891e:	d405      	bmi.n	800892c <_vfiprintf_r+0x220>
 8008920:	89ab      	ldrh	r3, [r5, #12]
 8008922:	059a      	lsls	r2, r3, #22
 8008924:	d402      	bmi.n	800892c <_vfiprintf_r+0x220>
 8008926:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008928:	f7ff fd7f 	bl	800842a <__retarget_lock_release_recursive>
 800892c:	89ab      	ldrh	r3, [r5, #12]
 800892e:	065b      	lsls	r3, r3, #25
 8008930:	f53f af12 	bmi.w	8008758 <_vfiprintf_r+0x4c>
 8008934:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008936:	e711      	b.n	800875c <_vfiprintf_r+0x50>
 8008938:	ab03      	add	r3, sp, #12
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	462a      	mov	r2, r5
 800893e:	4b09      	ldr	r3, [pc, #36]	; (8008964 <_vfiprintf_r+0x258>)
 8008940:	a904      	add	r1, sp, #16
 8008942:	4630      	mov	r0, r6
 8008944:	f000 f880 	bl	8008a48 <_printf_i>
 8008948:	e7e4      	b.n	8008914 <_vfiprintf_r+0x208>
 800894a:	bf00      	nop
 800894c:	0800a0e8 	.word	0x0800a0e8
 8008950:	0800a108 	.word	0x0800a108
 8008954:	0800a0c8 	.word	0x0800a0c8
 8008958:	0800a128 	.word	0x0800a128
 800895c:	0800a132 	.word	0x0800a132
 8008960:	00000000 	.word	0x00000000
 8008964:	080086e7 	.word	0x080086e7
 8008968:	0800a12e 	.word	0x0800a12e

0800896c <_printf_common>:
 800896c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008970:	4616      	mov	r6, r2
 8008972:	4699      	mov	r9, r3
 8008974:	688a      	ldr	r2, [r1, #8]
 8008976:	690b      	ldr	r3, [r1, #16]
 8008978:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800897c:	4293      	cmp	r3, r2
 800897e:	bfb8      	it	lt
 8008980:	4613      	movlt	r3, r2
 8008982:	6033      	str	r3, [r6, #0]
 8008984:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008988:	4607      	mov	r7, r0
 800898a:	460c      	mov	r4, r1
 800898c:	b10a      	cbz	r2, 8008992 <_printf_common+0x26>
 800898e:	3301      	adds	r3, #1
 8008990:	6033      	str	r3, [r6, #0]
 8008992:	6823      	ldr	r3, [r4, #0]
 8008994:	0699      	lsls	r1, r3, #26
 8008996:	bf42      	ittt	mi
 8008998:	6833      	ldrmi	r3, [r6, #0]
 800899a:	3302      	addmi	r3, #2
 800899c:	6033      	strmi	r3, [r6, #0]
 800899e:	6825      	ldr	r5, [r4, #0]
 80089a0:	f015 0506 	ands.w	r5, r5, #6
 80089a4:	d106      	bne.n	80089b4 <_printf_common+0x48>
 80089a6:	f104 0a19 	add.w	sl, r4, #25
 80089aa:	68e3      	ldr	r3, [r4, #12]
 80089ac:	6832      	ldr	r2, [r6, #0]
 80089ae:	1a9b      	subs	r3, r3, r2
 80089b0:	42ab      	cmp	r3, r5
 80089b2:	dc26      	bgt.n	8008a02 <_printf_common+0x96>
 80089b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80089b8:	1e13      	subs	r3, r2, #0
 80089ba:	6822      	ldr	r2, [r4, #0]
 80089bc:	bf18      	it	ne
 80089be:	2301      	movne	r3, #1
 80089c0:	0692      	lsls	r2, r2, #26
 80089c2:	d42b      	bmi.n	8008a1c <_printf_common+0xb0>
 80089c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80089c8:	4649      	mov	r1, r9
 80089ca:	4638      	mov	r0, r7
 80089cc:	47c0      	blx	r8
 80089ce:	3001      	adds	r0, #1
 80089d0:	d01e      	beq.n	8008a10 <_printf_common+0xa4>
 80089d2:	6823      	ldr	r3, [r4, #0]
 80089d4:	68e5      	ldr	r5, [r4, #12]
 80089d6:	6832      	ldr	r2, [r6, #0]
 80089d8:	f003 0306 	and.w	r3, r3, #6
 80089dc:	2b04      	cmp	r3, #4
 80089de:	bf08      	it	eq
 80089e0:	1aad      	subeq	r5, r5, r2
 80089e2:	68a3      	ldr	r3, [r4, #8]
 80089e4:	6922      	ldr	r2, [r4, #16]
 80089e6:	bf0c      	ite	eq
 80089e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089ec:	2500      	movne	r5, #0
 80089ee:	4293      	cmp	r3, r2
 80089f0:	bfc4      	itt	gt
 80089f2:	1a9b      	subgt	r3, r3, r2
 80089f4:	18ed      	addgt	r5, r5, r3
 80089f6:	2600      	movs	r6, #0
 80089f8:	341a      	adds	r4, #26
 80089fa:	42b5      	cmp	r5, r6
 80089fc:	d11a      	bne.n	8008a34 <_printf_common+0xc8>
 80089fe:	2000      	movs	r0, #0
 8008a00:	e008      	b.n	8008a14 <_printf_common+0xa8>
 8008a02:	2301      	movs	r3, #1
 8008a04:	4652      	mov	r2, sl
 8008a06:	4649      	mov	r1, r9
 8008a08:	4638      	mov	r0, r7
 8008a0a:	47c0      	blx	r8
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d103      	bne.n	8008a18 <_printf_common+0xac>
 8008a10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a18:	3501      	adds	r5, #1
 8008a1a:	e7c6      	b.n	80089aa <_printf_common+0x3e>
 8008a1c:	18e1      	adds	r1, r4, r3
 8008a1e:	1c5a      	adds	r2, r3, #1
 8008a20:	2030      	movs	r0, #48	; 0x30
 8008a22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a26:	4422      	add	r2, r4
 8008a28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a30:	3302      	adds	r3, #2
 8008a32:	e7c7      	b.n	80089c4 <_printf_common+0x58>
 8008a34:	2301      	movs	r3, #1
 8008a36:	4622      	mov	r2, r4
 8008a38:	4649      	mov	r1, r9
 8008a3a:	4638      	mov	r0, r7
 8008a3c:	47c0      	blx	r8
 8008a3e:	3001      	adds	r0, #1
 8008a40:	d0e6      	beq.n	8008a10 <_printf_common+0xa4>
 8008a42:	3601      	adds	r6, #1
 8008a44:	e7d9      	b.n	80089fa <_printf_common+0x8e>
	...

08008a48 <_printf_i>:
 8008a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a4c:	7e0f      	ldrb	r7, [r1, #24]
 8008a4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008a50:	2f78      	cmp	r7, #120	; 0x78
 8008a52:	4691      	mov	r9, r2
 8008a54:	4680      	mov	r8, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	469a      	mov	sl, r3
 8008a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008a5e:	d807      	bhi.n	8008a70 <_printf_i+0x28>
 8008a60:	2f62      	cmp	r7, #98	; 0x62
 8008a62:	d80a      	bhi.n	8008a7a <_printf_i+0x32>
 8008a64:	2f00      	cmp	r7, #0
 8008a66:	f000 80d8 	beq.w	8008c1a <_printf_i+0x1d2>
 8008a6a:	2f58      	cmp	r7, #88	; 0x58
 8008a6c:	f000 80a3 	beq.w	8008bb6 <_printf_i+0x16e>
 8008a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008a78:	e03a      	b.n	8008af0 <_printf_i+0xa8>
 8008a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008a7e:	2b15      	cmp	r3, #21
 8008a80:	d8f6      	bhi.n	8008a70 <_printf_i+0x28>
 8008a82:	a101      	add	r1, pc, #4	; (adr r1, 8008a88 <_printf_i+0x40>)
 8008a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a88:	08008ae1 	.word	0x08008ae1
 8008a8c:	08008af5 	.word	0x08008af5
 8008a90:	08008a71 	.word	0x08008a71
 8008a94:	08008a71 	.word	0x08008a71
 8008a98:	08008a71 	.word	0x08008a71
 8008a9c:	08008a71 	.word	0x08008a71
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008a71 	.word	0x08008a71
 8008aa8:	08008a71 	.word	0x08008a71
 8008aac:	08008a71 	.word	0x08008a71
 8008ab0:	08008a71 	.word	0x08008a71
 8008ab4:	08008c01 	.word	0x08008c01
 8008ab8:	08008b25 	.word	0x08008b25
 8008abc:	08008be3 	.word	0x08008be3
 8008ac0:	08008a71 	.word	0x08008a71
 8008ac4:	08008a71 	.word	0x08008a71
 8008ac8:	08008c23 	.word	0x08008c23
 8008acc:	08008a71 	.word	0x08008a71
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008a71 	.word	0x08008a71
 8008ad8:	08008a71 	.word	0x08008a71
 8008adc:	08008beb 	.word	0x08008beb
 8008ae0:	682b      	ldr	r3, [r5, #0]
 8008ae2:	1d1a      	adds	r2, r3, #4
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	602a      	str	r2, [r5, #0]
 8008ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008af0:	2301      	movs	r3, #1
 8008af2:	e0a3      	b.n	8008c3c <_printf_i+0x1f4>
 8008af4:	6820      	ldr	r0, [r4, #0]
 8008af6:	6829      	ldr	r1, [r5, #0]
 8008af8:	0606      	lsls	r6, r0, #24
 8008afa:	f101 0304 	add.w	r3, r1, #4
 8008afe:	d50a      	bpl.n	8008b16 <_printf_i+0xce>
 8008b00:	680e      	ldr	r6, [r1, #0]
 8008b02:	602b      	str	r3, [r5, #0]
 8008b04:	2e00      	cmp	r6, #0
 8008b06:	da03      	bge.n	8008b10 <_printf_i+0xc8>
 8008b08:	232d      	movs	r3, #45	; 0x2d
 8008b0a:	4276      	negs	r6, r6
 8008b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b10:	485e      	ldr	r0, [pc, #376]	; (8008c8c <_printf_i+0x244>)
 8008b12:	230a      	movs	r3, #10
 8008b14:	e019      	b.n	8008b4a <_printf_i+0x102>
 8008b16:	680e      	ldr	r6, [r1, #0]
 8008b18:	602b      	str	r3, [r5, #0]
 8008b1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b1e:	bf18      	it	ne
 8008b20:	b236      	sxthne	r6, r6
 8008b22:	e7ef      	b.n	8008b04 <_printf_i+0xbc>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	6820      	ldr	r0, [r4, #0]
 8008b28:	1d19      	adds	r1, r3, #4
 8008b2a:	6029      	str	r1, [r5, #0]
 8008b2c:	0601      	lsls	r1, r0, #24
 8008b2e:	d501      	bpl.n	8008b34 <_printf_i+0xec>
 8008b30:	681e      	ldr	r6, [r3, #0]
 8008b32:	e002      	b.n	8008b3a <_printf_i+0xf2>
 8008b34:	0646      	lsls	r6, r0, #25
 8008b36:	d5fb      	bpl.n	8008b30 <_printf_i+0xe8>
 8008b38:	881e      	ldrh	r6, [r3, #0]
 8008b3a:	4854      	ldr	r0, [pc, #336]	; (8008c8c <_printf_i+0x244>)
 8008b3c:	2f6f      	cmp	r7, #111	; 0x6f
 8008b3e:	bf0c      	ite	eq
 8008b40:	2308      	moveq	r3, #8
 8008b42:	230a      	movne	r3, #10
 8008b44:	2100      	movs	r1, #0
 8008b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b4a:	6865      	ldr	r5, [r4, #4]
 8008b4c:	60a5      	str	r5, [r4, #8]
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	bfa2      	ittt	ge
 8008b52:	6821      	ldrge	r1, [r4, #0]
 8008b54:	f021 0104 	bicge.w	r1, r1, #4
 8008b58:	6021      	strge	r1, [r4, #0]
 8008b5a:	b90e      	cbnz	r6, 8008b60 <_printf_i+0x118>
 8008b5c:	2d00      	cmp	r5, #0
 8008b5e:	d04d      	beq.n	8008bfc <_printf_i+0x1b4>
 8008b60:	4615      	mov	r5, r2
 8008b62:	fbb6 f1f3 	udiv	r1, r6, r3
 8008b66:	fb03 6711 	mls	r7, r3, r1, r6
 8008b6a:	5dc7      	ldrb	r7, [r0, r7]
 8008b6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008b70:	4637      	mov	r7, r6
 8008b72:	42bb      	cmp	r3, r7
 8008b74:	460e      	mov	r6, r1
 8008b76:	d9f4      	bls.n	8008b62 <_printf_i+0x11a>
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d10b      	bne.n	8008b94 <_printf_i+0x14c>
 8008b7c:	6823      	ldr	r3, [r4, #0]
 8008b7e:	07de      	lsls	r6, r3, #31
 8008b80:	d508      	bpl.n	8008b94 <_printf_i+0x14c>
 8008b82:	6923      	ldr	r3, [r4, #16]
 8008b84:	6861      	ldr	r1, [r4, #4]
 8008b86:	4299      	cmp	r1, r3
 8008b88:	bfde      	ittt	le
 8008b8a:	2330      	movle	r3, #48	; 0x30
 8008b8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008b94:	1b52      	subs	r2, r2, r5
 8008b96:	6122      	str	r2, [r4, #16]
 8008b98:	f8cd a000 	str.w	sl, [sp]
 8008b9c:	464b      	mov	r3, r9
 8008b9e:	aa03      	add	r2, sp, #12
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4640      	mov	r0, r8
 8008ba4:	f7ff fee2 	bl	800896c <_printf_common>
 8008ba8:	3001      	adds	r0, #1
 8008baa:	d14c      	bne.n	8008c46 <_printf_i+0x1fe>
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb0:	b004      	add	sp, #16
 8008bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb6:	4835      	ldr	r0, [pc, #212]	; (8008c8c <_printf_i+0x244>)
 8008bb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008bbc:	6829      	ldr	r1, [r5, #0]
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008bc4:	6029      	str	r1, [r5, #0]
 8008bc6:	061d      	lsls	r5, r3, #24
 8008bc8:	d514      	bpl.n	8008bf4 <_printf_i+0x1ac>
 8008bca:	07df      	lsls	r7, r3, #31
 8008bcc:	bf44      	itt	mi
 8008bce:	f043 0320 	orrmi.w	r3, r3, #32
 8008bd2:	6023      	strmi	r3, [r4, #0]
 8008bd4:	b91e      	cbnz	r6, 8008bde <_printf_i+0x196>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f023 0320 	bic.w	r3, r3, #32
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	2310      	movs	r3, #16
 8008be0:	e7b0      	b.n	8008b44 <_printf_i+0xfc>
 8008be2:	6823      	ldr	r3, [r4, #0]
 8008be4:	f043 0320 	orr.w	r3, r3, #32
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	2378      	movs	r3, #120	; 0x78
 8008bec:	4828      	ldr	r0, [pc, #160]	; (8008c90 <_printf_i+0x248>)
 8008bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008bf2:	e7e3      	b.n	8008bbc <_printf_i+0x174>
 8008bf4:	0659      	lsls	r1, r3, #25
 8008bf6:	bf48      	it	mi
 8008bf8:	b2b6      	uxthmi	r6, r6
 8008bfa:	e7e6      	b.n	8008bca <_printf_i+0x182>
 8008bfc:	4615      	mov	r5, r2
 8008bfe:	e7bb      	b.n	8008b78 <_printf_i+0x130>
 8008c00:	682b      	ldr	r3, [r5, #0]
 8008c02:	6826      	ldr	r6, [r4, #0]
 8008c04:	6961      	ldr	r1, [r4, #20]
 8008c06:	1d18      	adds	r0, r3, #4
 8008c08:	6028      	str	r0, [r5, #0]
 8008c0a:	0635      	lsls	r5, r6, #24
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	d501      	bpl.n	8008c14 <_printf_i+0x1cc>
 8008c10:	6019      	str	r1, [r3, #0]
 8008c12:	e002      	b.n	8008c1a <_printf_i+0x1d2>
 8008c14:	0670      	lsls	r0, r6, #25
 8008c16:	d5fb      	bpl.n	8008c10 <_printf_i+0x1c8>
 8008c18:	8019      	strh	r1, [r3, #0]
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	6123      	str	r3, [r4, #16]
 8008c1e:	4615      	mov	r5, r2
 8008c20:	e7ba      	b.n	8008b98 <_printf_i+0x150>
 8008c22:	682b      	ldr	r3, [r5, #0]
 8008c24:	1d1a      	adds	r2, r3, #4
 8008c26:	602a      	str	r2, [r5, #0]
 8008c28:	681d      	ldr	r5, [r3, #0]
 8008c2a:	6862      	ldr	r2, [r4, #4]
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4628      	mov	r0, r5
 8008c30:	f7f7 face 	bl	80001d0 <memchr>
 8008c34:	b108      	cbz	r0, 8008c3a <_printf_i+0x1f2>
 8008c36:	1b40      	subs	r0, r0, r5
 8008c38:	6060      	str	r0, [r4, #4]
 8008c3a:	6863      	ldr	r3, [r4, #4]
 8008c3c:	6123      	str	r3, [r4, #16]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c44:	e7a8      	b.n	8008b98 <_printf_i+0x150>
 8008c46:	6923      	ldr	r3, [r4, #16]
 8008c48:	462a      	mov	r2, r5
 8008c4a:	4649      	mov	r1, r9
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	47d0      	blx	sl
 8008c50:	3001      	adds	r0, #1
 8008c52:	d0ab      	beq.n	8008bac <_printf_i+0x164>
 8008c54:	6823      	ldr	r3, [r4, #0]
 8008c56:	079b      	lsls	r3, r3, #30
 8008c58:	d413      	bmi.n	8008c82 <_printf_i+0x23a>
 8008c5a:	68e0      	ldr	r0, [r4, #12]
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	4298      	cmp	r0, r3
 8008c60:	bfb8      	it	lt
 8008c62:	4618      	movlt	r0, r3
 8008c64:	e7a4      	b.n	8008bb0 <_printf_i+0x168>
 8008c66:	2301      	movs	r3, #1
 8008c68:	4632      	mov	r2, r6
 8008c6a:	4649      	mov	r1, r9
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	47d0      	blx	sl
 8008c70:	3001      	adds	r0, #1
 8008c72:	d09b      	beq.n	8008bac <_printf_i+0x164>
 8008c74:	3501      	adds	r5, #1
 8008c76:	68e3      	ldr	r3, [r4, #12]
 8008c78:	9903      	ldr	r1, [sp, #12]
 8008c7a:	1a5b      	subs	r3, r3, r1
 8008c7c:	42ab      	cmp	r3, r5
 8008c7e:	dcf2      	bgt.n	8008c66 <_printf_i+0x21e>
 8008c80:	e7eb      	b.n	8008c5a <_printf_i+0x212>
 8008c82:	2500      	movs	r5, #0
 8008c84:	f104 0619 	add.w	r6, r4, #25
 8008c88:	e7f5      	b.n	8008c76 <_printf_i+0x22e>
 8008c8a:	bf00      	nop
 8008c8c:	0800a139 	.word	0x0800a139
 8008c90:	0800a14a 	.word	0x0800a14a

08008c94 <_sbrk_r>:
 8008c94:	b538      	push	{r3, r4, r5, lr}
 8008c96:	4d06      	ldr	r5, [pc, #24]	; (8008cb0 <_sbrk_r+0x1c>)
 8008c98:	2300      	movs	r3, #0
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	602b      	str	r3, [r5, #0]
 8008ca0:	f7fa fd22 	bl	80036e8 <_sbrk>
 8008ca4:	1c43      	adds	r3, r0, #1
 8008ca6:	d102      	bne.n	8008cae <_sbrk_r+0x1a>
 8008ca8:	682b      	ldr	r3, [r5, #0]
 8008caa:	b103      	cbz	r3, 8008cae <_sbrk_r+0x1a>
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	bd38      	pop	{r3, r4, r5, pc}
 8008cb0:	200006b4 	.word	0x200006b4

08008cb4 <__sread>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cbc:	f000 f8a0 	bl	8008e00 <_read_r>
 8008cc0:	2800      	cmp	r0, #0
 8008cc2:	bfab      	itete	ge
 8008cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8008cc8:	181b      	addge	r3, r3, r0
 8008cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008cce:	bfac      	ite	ge
 8008cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8008cd2:	81a3      	strhlt	r3, [r4, #12]
 8008cd4:	bd10      	pop	{r4, pc}

08008cd6 <__swrite>:
 8008cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cda:	461f      	mov	r7, r3
 8008cdc:	898b      	ldrh	r3, [r1, #12]
 8008cde:	05db      	lsls	r3, r3, #23
 8008ce0:	4605      	mov	r5, r0
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	4616      	mov	r6, r2
 8008ce6:	d505      	bpl.n	8008cf4 <__swrite+0x1e>
 8008ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cec:	2302      	movs	r3, #2
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f000 f868 	bl	8008dc4 <_lseek_r>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	4632      	mov	r2, r6
 8008d02:	463b      	mov	r3, r7
 8008d04:	4628      	mov	r0, r5
 8008d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d0a:	f000 b817 	b.w	8008d3c <_write_r>

08008d0e <__sseek>:
 8008d0e:	b510      	push	{r4, lr}
 8008d10:	460c      	mov	r4, r1
 8008d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d16:	f000 f855 	bl	8008dc4 <_lseek_r>
 8008d1a:	1c43      	adds	r3, r0, #1
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	bf15      	itete	ne
 8008d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d2a:	81a3      	strheq	r3, [r4, #12]
 8008d2c:	bf18      	it	ne
 8008d2e:	81a3      	strhne	r3, [r4, #12]
 8008d30:	bd10      	pop	{r4, pc}

08008d32 <__sclose>:
 8008d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d36:	f000 b813 	b.w	8008d60 <_close_r>
	...

08008d3c <_write_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d07      	ldr	r5, [pc, #28]	; (8008d5c <_write_r+0x20>)
 8008d40:	4604      	mov	r4, r0
 8008d42:	4608      	mov	r0, r1
 8008d44:	4611      	mov	r1, r2
 8008d46:	2200      	movs	r2, #0
 8008d48:	602a      	str	r2, [r5, #0]
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	f7fa fc7b 	bl	8003646 <_write>
 8008d50:	1c43      	adds	r3, r0, #1
 8008d52:	d102      	bne.n	8008d5a <_write_r+0x1e>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	b103      	cbz	r3, 8008d5a <_write_r+0x1e>
 8008d58:	6023      	str	r3, [r4, #0]
 8008d5a:	bd38      	pop	{r3, r4, r5, pc}
 8008d5c:	200006b4 	.word	0x200006b4

08008d60 <_close_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d06      	ldr	r5, [pc, #24]	; (8008d7c <_close_r+0x1c>)
 8008d64:	2300      	movs	r3, #0
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	f7fa fc87 	bl	800367e <_close>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_close_r+0x1a>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_close_r+0x1a>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	200006b4 	.word	0x200006b4

08008d80 <_fstat_r>:
 8008d80:	b538      	push	{r3, r4, r5, lr}
 8008d82:	4d07      	ldr	r5, [pc, #28]	; (8008da0 <_fstat_r+0x20>)
 8008d84:	2300      	movs	r3, #0
 8008d86:	4604      	mov	r4, r0
 8008d88:	4608      	mov	r0, r1
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	602b      	str	r3, [r5, #0]
 8008d8e:	f7fa fc82 	bl	8003696 <_fstat>
 8008d92:	1c43      	adds	r3, r0, #1
 8008d94:	d102      	bne.n	8008d9c <_fstat_r+0x1c>
 8008d96:	682b      	ldr	r3, [r5, #0]
 8008d98:	b103      	cbz	r3, 8008d9c <_fstat_r+0x1c>
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
 8008d9e:	bf00      	nop
 8008da0:	200006b4 	.word	0x200006b4

08008da4 <_isatty_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d06      	ldr	r5, [pc, #24]	; (8008dc0 <_isatty_r+0x1c>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	602b      	str	r3, [r5, #0]
 8008db0:	f7fa fc81 	bl	80036b6 <_isatty>
 8008db4:	1c43      	adds	r3, r0, #1
 8008db6:	d102      	bne.n	8008dbe <_isatty_r+0x1a>
 8008db8:	682b      	ldr	r3, [r5, #0]
 8008dba:	b103      	cbz	r3, 8008dbe <_isatty_r+0x1a>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	bd38      	pop	{r3, r4, r5, pc}
 8008dc0:	200006b4 	.word	0x200006b4

08008dc4 <_lseek_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	4d07      	ldr	r5, [pc, #28]	; (8008de4 <_lseek_r+0x20>)
 8008dc8:	4604      	mov	r4, r0
 8008dca:	4608      	mov	r0, r1
 8008dcc:	4611      	mov	r1, r2
 8008dce:	2200      	movs	r2, #0
 8008dd0:	602a      	str	r2, [r5, #0]
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f7fa fc7a 	bl	80036cc <_lseek>
 8008dd8:	1c43      	adds	r3, r0, #1
 8008dda:	d102      	bne.n	8008de2 <_lseek_r+0x1e>
 8008ddc:	682b      	ldr	r3, [r5, #0]
 8008dde:	b103      	cbz	r3, 8008de2 <_lseek_r+0x1e>
 8008de0:	6023      	str	r3, [r4, #0]
 8008de2:	bd38      	pop	{r3, r4, r5, pc}
 8008de4:	200006b4 	.word	0x200006b4

08008de8 <__malloc_lock>:
 8008de8:	4801      	ldr	r0, [pc, #4]	; (8008df0 <__malloc_lock+0x8>)
 8008dea:	f7ff bb1d 	b.w	8008428 <__retarget_lock_acquire_recursive>
 8008dee:	bf00      	nop
 8008df0:	200006a8 	.word	0x200006a8

08008df4 <__malloc_unlock>:
 8008df4:	4801      	ldr	r0, [pc, #4]	; (8008dfc <__malloc_unlock+0x8>)
 8008df6:	f7ff bb18 	b.w	800842a <__retarget_lock_release_recursive>
 8008dfa:	bf00      	nop
 8008dfc:	200006a8 	.word	0x200006a8

08008e00 <_read_r>:
 8008e00:	b538      	push	{r3, r4, r5, lr}
 8008e02:	4d07      	ldr	r5, [pc, #28]	; (8008e20 <_read_r+0x20>)
 8008e04:	4604      	mov	r4, r0
 8008e06:	4608      	mov	r0, r1
 8008e08:	4611      	mov	r1, r2
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	602a      	str	r2, [r5, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	f7fa fbfc 	bl	800360c <_read>
 8008e14:	1c43      	adds	r3, r0, #1
 8008e16:	d102      	bne.n	8008e1e <_read_r+0x1e>
 8008e18:	682b      	ldr	r3, [r5, #0]
 8008e1a:	b103      	cbz	r3, 8008e1e <_read_r+0x1e>
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	bd38      	pop	{r3, r4, r5, pc}
 8008e20:	200006b4 	.word	0x200006b4

08008e24 <cosf>:
 8008e24:	ee10 3a10 	vmov	r3, s0
 8008e28:	b507      	push	{r0, r1, r2, lr}
 8008e2a:	4a1e      	ldr	r2, [pc, #120]	; (8008ea4 <cosf+0x80>)
 8008e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e30:	4293      	cmp	r3, r2
 8008e32:	dc06      	bgt.n	8008e42 <cosf+0x1e>
 8008e34:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8008ea8 <cosf+0x84>
 8008e38:	b003      	add	sp, #12
 8008e3a:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e3e:	f000 ba85 	b.w	800934c <__kernel_cosf>
 8008e42:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008e46:	db04      	blt.n	8008e52 <cosf+0x2e>
 8008e48:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008e4c:	b003      	add	sp, #12
 8008e4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008e52:	4668      	mov	r0, sp
 8008e54:	f000 f93e 	bl	80090d4 <__ieee754_rem_pio2f>
 8008e58:	f000 0003 	and.w	r0, r0, #3
 8008e5c:	2801      	cmp	r0, #1
 8008e5e:	d009      	beq.n	8008e74 <cosf+0x50>
 8008e60:	2802      	cmp	r0, #2
 8008e62:	d010      	beq.n	8008e86 <cosf+0x62>
 8008e64:	b9b0      	cbnz	r0, 8008e94 <cosf+0x70>
 8008e66:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e6a:	ed9d 0a00 	vldr	s0, [sp]
 8008e6e:	f000 fa6d 	bl	800934c <__kernel_cosf>
 8008e72:	e7eb      	b.n	8008e4c <cosf+0x28>
 8008e74:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e78:	ed9d 0a00 	vldr	s0, [sp]
 8008e7c:	f000 fd3c 	bl	80098f8 <__kernel_sinf>
 8008e80:	eeb1 0a40 	vneg.f32	s0, s0
 8008e84:	e7e2      	b.n	8008e4c <cosf+0x28>
 8008e86:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e8a:	ed9d 0a00 	vldr	s0, [sp]
 8008e8e:	f000 fa5d 	bl	800934c <__kernel_cosf>
 8008e92:	e7f5      	b.n	8008e80 <cosf+0x5c>
 8008e94:	eddd 0a01 	vldr	s1, [sp, #4]
 8008e98:	ed9d 0a00 	vldr	s0, [sp]
 8008e9c:	2001      	movs	r0, #1
 8008e9e:	f000 fd2b 	bl	80098f8 <__kernel_sinf>
 8008ea2:	e7d3      	b.n	8008e4c <cosf+0x28>
 8008ea4:	3f490fd8 	.word	0x3f490fd8
 8008ea8:	00000000 	.word	0x00000000

08008eac <sinf>:
 8008eac:	ee10 3a10 	vmov	r3, s0
 8008eb0:	b507      	push	{r0, r1, r2, lr}
 8008eb2:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <sinf+0x84>)
 8008eb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	dc07      	bgt.n	8008ecc <sinf+0x20>
 8008ebc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8008f34 <sinf+0x88>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	b003      	add	sp, #12
 8008ec4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ec8:	f000 bd16 	b.w	80098f8 <__kernel_sinf>
 8008ecc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008ed0:	db04      	blt.n	8008edc <sinf+0x30>
 8008ed2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8008ed6:	b003      	add	sp, #12
 8008ed8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008edc:	4668      	mov	r0, sp
 8008ede:	f000 f8f9 	bl	80090d4 <__ieee754_rem_pio2f>
 8008ee2:	f000 0003 	and.w	r0, r0, #3
 8008ee6:	2801      	cmp	r0, #1
 8008ee8:	d00a      	beq.n	8008f00 <sinf+0x54>
 8008eea:	2802      	cmp	r0, #2
 8008eec:	d00f      	beq.n	8008f0e <sinf+0x62>
 8008eee:	b9c0      	cbnz	r0, 8008f22 <sinf+0x76>
 8008ef0:	eddd 0a01 	vldr	s1, [sp, #4]
 8008ef4:	ed9d 0a00 	vldr	s0, [sp]
 8008ef8:	2001      	movs	r0, #1
 8008efa:	f000 fcfd 	bl	80098f8 <__kernel_sinf>
 8008efe:	e7ea      	b.n	8008ed6 <sinf+0x2a>
 8008f00:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f04:	ed9d 0a00 	vldr	s0, [sp]
 8008f08:	f000 fa20 	bl	800934c <__kernel_cosf>
 8008f0c:	e7e3      	b.n	8008ed6 <sinf+0x2a>
 8008f0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f12:	ed9d 0a00 	vldr	s0, [sp]
 8008f16:	2001      	movs	r0, #1
 8008f18:	f000 fcee 	bl	80098f8 <__kernel_sinf>
 8008f1c:	eeb1 0a40 	vneg.f32	s0, s0
 8008f20:	e7d9      	b.n	8008ed6 <sinf+0x2a>
 8008f22:	eddd 0a01 	vldr	s1, [sp, #4]
 8008f26:	ed9d 0a00 	vldr	s0, [sp]
 8008f2a:	f000 fa0f 	bl	800934c <__kernel_cosf>
 8008f2e:	e7f5      	b.n	8008f1c <sinf+0x70>
 8008f30:	3f490fd8 	.word	0x3f490fd8
 8008f34:	00000000 	.word	0x00000000

08008f38 <atan2>:
 8008f38:	f000 b802 	b.w	8008f40 <__ieee754_atan2>
 8008f3c:	0000      	movs	r0, r0
	...

08008f40 <__ieee754_atan2>:
 8008f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f44:	ec57 6b11 	vmov	r6, r7, d1
 8008f48:	4273      	negs	r3, r6
 8008f4a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80090d0 <__ieee754_atan2+0x190>
 8008f4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008f52:	4333      	orrs	r3, r6
 8008f54:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008f58:	4573      	cmp	r3, lr
 8008f5a:	ec51 0b10 	vmov	r0, r1, d0
 8008f5e:	ee11 8a10 	vmov	r8, s2
 8008f62:	d80a      	bhi.n	8008f7a <__ieee754_atan2+0x3a>
 8008f64:	4244      	negs	r4, r0
 8008f66:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f6a:	4304      	orrs	r4, r0
 8008f6c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008f70:	4574      	cmp	r4, lr
 8008f72:	ee10 9a10 	vmov	r9, s0
 8008f76:	468c      	mov	ip, r1
 8008f78:	d907      	bls.n	8008f8a <__ieee754_atan2+0x4a>
 8008f7a:	4632      	mov	r2, r6
 8008f7c:	463b      	mov	r3, r7
 8008f7e:	f7f7 f97d 	bl	800027c <__adddf3>
 8008f82:	ec41 0b10 	vmov	d0, r0, r1
 8008f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8008f8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008f92:	4334      	orrs	r4, r6
 8008f94:	d103      	bne.n	8008f9e <__ieee754_atan2+0x5e>
 8008f96:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f9a:	f000 bcf5 	b.w	8009988 <atan>
 8008f9e:	17bc      	asrs	r4, r7, #30
 8008fa0:	f004 0402 	and.w	r4, r4, #2
 8008fa4:	ea53 0909 	orrs.w	r9, r3, r9
 8008fa8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8008fac:	d107      	bne.n	8008fbe <__ieee754_atan2+0x7e>
 8008fae:	2c02      	cmp	r4, #2
 8008fb0:	d060      	beq.n	8009074 <__ieee754_atan2+0x134>
 8008fb2:	2c03      	cmp	r4, #3
 8008fb4:	d1e5      	bne.n	8008f82 <__ieee754_atan2+0x42>
 8008fb6:	a142      	add	r1, pc, #264	; (adr r1, 80090c0 <__ieee754_atan2+0x180>)
 8008fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fbc:	e7e1      	b.n	8008f82 <__ieee754_atan2+0x42>
 8008fbe:	ea52 0808 	orrs.w	r8, r2, r8
 8008fc2:	d106      	bne.n	8008fd2 <__ieee754_atan2+0x92>
 8008fc4:	f1bc 0f00 	cmp.w	ip, #0
 8008fc8:	da5f      	bge.n	800908a <__ieee754_atan2+0x14a>
 8008fca:	a13f      	add	r1, pc, #252	; (adr r1, 80090c8 <__ieee754_atan2+0x188>)
 8008fcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fd0:	e7d7      	b.n	8008f82 <__ieee754_atan2+0x42>
 8008fd2:	4572      	cmp	r2, lr
 8008fd4:	d10f      	bne.n	8008ff6 <__ieee754_atan2+0xb6>
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8008fdc:	d107      	bne.n	8008fee <__ieee754_atan2+0xae>
 8008fde:	2c02      	cmp	r4, #2
 8008fe0:	d84c      	bhi.n	800907c <__ieee754_atan2+0x13c>
 8008fe2:	4b35      	ldr	r3, [pc, #212]	; (80090b8 <__ieee754_atan2+0x178>)
 8008fe4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008fe8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008fec:	e7c9      	b.n	8008f82 <__ieee754_atan2+0x42>
 8008fee:	2c02      	cmp	r4, #2
 8008ff0:	d848      	bhi.n	8009084 <__ieee754_atan2+0x144>
 8008ff2:	4b32      	ldr	r3, [pc, #200]	; (80090bc <__ieee754_atan2+0x17c>)
 8008ff4:	e7f6      	b.n	8008fe4 <__ieee754_atan2+0xa4>
 8008ff6:	4573      	cmp	r3, lr
 8008ff8:	d0e4      	beq.n	8008fc4 <__ieee754_atan2+0x84>
 8008ffa:	1a9b      	subs	r3, r3, r2
 8008ffc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8009000:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009004:	da1e      	bge.n	8009044 <__ieee754_atan2+0x104>
 8009006:	2f00      	cmp	r7, #0
 8009008:	da01      	bge.n	800900e <__ieee754_atan2+0xce>
 800900a:	323c      	adds	r2, #60	; 0x3c
 800900c:	db1e      	blt.n	800904c <__ieee754_atan2+0x10c>
 800900e:	4632      	mov	r2, r6
 8009010:	463b      	mov	r3, r7
 8009012:	f7f7 fc13 	bl	800083c <__aeabi_ddiv>
 8009016:	ec41 0b10 	vmov	d0, r0, r1
 800901a:	f000 fe55 	bl	8009cc8 <fabs>
 800901e:	f000 fcb3 	bl	8009988 <atan>
 8009022:	ec51 0b10 	vmov	r0, r1, d0
 8009026:	2c01      	cmp	r4, #1
 8009028:	d013      	beq.n	8009052 <__ieee754_atan2+0x112>
 800902a:	2c02      	cmp	r4, #2
 800902c:	d015      	beq.n	800905a <__ieee754_atan2+0x11a>
 800902e:	2c00      	cmp	r4, #0
 8009030:	d0a7      	beq.n	8008f82 <__ieee754_atan2+0x42>
 8009032:	a319      	add	r3, pc, #100	; (adr r3, 8009098 <__ieee754_atan2+0x158>)
 8009034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009038:	f7f7 f91e 	bl	8000278 <__aeabi_dsub>
 800903c:	a318      	add	r3, pc, #96	; (adr r3, 80090a0 <__ieee754_atan2+0x160>)
 800903e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009042:	e014      	b.n	800906e <__ieee754_atan2+0x12e>
 8009044:	a118      	add	r1, pc, #96	; (adr r1, 80090a8 <__ieee754_atan2+0x168>)
 8009046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800904a:	e7ec      	b.n	8009026 <__ieee754_atan2+0xe6>
 800904c:	2000      	movs	r0, #0
 800904e:	2100      	movs	r1, #0
 8009050:	e7e9      	b.n	8009026 <__ieee754_atan2+0xe6>
 8009052:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009056:	4619      	mov	r1, r3
 8009058:	e793      	b.n	8008f82 <__ieee754_atan2+0x42>
 800905a:	a30f      	add	r3, pc, #60	; (adr r3, 8009098 <__ieee754_atan2+0x158>)
 800905c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009060:	f7f7 f90a 	bl	8000278 <__aeabi_dsub>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	a10d      	add	r1, pc, #52	; (adr r1, 80090a0 <__ieee754_atan2+0x160>)
 800906a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800906e:	f7f7 f903 	bl	8000278 <__aeabi_dsub>
 8009072:	e786      	b.n	8008f82 <__ieee754_atan2+0x42>
 8009074:	a10a      	add	r1, pc, #40	; (adr r1, 80090a0 <__ieee754_atan2+0x160>)
 8009076:	e9d1 0100 	ldrd	r0, r1, [r1]
 800907a:	e782      	b.n	8008f82 <__ieee754_atan2+0x42>
 800907c:	a10c      	add	r1, pc, #48	; (adr r1, 80090b0 <__ieee754_atan2+0x170>)
 800907e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009082:	e77e      	b.n	8008f82 <__ieee754_atan2+0x42>
 8009084:	2000      	movs	r0, #0
 8009086:	2100      	movs	r1, #0
 8009088:	e77b      	b.n	8008f82 <__ieee754_atan2+0x42>
 800908a:	a107      	add	r1, pc, #28	; (adr r1, 80090a8 <__ieee754_atan2+0x168>)
 800908c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009090:	e777      	b.n	8008f82 <__ieee754_atan2+0x42>
 8009092:	bf00      	nop
 8009094:	f3af 8000 	nop.w
 8009098:	33145c07 	.word	0x33145c07
 800909c:	3ca1a626 	.word	0x3ca1a626
 80090a0:	54442d18 	.word	0x54442d18
 80090a4:	400921fb 	.word	0x400921fb
 80090a8:	54442d18 	.word	0x54442d18
 80090ac:	3ff921fb 	.word	0x3ff921fb
 80090b0:	54442d18 	.word	0x54442d18
 80090b4:	3fe921fb 	.word	0x3fe921fb
 80090b8:	0800a160 	.word	0x0800a160
 80090bc:	0800a178 	.word	0x0800a178
 80090c0:	54442d18 	.word	0x54442d18
 80090c4:	c00921fb 	.word	0xc00921fb
 80090c8:	54442d18 	.word	0x54442d18
 80090cc:	bff921fb 	.word	0xbff921fb
 80090d0:	7ff00000 	.word	0x7ff00000

080090d4 <__ieee754_rem_pio2f>:
 80090d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d6:	ee10 6a10 	vmov	r6, s0
 80090da:	4b8e      	ldr	r3, [pc, #568]	; (8009314 <__ieee754_rem_pio2f+0x240>)
 80090dc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80090e0:	429d      	cmp	r5, r3
 80090e2:	b087      	sub	sp, #28
 80090e4:	eef0 7a40 	vmov.f32	s15, s0
 80090e8:	4604      	mov	r4, r0
 80090ea:	dc05      	bgt.n	80090f8 <__ieee754_rem_pio2f+0x24>
 80090ec:	2300      	movs	r3, #0
 80090ee:	ed80 0a00 	vstr	s0, [r0]
 80090f2:	6043      	str	r3, [r0, #4]
 80090f4:	2000      	movs	r0, #0
 80090f6:	e01a      	b.n	800912e <__ieee754_rem_pio2f+0x5a>
 80090f8:	4b87      	ldr	r3, [pc, #540]	; (8009318 <__ieee754_rem_pio2f+0x244>)
 80090fa:	429d      	cmp	r5, r3
 80090fc:	dc46      	bgt.n	800918c <__ieee754_rem_pio2f+0xb8>
 80090fe:	2e00      	cmp	r6, #0
 8009100:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800931c <__ieee754_rem_pio2f+0x248>
 8009104:	4b86      	ldr	r3, [pc, #536]	; (8009320 <__ieee754_rem_pio2f+0x24c>)
 8009106:	f025 050f 	bic.w	r5, r5, #15
 800910a:	dd1f      	ble.n	800914c <__ieee754_rem_pio2f+0x78>
 800910c:	429d      	cmp	r5, r3
 800910e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009112:	d00e      	beq.n	8009132 <__ieee754_rem_pio2f+0x5e>
 8009114:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8009324 <__ieee754_rem_pio2f+0x250>
 8009118:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800911c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009120:	ed80 0a00 	vstr	s0, [r0]
 8009124:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009128:	2001      	movs	r0, #1
 800912a:	edc4 7a01 	vstr	s15, [r4, #4]
 800912e:	b007      	add	sp, #28
 8009130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009132:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8009328 <__ieee754_rem_pio2f+0x254>
 8009136:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800932c <__ieee754_rem_pio2f+0x258>
 800913a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800913e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8009142:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009146:	edc0 6a00 	vstr	s13, [r0]
 800914a:	e7eb      	b.n	8009124 <__ieee754_rem_pio2f+0x50>
 800914c:	429d      	cmp	r5, r3
 800914e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009152:	d00e      	beq.n	8009172 <__ieee754_rem_pio2f+0x9e>
 8009154:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8009324 <__ieee754_rem_pio2f+0x250>
 8009158:	ee37 0a87 	vadd.f32	s0, s15, s14
 800915c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009160:	ed80 0a00 	vstr	s0, [r0]
 8009164:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009168:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800916c:	edc4 7a01 	vstr	s15, [r4, #4]
 8009170:	e7dd      	b.n	800912e <__ieee754_rem_pio2f+0x5a>
 8009172:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009328 <__ieee754_rem_pio2f+0x254>
 8009176:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800932c <__ieee754_rem_pio2f+0x258>
 800917a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800917e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009182:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009186:	edc0 6a00 	vstr	s13, [r0]
 800918a:	e7eb      	b.n	8009164 <__ieee754_rem_pio2f+0x90>
 800918c:	4b68      	ldr	r3, [pc, #416]	; (8009330 <__ieee754_rem_pio2f+0x25c>)
 800918e:	429d      	cmp	r5, r3
 8009190:	dc72      	bgt.n	8009278 <__ieee754_rem_pio2f+0x1a4>
 8009192:	f000 fda2 	bl	8009cda <fabsf>
 8009196:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8009334 <__ieee754_rem_pio2f+0x260>
 800919a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800919e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80091a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80091a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091aa:	ee17 0a90 	vmov	r0, s15
 80091ae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800931c <__ieee754_rem_pio2f+0x248>
 80091b2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80091b6:	281f      	cmp	r0, #31
 80091b8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8009324 <__ieee754_rem_pio2f+0x250>
 80091bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c0:	eeb1 6a47 	vneg.f32	s12, s14
 80091c4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80091c8:	ee16 2a90 	vmov	r2, s13
 80091cc:	dc1c      	bgt.n	8009208 <__ieee754_rem_pio2f+0x134>
 80091ce:	495a      	ldr	r1, [pc, #360]	; (8009338 <__ieee754_rem_pio2f+0x264>)
 80091d0:	1e47      	subs	r7, r0, #1
 80091d2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80091d6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80091da:	428b      	cmp	r3, r1
 80091dc:	d014      	beq.n	8009208 <__ieee754_rem_pio2f+0x134>
 80091de:	6022      	str	r2, [r4, #0]
 80091e0:	ed94 7a00 	vldr	s14, [r4]
 80091e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80091e8:	2e00      	cmp	r6, #0
 80091ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80091ee:	ed84 0a01 	vstr	s0, [r4, #4]
 80091f2:	da9c      	bge.n	800912e <__ieee754_rem_pio2f+0x5a>
 80091f4:	eeb1 7a47 	vneg.f32	s14, s14
 80091f8:	eeb1 0a40 	vneg.f32	s0, s0
 80091fc:	ed84 7a00 	vstr	s14, [r4]
 8009200:	ed84 0a01 	vstr	s0, [r4, #4]
 8009204:	4240      	negs	r0, r0
 8009206:	e792      	b.n	800912e <__ieee754_rem_pio2f+0x5a>
 8009208:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800920c:	15eb      	asrs	r3, r5, #23
 800920e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8009212:	2d08      	cmp	r5, #8
 8009214:	dde3      	ble.n	80091de <__ieee754_rem_pio2f+0x10a>
 8009216:	eddf 7a44 	vldr	s15, [pc, #272]	; 8009328 <__ieee754_rem_pio2f+0x254>
 800921a:	eddf 5a44 	vldr	s11, [pc, #272]	; 800932c <__ieee754_rem_pio2f+0x258>
 800921e:	eef0 6a40 	vmov.f32	s13, s0
 8009222:	eee6 6a27 	vfma.f32	s13, s12, s15
 8009226:	ee30 0a66 	vsub.f32	s0, s0, s13
 800922a:	eea6 0a27 	vfma.f32	s0, s12, s15
 800922e:	eef0 7a40 	vmov.f32	s15, s0
 8009232:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8009236:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800923a:	ee15 2a90 	vmov	r2, s11
 800923e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8009242:	1a5b      	subs	r3, r3, r1
 8009244:	2b19      	cmp	r3, #25
 8009246:	dc04      	bgt.n	8009252 <__ieee754_rem_pio2f+0x17e>
 8009248:	edc4 5a00 	vstr	s11, [r4]
 800924c:	eeb0 0a66 	vmov.f32	s0, s13
 8009250:	e7c6      	b.n	80091e0 <__ieee754_rem_pio2f+0x10c>
 8009252:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800933c <__ieee754_rem_pio2f+0x268>
 8009256:	eeb0 0a66 	vmov.f32	s0, s13
 800925a:	eea6 0a25 	vfma.f32	s0, s12, s11
 800925e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8009262:	eddf 6a37 	vldr	s13, [pc, #220]	; 8009340 <__ieee754_rem_pio2f+0x26c>
 8009266:	eee6 7a25 	vfma.f32	s15, s12, s11
 800926a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800926e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009272:	ed84 7a00 	vstr	s14, [r4]
 8009276:	e7b3      	b.n	80091e0 <__ieee754_rem_pio2f+0x10c>
 8009278:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800927c:	db06      	blt.n	800928c <__ieee754_rem_pio2f+0x1b8>
 800927e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8009282:	edc0 7a01 	vstr	s15, [r0, #4]
 8009286:	edc0 7a00 	vstr	s15, [r0]
 800928a:	e733      	b.n	80090f4 <__ieee754_rem_pio2f+0x20>
 800928c:	15ea      	asrs	r2, r5, #23
 800928e:	3a86      	subs	r2, #134	; 0x86
 8009290:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8009294:	ee07 3a90 	vmov	s15, r3
 8009298:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800929c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009344 <__ieee754_rem_pio2f+0x270>
 80092a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092a8:	ed8d 7a03 	vstr	s14, [sp, #12]
 80092ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092b0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80092b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80092bc:	ed8d 7a04 	vstr	s14, [sp, #16]
 80092c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80092c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80092c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092cc:	edcd 7a05 	vstr	s15, [sp, #20]
 80092d0:	d11e      	bne.n	8009310 <__ieee754_rem_pio2f+0x23c>
 80092d2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80092d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092da:	bf14      	ite	ne
 80092dc:	2302      	movne	r3, #2
 80092de:	2301      	moveq	r3, #1
 80092e0:	4919      	ldr	r1, [pc, #100]	; (8009348 <__ieee754_rem_pio2f+0x274>)
 80092e2:	9101      	str	r1, [sp, #4]
 80092e4:	2102      	movs	r1, #2
 80092e6:	9100      	str	r1, [sp, #0]
 80092e8:	a803      	add	r0, sp, #12
 80092ea:	4621      	mov	r1, r4
 80092ec:	f000 f88e 	bl	800940c <__kernel_rem_pio2f>
 80092f0:	2e00      	cmp	r6, #0
 80092f2:	f6bf af1c 	bge.w	800912e <__ieee754_rem_pio2f+0x5a>
 80092f6:	edd4 7a00 	vldr	s15, [r4]
 80092fa:	eef1 7a67 	vneg.f32	s15, s15
 80092fe:	edc4 7a00 	vstr	s15, [r4]
 8009302:	edd4 7a01 	vldr	s15, [r4, #4]
 8009306:	eef1 7a67 	vneg.f32	s15, s15
 800930a:	edc4 7a01 	vstr	s15, [r4, #4]
 800930e:	e779      	b.n	8009204 <__ieee754_rem_pio2f+0x130>
 8009310:	2303      	movs	r3, #3
 8009312:	e7e5      	b.n	80092e0 <__ieee754_rem_pio2f+0x20c>
 8009314:	3f490fd8 	.word	0x3f490fd8
 8009318:	4016cbe3 	.word	0x4016cbe3
 800931c:	3fc90f80 	.word	0x3fc90f80
 8009320:	3fc90fd0 	.word	0x3fc90fd0
 8009324:	37354443 	.word	0x37354443
 8009328:	37354400 	.word	0x37354400
 800932c:	2e85a308 	.word	0x2e85a308
 8009330:	43490f80 	.word	0x43490f80
 8009334:	3f22f984 	.word	0x3f22f984
 8009338:	0800a190 	.word	0x0800a190
 800933c:	2e85a300 	.word	0x2e85a300
 8009340:	248d3132 	.word	0x248d3132
 8009344:	43800000 	.word	0x43800000
 8009348:	0800a210 	.word	0x0800a210

0800934c <__kernel_cosf>:
 800934c:	ee10 3a10 	vmov	r3, s0
 8009350:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009354:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009358:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800935c:	da05      	bge.n	800936a <__kernel_cosf+0x1e>
 800935e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8009362:	ee17 2a90 	vmov	r2, s15
 8009366:	2a00      	cmp	r2, #0
 8009368:	d03d      	beq.n	80093e6 <__kernel_cosf+0x9a>
 800936a:	ee60 5a00 	vmul.f32	s11, s0, s0
 800936e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80093ec <__kernel_cosf+0xa0>
 8009372:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80093f0 <__kernel_cosf+0xa4>
 8009376:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80093f4 <__kernel_cosf+0xa8>
 800937a:	4a1f      	ldr	r2, [pc, #124]	; (80093f8 <__kernel_cosf+0xac>)
 800937c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009380:	4293      	cmp	r3, r2
 8009382:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80093fc <__kernel_cosf+0xb0>
 8009386:	eee7 7a25 	vfma.f32	s15, s14, s11
 800938a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8009400 <__kernel_cosf+0xb4>
 800938e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8009392:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8009404 <__kernel_cosf+0xb8>
 8009396:	eee7 7a25 	vfma.f32	s15, s14, s11
 800939a:	eeb0 7a66 	vmov.f32	s14, s13
 800939e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80093a2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80093a6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80093aa:	ee67 6a25 	vmul.f32	s13, s14, s11
 80093ae:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80093b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80093b6:	dc04      	bgt.n	80093c2 <__kernel_cosf+0x76>
 80093b8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80093bc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80093c0:	4770      	bx	lr
 80093c2:	4a11      	ldr	r2, [pc, #68]	; (8009408 <__kernel_cosf+0xbc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	bfda      	itte	le
 80093c8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80093cc:	ee06 3a90 	vmovle	s13, r3
 80093d0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80093d4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80093d8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80093dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093e0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80093e4:	4770      	bx	lr
 80093e6:	eeb0 0a46 	vmov.f32	s0, s12
 80093ea:	4770      	bx	lr
 80093ec:	ad47d74e 	.word	0xad47d74e
 80093f0:	310f74f6 	.word	0x310f74f6
 80093f4:	3d2aaaab 	.word	0x3d2aaaab
 80093f8:	3e999999 	.word	0x3e999999
 80093fc:	b493f27c 	.word	0xb493f27c
 8009400:	37d00d01 	.word	0x37d00d01
 8009404:	bab60b61 	.word	0xbab60b61
 8009408:	3f480000 	.word	0x3f480000

0800940c <__kernel_rem_pio2f>:
 800940c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009410:	ed2d 8b04 	vpush	{d8-d9}
 8009414:	b0d9      	sub	sp, #356	; 0x164
 8009416:	4688      	mov	r8, r1
 8009418:	9002      	str	r0, [sp, #8]
 800941a:	49bb      	ldr	r1, [pc, #748]	; (8009708 <__kernel_rem_pio2f+0x2fc>)
 800941c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8009424:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8009428:	1e59      	subs	r1, r3, #1
 800942a:	1d13      	adds	r3, r2, #4
 800942c:	db27      	blt.n	800947e <__kernel_rem_pio2f+0x72>
 800942e:	f1b2 0b03 	subs.w	fp, r2, #3
 8009432:	bf48      	it	mi
 8009434:	f102 0b04 	addmi.w	fp, r2, #4
 8009438:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800943c:	1c45      	adds	r5, r0, #1
 800943e:	00ec      	lsls	r4, r5, #3
 8009440:	1a47      	subs	r7, r0, r1
 8009442:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8009718 <__kernel_rem_pio2f+0x30c>
 8009446:	9403      	str	r4, [sp, #12]
 8009448:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800944c:	eb0a 0c01 	add.w	ip, sl, r1
 8009450:	ae1c      	add	r6, sp, #112	; 0x70
 8009452:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8009456:	2400      	movs	r4, #0
 8009458:	4564      	cmp	r4, ip
 800945a:	dd12      	ble.n	8009482 <__kernel_rem_pio2f+0x76>
 800945c:	9b01      	ldr	r3, [sp, #4]
 800945e:	ac1c      	add	r4, sp, #112	; 0x70
 8009460:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8009464:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8009468:	f04f 0c00 	mov.w	ip, #0
 800946c:	45d4      	cmp	ip, sl
 800946e:	dc27      	bgt.n	80094c0 <__kernel_rem_pio2f+0xb4>
 8009470:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009474:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8009718 <__kernel_rem_pio2f+0x30c>
 8009478:	4627      	mov	r7, r4
 800947a:	2600      	movs	r6, #0
 800947c:	e016      	b.n	80094ac <__kernel_rem_pio2f+0xa0>
 800947e:	2000      	movs	r0, #0
 8009480:	e7dc      	b.n	800943c <__kernel_rem_pio2f+0x30>
 8009482:	42e7      	cmn	r7, r4
 8009484:	bf5d      	ittte	pl
 8009486:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800948a:	ee07 3a90 	vmovpl	s15, r3
 800948e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8009492:	eef0 7a47 	vmovmi.f32	s15, s14
 8009496:	ece6 7a01 	vstmia	r6!, {s15}
 800949a:	3401      	adds	r4, #1
 800949c:	e7dc      	b.n	8009458 <__kernel_rem_pio2f+0x4c>
 800949e:	ecf9 6a01 	vldmia	r9!, {s13}
 80094a2:	ed97 7a00 	vldr	s14, [r7]
 80094a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80094aa:	3601      	adds	r6, #1
 80094ac:	428e      	cmp	r6, r1
 80094ae:	f1a7 0704 	sub.w	r7, r7, #4
 80094b2:	ddf4      	ble.n	800949e <__kernel_rem_pio2f+0x92>
 80094b4:	eceb 7a01 	vstmia	fp!, {s15}
 80094b8:	f10c 0c01 	add.w	ip, ip, #1
 80094bc:	3404      	adds	r4, #4
 80094be:	e7d5      	b.n	800946c <__kernel_rem_pio2f+0x60>
 80094c0:	ab08      	add	r3, sp, #32
 80094c2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80094c6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8009714 <__kernel_rem_pio2f+0x308>
 80094ca:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8009710 <__kernel_rem_pio2f+0x304>
 80094ce:	9304      	str	r3, [sp, #16]
 80094d0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80094d4:	4656      	mov	r6, sl
 80094d6:	00b3      	lsls	r3, r6, #2
 80094d8:	9305      	str	r3, [sp, #20]
 80094da:	ab58      	add	r3, sp, #352	; 0x160
 80094dc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80094e0:	ac08      	add	r4, sp, #32
 80094e2:	ab44      	add	r3, sp, #272	; 0x110
 80094e4:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80094e8:	46a4      	mov	ip, r4
 80094ea:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80094ee:	4637      	mov	r7, r6
 80094f0:	2f00      	cmp	r7, #0
 80094f2:	f1a0 0004 	sub.w	r0, r0, #4
 80094f6:	dc4f      	bgt.n	8009598 <__kernel_rem_pio2f+0x18c>
 80094f8:	4628      	mov	r0, r5
 80094fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80094fe:	f000 fc35 	bl	8009d6c <scalbnf>
 8009502:	eeb0 8a40 	vmov.f32	s16, s0
 8009506:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800950a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800950e:	f000 fbeb 	bl	8009ce8 <floorf>
 8009512:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8009516:	eea0 8a67 	vfms.f32	s16, s0, s15
 800951a:	2d00      	cmp	r5, #0
 800951c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009520:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8009524:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8009528:	ee17 9a90 	vmov	r9, s15
 800952c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009530:	dd44      	ble.n	80095bc <__kernel_rem_pio2f+0x1b0>
 8009532:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8009536:	ab08      	add	r3, sp, #32
 8009538:	f1c5 0e08 	rsb	lr, r5, #8
 800953c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8009540:	fa47 f00e 	asr.w	r0, r7, lr
 8009544:	4481      	add	r9, r0
 8009546:	fa00 f00e 	lsl.w	r0, r0, lr
 800954a:	1a3f      	subs	r7, r7, r0
 800954c:	f1c5 0007 	rsb	r0, r5, #7
 8009550:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8009554:	4107      	asrs	r7, r0
 8009556:	2f00      	cmp	r7, #0
 8009558:	dd3f      	ble.n	80095da <__kernel_rem_pio2f+0x1ce>
 800955a:	f04f 0e00 	mov.w	lr, #0
 800955e:	f109 0901 	add.w	r9, r9, #1
 8009562:	4673      	mov	r3, lr
 8009564:	4576      	cmp	r6, lr
 8009566:	dc6b      	bgt.n	8009640 <__kernel_rem_pio2f+0x234>
 8009568:	2d00      	cmp	r5, #0
 800956a:	dd04      	ble.n	8009576 <__kernel_rem_pio2f+0x16a>
 800956c:	2d01      	cmp	r5, #1
 800956e:	d078      	beq.n	8009662 <__kernel_rem_pio2f+0x256>
 8009570:	2d02      	cmp	r5, #2
 8009572:	f000 8081 	beq.w	8009678 <__kernel_rem_pio2f+0x26c>
 8009576:	2f02      	cmp	r7, #2
 8009578:	d12f      	bne.n	80095da <__kernel_rem_pio2f+0x1ce>
 800957a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800957e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8009582:	b353      	cbz	r3, 80095da <__kernel_rem_pio2f+0x1ce>
 8009584:	4628      	mov	r0, r5
 8009586:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800958a:	f000 fbef 	bl	8009d6c <scalbnf>
 800958e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8009592:	ee38 8a40 	vsub.f32	s16, s16, s0
 8009596:	e020      	b.n	80095da <__kernel_rem_pio2f+0x1ce>
 8009598:	ee60 7a28 	vmul.f32	s15, s0, s17
 800959c:	3f01      	subs	r7, #1
 800959e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80095a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095a6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80095aa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80095ae:	ecac 0a01 	vstmia	ip!, {s0}
 80095b2:	ed90 0a00 	vldr	s0, [r0]
 80095b6:	ee37 0a80 	vadd.f32	s0, s15, s0
 80095ba:	e799      	b.n	80094f0 <__kernel_rem_pio2f+0xe4>
 80095bc:	d105      	bne.n	80095ca <__kernel_rem_pio2f+0x1be>
 80095be:	1e70      	subs	r0, r6, #1
 80095c0:	ab08      	add	r3, sp, #32
 80095c2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80095c6:	11ff      	asrs	r7, r7, #7
 80095c8:	e7c5      	b.n	8009556 <__kernel_rem_pio2f+0x14a>
 80095ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80095ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80095d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d6:	da31      	bge.n	800963c <__kernel_rem_pio2f+0x230>
 80095d8:	2700      	movs	r7, #0
 80095da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80095de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e2:	f040 809b 	bne.w	800971c <__kernel_rem_pio2f+0x310>
 80095e6:	1e74      	subs	r4, r6, #1
 80095e8:	46a4      	mov	ip, r4
 80095ea:	2000      	movs	r0, #0
 80095ec:	45d4      	cmp	ip, sl
 80095ee:	da4a      	bge.n	8009686 <__kernel_rem_pio2f+0x27a>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d07a      	beq.n	80096ea <__kernel_rem_pio2f+0x2de>
 80095f4:	ab08      	add	r3, sp, #32
 80095f6:	3d08      	subs	r5, #8
 80095f8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	f000 8081 	beq.w	8009704 <__kernel_rem_pio2f+0x2f8>
 8009602:	4628      	mov	r0, r5
 8009604:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009608:	00a5      	lsls	r5, r4, #2
 800960a:	f000 fbaf 	bl	8009d6c <scalbnf>
 800960e:	aa44      	add	r2, sp, #272	; 0x110
 8009610:	1d2b      	adds	r3, r5, #4
 8009612:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8009714 <__kernel_rem_pio2f+0x308>
 8009616:	18d1      	adds	r1, r2, r3
 8009618:	4622      	mov	r2, r4
 800961a:	2a00      	cmp	r2, #0
 800961c:	f280 80ae 	bge.w	800977c <__kernel_rem_pio2f+0x370>
 8009620:	4622      	mov	r2, r4
 8009622:	2a00      	cmp	r2, #0
 8009624:	f2c0 80cc 	blt.w	80097c0 <__kernel_rem_pio2f+0x3b4>
 8009628:	a944      	add	r1, sp, #272	; 0x110
 800962a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800962e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800970c <__kernel_rem_pio2f+0x300>
 8009632:	eddf 7a39 	vldr	s15, [pc, #228]	; 8009718 <__kernel_rem_pio2f+0x30c>
 8009636:	2000      	movs	r0, #0
 8009638:	1aa1      	subs	r1, r4, r2
 800963a:	e0b6      	b.n	80097aa <__kernel_rem_pio2f+0x39e>
 800963c:	2702      	movs	r7, #2
 800963e:	e78c      	b.n	800955a <__kernel_rem_pio2f+0x14e>
 8009640:	6820      	ldr	r0, [r4, #0]
 8009642:	b94b      	cbnz	r3, 8009658 <__kernel_rem_pio2f+0x24c>
 8009644:	b118      	cbz	r0, 800964e <__kernel_rem_pio2f+0x242>
 8009646:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800964a:	6020      	str	r0, [r4, #0]
 800964c:	2001      	movs	r0, #1
 800964e:	f10e 0e01 	add.w	lr, lr, #1
 8009652:	3404      	adds	r4, #4
 8009654:	4603      	mov	r3, r0
 8009656:	e785      	b.n	8009564 <__kernel_rem_pio2f+0x158>
 8009658:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800965c:	6020      	str	r0, [r4, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	e7f5      	b.n	800964e <__kernel_rem_pio2f+0x242>
 8009662:	1e74      	subs	r4, r6, #1
 8009664:	a808      	add	r0, sp, #32
 8009666:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800966a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800966e:	f10d 0c20 	add.w	ip, sp, #32
 8009672:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8009676:	e77e      	b.n	8009576 <__kernel_rem_pio2f+0x16a>
 8009678:	1e74      	subs	r4, r6, #1
 800967a:	a808      	add	r0, sp, #32
 800967c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8009680:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8009684:	e7f3      	b.n	800966e <__kernel_rem_pio2f+0x262>
 8009686:	ab08      	add	r3, sp, #32
 8009688:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800968c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8009690:	4318      	orrs	r0, r3
 8009692:	e7ab      	b.n	80095ec <__kernel_rem_pio2f+0x1e0>
 8009694:	f10c 0c01 	add.w	ip, ip, #1
 8009698:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800969c:	2c00      	cmp	r4, #0
 800969e:	d0f9      	beq.n	8009694 <__kernel_rem_pio2f+0x288>
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80096a6:	eb0d 0003 	add.w	r0, sp, r3
 80096aa:	9b01      	ldr	r3, [sp, #4]
 80096ac:	18f4      	adds	r4, r6, r3
 80096ae:	ab1c      	add	r3, sp, #112	; 0x70
 80096b0:	1c77      	adds	r7, r6, #1
 80096b2:	384c      	subs	r0, #76	; 0x4c
 80096b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096b8:	4466      	add	r6, ip
 80096ba:	42be      	cmp	r6, r7
 80096bc:	f6ff af0b 	blt.w	80094d6 <__kernel_rem_pio2f+0xca>
 80096c0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80096c4:	f8dd e008 	ldr.w	lr, [sp, #8]
 80096c8:	ee07 3a90 	vmov	s15, r3
 80096cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80096d0:	f04f 0c00 	mov.w	ip, #0
 80096d4:	ece4 7a01 	vstmia	r4!, {s15}
 80096d8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009718 <__kernel_rem_pio2f+0x30c>
 80096dc:	46a1      	mov	r9, r4
 80096de:	458c      	cmp	ip, r1
 80096e0:	dd07      	ble.n	80096f2 <__kernel_rem_pio2f+0x2e6>
 80096e2:	ece0 7a01 	vstmia	r0!, {s15}
 80096e6:	3701      	adds	r7, #1
 80096e8:	e7e7      	b.n	80096ba <__kernel_rem_pio2f+0x2ae>
 80096ea:	9804      	ldr	r0, [sp, #16]
 80096ec:	f04f 0c01 	mov.w	ip, #1
 80096f0:	e7d2      	b.n	8009698 <__kernel_rem_pio2f+0x28c>
 80096f2:	ecfe 6a01 	vldmia	lr!, {s13}
 80096f6:	ed39 7a01 	vldmdb	r9!, {s14}
 80096fa:	f10c 0c01 	add.w	ip, ip, #1
 80096fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009702:	e7ec      	b.n	80096de <__kernel_rem_pio2f+0x2d2>
 8009704:	3c01      	subs	r4, #1
 8009706:	e775      	b.n	80095f4 <__kernel_rem_pio2f+0x1e8>
 8009708:	0800a554 	.word	0x0800a554
 800970c:	0800a528 	.word	0x0800a528
 8009710:	43800000 	.word	0x43800000
 8009714:	3b800000 	.word	0x3b800000
 8009718:	00000000 	.word	0x00000000
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	eeb0 0a48 	vmov.f32	s0, s16
 8009722:	1a98      	subs	r0, r3, r2
 8009724:	f000 fb22 	bl	8009d6c <scalbnf>
 8009728:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8009710 <__kernel_rem_pio2f+0x304>
 800972c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009734:	db19      	blt.n	800976a <__kernel_rem_pio2f+0x35e>
 8009736:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8009714 <__kernel_rem_pio2f+0x308>
 800973a:	ee60 7a27 	vmul.f32	s15, s0, s15
 800973e:	aa08      	add	r2, sp, #32
 8009740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009744:	1c74      	adds	r4, r6, #1
 8009746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800974a:	3508      	adds	r5, #8
 800974c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009754:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009758:	ee10 3a10 	vmov	r3, s0
 800975c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8009760:	ee17 3a90 	vmov	r3, s15
 8009764:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009768:	e74b      	b.n	8009602 <__kernel_rem_pio2f+0x1f6>
 800976a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800976e:	aa08      	add	r2, sp, #32
 8009770:	ee10 3a10 	vmov	r3, s0
 8009774:	4634      	mov	r4, r6
 8009776:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800977a:	e742      	b.n	8009602 <__kernel_rem_pio2f+0x1f6>
 800977c:	a808      	add	r0, sp, #32
 800977e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8009782:	9001      	str	r0, [sp, #4]
 8009784:	ee07 0a90 	vmov	s15, r0
 8009788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800978c:	3a01      	subs	r2, #1
 800978e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009792:	ee20 0a07 	vmul.f32	s0, s0, s14
 8009796:	ed61 7a01 	vstmdb	r1!, {s15}
 800979a:	e73e      	b.n	800961a <__kernel_rem_pio2f+0x20e>
 800979c:	ecfc 6a01 	vldmia	ip!, {s13}
 80097a0:	ecb6 7a01 	vldmia	r6!, {s14}
 80097a4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80097a8:	3001      	adds	r0, #1
 80097aa:	4550      	cmp	r0, sl
 80097ac:	dc01      	bgt.n	80097b2 <__kernel_rem_pio2f+0x3a6>
 80097ae:	4288      	cmp	r0, r1
 80097b0:	ddf4      	ble.n	800979c <__kernel_rem_pio2f+0x390>
 80097b2:	a858      	add	r0, sp, #352	; 0x160
 80097b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80097b8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80097bc:	3a01      	subs	r2, #1
 80097be:	e730      	b.n	8009622 <__kernel_rem_pio2f+0x216>
 80097c0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80097c2:	2a02      	cmp	r2, #2
 80097c4:	dc09      	bgt.n	80097da <__kernel_rem_pio2f+0x3ce>
 80097c6:	2a00      	cmp	r2, #0
 80097c8:	dc2a      	bgt.n	8009820 <__kernel_rem_pio2f+0x414>
 80097ca:	d043      	beq.n	8009854 <__kernel_rem_pio2f+0x448>
 80097cc:	f009 0007 	and.w	r0, r9, #7
 80097d0:	b059      	add	sp, #356	; 0x164
 80097d2:	ecbd 8b04 	vpop	{d8-d9}
 80097d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097da:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d1f5      	bne.n	80097cc <__kernel_rem_pio2f+0x3c0>
 80097e0:	ab30      	add	r3, sp, #192	; 0xc0
 80097e2:	442b      	add	r3, r5
 80097e4:	461a      	mov	r2, r3
 80097e6:	4619      	mov	r1, r3
 80097e8:	4620      	mov	r0, r4
 80097ea:	2800      	cmp	r0, #0
 80097ec:	f1a1 0104 	sub.w	r1, r1, #4
 80097f0:	dc51      	bgt.n	8009896 <__kernel_rem_pio2f+0x48a>
 80097f2:	4621      	mov	r1, r4
 80097f4:	2901      	cmp	r1, #1
 80097f6:	f1a2 0204 	sub.w	r2, r2, #4
 80097fa:	dc5c      	bgt.n	80098b6 <__kernel_rem_pio2f+0x4aa>
 80097fc:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8009718 <__kernel_rem_pio2f+0x30c>
 8009800:	3304      	adds	r3, #4
 8009802:	2c01      	cmp	r4, #1
 8009804:	dc67      	bgt.n	80098d6 <__kernel_rem_pio2f+0x4ca>
 8009806:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800980a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800980e:	2f00      	cmp	r7, #0
 8009810:	d167      	bne.n	80098e2 <__kernel_rem_pio2f+0x4d6>
 8009812:	edc8 6a00 	vstr	s13, [r8]
 8009816:	ed88 7a01 	vstr	s14, [r8, #4]
 800981a:	edc8 7a02 	vstr	s15, [r8, #8]
 800981e:	e7d5      	b.n	80097cc <__kernel_rem_pio2f+0x3c0>
 8009820:	aa30      	add	r2, sp, #192	; 0xc0
 8009822:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8009718 <__kernel_rem_pio2f+0x30c>
 8009826:	4413      	add	r3, r2
 8009828:	4622      	mov	r2, r4
 800982a:	2a00      	cmp	r2, #0
 800982c:	da24      	bge.n	8009878 <__kernel_rem_pio2f+0x46c>
 800982e:	b34f      	cbz	r7, 8009884 <__kernel_rem_pio2f+0x478>
 8009830:	eef1 7a47 	vneg.f32	s15, s14
 8009834:	edc8 7a00 	vstr	s15, [r8]
 8009838:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800983c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009840:	aa31      	add	r2, sp, #196	; 0xc4
 8009842:	2301      	movs	r3, #1
 8009844:	429c      	cmp	r4, r3
 8009846:	da20      	bge.n	800988a <__kernel_rem_pio2f+0x47e>
 8009848:	b10f      	cbz	r7, 800984e <__kernel_rem_pio2f+0x442>
 800984a:	eef1 7a67 	vneg.f32	s15, s15
 800984e:	edc8 7a01 	vstr	s15, [r8, #4]
 8009852:	e7bb      	b.n	80097cc <__kernel_rem_pio2f+0x3c0>
 8009854:	aa30      	add	r2, sp, #192	; 0xc0
 8009856:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8009718 <__kernel_rem_pio2f+0x30c>
 800985a:	4413      	add	r3, r2
 800985c:	2c00      	cmp	r4, #0
 800985e:	da05      	bge.n	800986c <__kernel_rem_pio2f+0x460>
 8009860:	b10f      	cbz	r7, 8009866 <__kernel_rem_pio2f+0x45a>
 8009862:	eef1 7a67 	vneg.f32	s15, s15
 8009866:	edc8 7a00 	vstr	s15, [r8]
 800986a:	e7af      	b.n	80097cc <__kernel_rem_pio2f+0x3c0>
 800986c:	ed33 7a01 	vldmdb	r3!, {s14}
 8009870:	3c01      	subs	r4, #1
 8009872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009876:	e7f1      	b.n	800985c <__kernel_rem_pio2f+0x450>
 8009878:	ed73 7a01 	vldmdb	r3!, {s15}
 800987c:	3a01      	subs	r2, #1
 800987e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009882:	e7d2      	b.n	800982a <__kernel_rem_pio2f+0x41e>
 8009884:	eef0 7a47 	vmov.f32	s15, s14
 8009888:	e7d4      	b.n	8009834 <__kernel_rem_pio2f+0x428>
 800988a:	ecb2 7a01 	vldmia	r2!, {s14}
 800988e:	3301      	adds	r3, #1
 8009890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009894:	e7d6      	b.n	8009844 <__kernel_rem_pio2f+0x438>
 8009896:	edd1 7a00 	vldr	s15, [r1]
 800989a:	edd1 6a01 	vldr	s13, [r1, #4]
 800989e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80098a2:	3801      	subs	r0, #1
 80098a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098a8:	ed81 7a00 	vstr	s14, [r1]
 80098ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098b0:	edc1 7a01 	vstr	s15, [r1, #4]
 80098b4:	e799      	b.n	80097ea <__kernel_rem_pio2f+0x3de>
 80098b6:	edd2 7a00 	vldr	s15, [r2]
 80098ba:	edd2 6a01 	vldr	s13, [r2, #4]
 80098be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80098c2:	3901      	subs	r1, #1
 80098c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80098c8:	ed82 7a00 	vstr	s14, [r2]
 80098cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d0:	edc2 7a01 	vstr	s15, [r2, #4]
 80098d4:	e78e      	b.n	80097f4 <__kernel_rem_pio2f+0x3e8>
 80098d6:	ed33 7a01 	vldmdb	r3!, {s14}
 80098da:	3c01      	subs	r4, #1
 80098dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80098e0:	e78f      	b.n	8009802 <__kernel_rem_pio2f+0x3f6>
 80098e2:	eef1 6a66 	vneg.f32	s13, s13
 80098e6:	eeb1 7a47 	vneg.f32	s14, s14
 80098ea:	edc8 6a00 	vstr	s13, [r8]
 80098ee:	ed88 7a01 	vstr	s14, [r8, #4]
 80098f2:	eef1 7a67 	vneg.f32	s15, s15
 80098f6:	e790      	b.n	800981a <__kernel_rem_pio2f+0x40e>

080098f8 <__kernel_sinf>:
 80098f8:	ee10 3a10 	vmov	r3, s0
 80098fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009900:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8009904:	da04      	bge.n	8009910 <__kernel_sinf+0x18>
 8009906:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800990a:	ee17 3a90 	vmov	r3, s15
 800990e:	b35b      	cbz	r3, 8009968 <__kernel_sinf+0x70>
 8009910:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009914:	eddf 7a15 	vldr	s15, [pc, #84]	; 800996c <__kernel_sinf+0x74>
 8009918:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8009970 <__kernel_sinf+0x78>
 800991c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009920:	eddf 7a14 	vldr	s15, [pc, #80]	; 8009974 <__kernel_sinf+0x7c>
 8009924:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009928:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8009978 <__kernel_sinf+0x80>
 800992c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8009930:	eddf 7a12 	vldr	s15, [pc, #72]	; 800997c <__kernel_sinf+0x84>
 8009934:	ee60 6a07 	vmul.f32	s13, s0, s14
 8009938:	eee6 7a07 	vfma.f32	s15, s12, s14
 800993c:	b930      	cbnz	r0, 800994c <__kernel_sinf+0x54>
 800993e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8009980 <__kernel_sinf+0x88>
 8009942:	eea7 6a27 	vfma.f32	s12, s14, s15
 8009946:	eea6 0a26 	vfma.f32	s0, s12, s13
 800994a:	4770      	bx	lr
 800994c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8009950:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8009954:	eee0 7a86 	vfma.f32	s15, s1, s12
 8009958:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800995c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8009984 <__kernel_sinf+0x8c>
 8009960:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8009964:	ee30 0a60 	vsub.f32	s0, s0, s1
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	2f2ec9d3 	.word	0x2f2ec9d3
 8009970:	b2d72f34 	.word	0xb2d72f34
 8009974:	3638ef1b 	.word	0x3638ef1b
 8009978:	b9500d01 	.word	0xb9500d01
 800997c:	3c088889 	.word	0x3c088889
 8009980:	be2aaaab 	.word	0xbe2aaaab
 8009984:	3e2aaaab 	.word	0x3e2aaaab

08009988 <atan>:
 8009988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800998c:	ec55 4b10 	vmov	r4, r5, d0
 8009990:	4bc3      	ldr	r3, [pc, #780]	; (8009ca0 <atan+0x318>)
 8009992:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009996:	429e      	cmp	r6, r3
 8009998:	46ab      	mov	fp, r5
 800999a:	dd18      	ble.n	80099ce <atan+0x46>
 800999c:	4bc1      	ldr	r3, [pc, #772]	; (8009ca4 <atan+0x31c>)
 800999e:	429e      	cmp	r6, r3
 80099a0:	dc01      	bgt.n	80099a6 <atan+0x1e>
 80099a2:	d109      	bne.n	80099b8 <atan+0x30>
 80099a4:	b144      	cbz	r4, 80099b8 <atan+0x30>
 80099a6:	4622      	mov	r2, r4
 80099a8:	462b      	mov	r3, r5
 80099aa:	4620      	mov	r0, r4
 80099ac:	4629      	mov	r1, r5
 80099ae:	f7f6 fc65 	bl	800027c <__adddf3>
 80099b2:	4604      	mov	r4, r0
 80099b4:	460d      	mov	r5, r1
 80099b6:	e006      	b.n	80099c6 <atan+0x3e>
 80099b8:	f1bb 0f00 	cmp.w	fp, #0
 80099bc:	f300 8131 	bgt.w	8009c22 <atan+0x29a>
 80099c0:	a59b      	add	r5, pc, #620	; (adr r5, 8009c30 <atan+0x2a8>)
 80099c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80099c6:	ec45 4b10 	vmov	d0, r4, r5
 80099ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ce:	4bb6      	ldr	r3, [pc, #728]	; (8009ca8 <atan+0x320>)
 80099d0:	429e      	cmp	r6, r3
 80099d2:	dc14      	bgt.n	80099fe <atan+0x76>
 80099d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80099d8:	429e      	cmp	r6, r3
 80099da:	dc0d      	bgt.n	80099f8 <atan+0x70>
 80099dc:	a396      	add	r3, pc, #600	; (adr r3, 8009c38 <atan+0x2b0>)
 80099de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e2:	ee10 0a10 	vmov	r0, s0
 80099e6:	4629      	mov	r1, r5
 80099e8:	f7f6 fc48 	bl	800027c <__adddf3>
 80099ec:	4baf      	ldr	r3, [pc, #700]	; (8009cac <atan+0x324>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	f7f7 f88a 	bl	8000b08 <__aeabi_dcmpgt>
 80099f4:	2800      	cmp	r0, #0
 80099f6:	d1e6      	bne.n	80099c6 <atan+0x3e>
 80099f8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80099fc:	e02b      	b.n	8009a56 <atan+0xce>
 80099fe:	f000 f963 	bl	8009cc8 <fabs>
 8009a02:	4bab      	ldr	r3, [pc, #684]	; (8009cb0 <atan+0x328>)
 8009a04:	429e      	cmp	r6, r3
 8009a06:	ec55 4b10 	vmov	r4, r5, d0
 8009a0a:	f300 80bf 	bgt.w	8009b8c <atan+0x204>
 8009a0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8009a12:	429e      	cmp	r6, r3
 8009a14:	f300 80a0 	bgt.w	8009b58 <atan+0x1d0>
 8009a18:	ee10 2a10 	vmov	r2, s0
 8009a1c:	ee10 0a10 	vmov	r0, s0
 8009a20:	462b      	mov	r3, r5
 8009a22:	4629      	mov	r1, r5
 8009a24:	f7f6 fc2a 	bl	800027c <__adddf3>
 8009a28:	4ba0      	ldr	r3, [pc, #640]	; (8009cac <atan+0x324>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f7f6 fc24 	bl	8000278 <__aeabi_dsub>
 8009a30:	2200      	movs	r2, #0
 8009a32:	4606      	mov	r6, r0
 8009a34:	460f      	mov	r7, r1
 8009a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	4629      	mov	r1, r5
 8009a3e:	f7f6 fc1d 	bl	800027c <__adddf3>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	4630      	mov	r0, r6
 8009a48:	4639      	mov	r1, r7
 8009a4a:	f7f6 fef7 	bl	800083c <__aeabi_ddiv>
 8009a4e:	f04f 0a00 	mov.w	sl, #0
 8009a52:	4604      	mov	r4, r0
 8009a54:	460d      	mov	r5, r1
 8009a56:	4622      	mov	r2, r4
 8009a58:	462b      	mov	r3, r5
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	f7f6 fdc3 	bl	80005e8 <__aeabi_dmul>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4680      	mov	r8, r0
 8009a68:	4689      	mov	r9, r1
 8009a6a:	f7f6 fdbd 	bl	80005e8 <__aeabi_dmul>
 8009a6e:	a374      	add	r3, pc, #464	; (adr r3, 8009c40 <atan+0x2b8>)
 8009a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a74:	4606      	mov	r6, r0
 8009a76:	460f      	mov	r7, r1
 8009a78:	f7f6 fdb6 	bl	80005e8 <__aeabi_dmul>
 8009a7c:	a372      	add	r3, pc, #456	; (adr r3, 8009c48 <atan+0x2c0>)
 8009a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a82:	f7f6 fbfb 	bl	800027c <__adddf3>
 8009a86:	4632      	mov	r2, r6
 8009a88:	463b      	mov	r3, r7
 8009a8a:	f7f6 fdad 	bl	80005e8 <__aeabi_dmul>
 8009a8e:	a370      	add	r3, pc, #448	; (adr r3, 8009c50 <atan+0x2c8>)
 8009a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a94:	f7f6 fbf2 	bl	800027c <__adddf3>
 8009a98:	4632      	mov	r2, r6
 8009a9a:	463b      	mov	r3, r7
 8009a9c:	f7f6 fda4 	bl	80005e8 <__aeabi_dmul>
 8009aa0:	a36d      	add	r3, pc, #436	; (adr r3, 8009c58 <atan+0x2d0>)
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f7f6 fbe9 	bl	800027c <__adddf3>
 8009aaa:	4632      	mov	r2, r6
 8009aac:	463b      	mov	r3, r7
 8009aae:	f7f6 fd9b 	bl	80005e8 <__aeabi_dmul>
 8009ab2:	a36b      	add	r3, pc, #428	; (adr r3, 8009c60 <atan+0x2d8>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	f7f6 fbe0 	bl	800027c <__adddf3>
 8009abc:	4632      	mov	r2, r6
 8009abe:	463b      	mov	r3, r7
 8009ac0:	f7f6 fd92 	bl	80005e8 <__aeabi_dmul>
 8009ac4:	a368      	add	r3, pc, #416	; (adr r3, 8009c68 <atan+0x2e0>)
 8009ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aca:	f7f6 fbd7 	bl	800027c <__adddf3>
 8009ace:	4642      	mov	r2, r8
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	f7f6 fd89 	bl	80005e8 <__aeabi_dmul>
 8009ad6:	a366      	add	r3, pc, #408	; (adr r3, 8009c70 <atan+0x2e8>)
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	4680      	mov	r8, r0
 8009ade:	4689      	mov	r9, r1
 8009ae0:	4630      	mov	r0, r6
 8009ae2:	4639      	mov	r1, r7
 8009ae4:	f7f6 fd80 	bl	80005e8 <__aeabi_dmul>
 8009ae8:	a363      	add	r3, pc, #396	; (adr r3, 8009c78 <atan+0x2f0>)
 8009aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aee:	f7f6 fbc3 	bl	8000278 <__aeabi_dsub>
 8009af2:	4632      	mov	r2, r6
 8009af4:	463b      	mov	r3, r7
 8009af6:	f7f6 fd77 	bl	80005e8 <__aeabi_dmul>
 8009afa:	a361      	add	r3, pc, #388	; (adr r3, 8009c80 <atan+0x2f8>)
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fbba 	bl	8000278 <__aeabi_dsub>
 8009b04:	4632      	mov	r2, r6
 8009b06:	463b      	mov	r3, r7
 8009b08:	f7f6 fd6e 	bl	80005e8 <__aeabi_dmul>
 8009b0c:	a35e      	add	r3, pc, #376	; (adr r3, 8009c88 <atan+0x300>)
 8009b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b12:	f7f6 fbb1 	bl	8000278 <__aeabi_dsub>
 8009b16:	4632      	mov	r2, r6
 8009b18:	463b      	mov	r3, r7
 8009b1a:	f7f6 fd65 	bl	80005e8 <__aeabi_dmul>
 8009b1e:	a35c      	add	r3, pc, #368	; (adr r3, 8009c90 <atan+0x308>)
 8009b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b24:	f7f6 fba8 	bl	8000278 <__aeabi_dsub>
 8009b28:	4632      	mov	r2, r6
 8009b2a:	463b      	mov	r3, r7
 8009b2c:	f7f6 fd5c 	bl	80005e8 <__aeabi_dmul>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f6 fba0 	bl	800027c <__adddf3>
 8009b3c:	4622      	mov	r2, r4
 8009b3e:	462b      	mov	r3, r5
 8009b40:	f7f6 fd52 	bl	80005e8 <__aeabi_dmul>
 8009b44:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	d14b      	bne.n	8009be6 <atan+0x25e>
 8009b4e:	4620      	mov	r0, r4
 8009b50:	4629      	mov	r1, r5
 8009b52:	f7f6 fb91 	bl	8000278 <__aeabi_dsub>
 8009b56:	e72c      	b.n	80099b2 <atan+0x2a>
 8009b58:	ee10 0a10 	vmov	r0, s0
 8009b5c:	4b53      	ldr	r3, [pc, #332]	; (8009cac <atan+0x324>)
 8009b5e:	2200      	movs	r2, #0
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 fb89 	bl	8000278 <__aeabi_dsub>
 8009b66:	4b51      	ldr	r3, [pc, #324]	; (8009cac <atan+0x324>)
 8009b68:	4606      	mov	r6, r0
 8009b6a:	460f      	mov	r7, r1
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4620      	mov	r0, r4
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7f6 fb83 	bl	800027c <__adddf3>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	4639      	mov	r1, r7
 8009b7e:	f7f6 fe5d 	bl	800083c <__aeabi_ddiv>
 8009b82:	f04f 0a01 	mov.w	sl, #1
 8009b86:	4604      	mov	r4, r0
 8009b88:	460d      	mov	r5, r1
 8009b8a:	e764      	b.n	8009a56 <atan+0xce>
 8009b8c:	4b49      	ldr	r3, [pc, #292]	; (8009cb4 <atan+0x32c>)
 8009b8e:	429e      	cmp	r6, r3
 8009b90:	da1d      	bge.n	8009bce <atan+0x246>
 8009b92:	ee10 0a10 	vmov	r0, s0
 8009b96:	4b48      	ldr	r3, [pc, #288]	; (8009cb8 <atan+0x330>)
 8009b98:	2200      	movs	r2, #0
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	f7f6 fb6c 	bl	8000278 <__aeabi_dsub>
 8009ba0:	4b45      	ldr	r3, [pc, #276]	; (8009cb8 <atan+0x330>)
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	460f      	mov	r7, r1
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4620      	mov	r0, r4
 8009baa:	4629      	mov	r1, r5
 8009bac:	f7f6 fd1c 	bl	80005e8 <__aeabi_dmul>
 8009bb0:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <atan+0x324>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	f7f6 fb62 	bl	800027c <__adddf3>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	f7f6 fe3c 	bl	800083c <__aeabi_ddiv>
 8009bc4:	f04f 0a02 	mov.w	sl, #2
 8009bc8:	4604      	mov	r4, r0
 8009bca:	460d      	mov	r5, r1
 8009bcc:	e743      	b.n	8009a56 <atan+0xce>
 8009bce:	462b      	mov	r3, r5
 8009bd0:	ee10 2a10 	vmov	r2, s0
 8009bd4:	4939      	ldr	r1, [pc, #228]	; (8009cbc <atan+0x334>)
 8009bd6:	2000      	movs	r0, #0
 8009bd8:	f7f6 fe30 	bl	800083c <__aeabi_ddiv>
 8009bdc:	f04f 0a03 	mov.w	sl, #3
 8009be0:	4604      	mov	r4, r0
 8009be2:	460d      	mov	r5, r1
 8009be4:	e737      	b.n	8009a56 <atan+0xce>
 8009be6:	4b36      	ldr	r3, [pc, #216]	; (8009cc0 <atan+0x338>)
 8009be8:	4e36      	ldr	r6, [pc, #216]	; (8009cc4 <atan+0x33c>)
 8009bea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8009bee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8009bf2:	e9da 2300 	ldrd	r2, r3, [sl]
 8009bf6:	f7f6 fb3f 	bl	8000278 <__aeabi_dsub>
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	462b      	mov	r3, r5
 8009bfe:	f7f6 fb3b 	bl	8000278 <__aeabi_dsub>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	e9d6 0100 	ldrd	r0, r1, [r6]
 8009c0a:	f7f6 fb35 	bl	8000278 <__aeabi_dsub>
 8009c0e:	f1bb 0f00 	cmp.w	fp, #0
 8009c12:	4604      	mov	r4, r0
 8009c14:	460d      	mov	r5, r1
 8009c16:	f6bf aed6 	bge.w	80099c6 <atan+0x3e>
 8009c1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c1e:	461d      	mov	r5, r3
 8009c20:	e6d1      	b.n	80099c6 <atan+0x3e>
 8009c22:	a51d      	add	r5, pc, #116	; (adr r5, 8009c98 <atan+0x310>)
 8009c24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009c28:	e6cd      	b.n	80099c6 <atan+0x3e>
 8009c2a:	bf00      	nop
 8009c2c:	f3af 8000 	nop.w
 8009c30:	54442d18 	.word	0x54442d18
 8009c34:	bff921fb 	.word	0xbff921fb
 8009c38:	8800759c 	.word	0x8800759c
 8009c3c:	7e37e43c 	.word	0x7e37e43c
 8009c40:	e322da11 	.word	0xe322da11
 8009c44:	3f90ad3a 	.word	0x3f90ad3a
 8009c48:	24760deb 	.word	0x24760deb
 8009c4c:	3fa97b4b 	.word	0x3fa97b4b
 8009c50:	a0d03d51 	.word	0xa0d03d51
 8009c54:	3fb10d66 	.word	0x3fb10d66
 8009c58:	c54c206e 	.word	0xc54c206e
 8009c5c:	3fb745cd 	.word	0x3fb745cd
 8009c60:	920083ff 	.word	0x920083ff
 8009c64:	3fc24924 	.word	0x3fc24924
 8009c68:	5555550d 	.word	0x5555550d
 8009c6c:	3fd55555 	.word	0x3fd55555
 8009c70:	2c6a6c2f 	.word	0x2c6a6c2f
 8009c74:	bfa2b444 	.word	0xbfa2b444
 8009c78:	52defd9a 	.word	0x52defd9a
 8009c7c:	3fadde2d 	.word	0x3fadde2d
 8009c80:	af749a6d 	.word	0xaf749a6d
 8009c84:	3fb3b0f2 	.word	0x3fb3b0f2
 8009c88:	fe231671 	.word	0xfe231671
 8009c8c:	3fbc71c6 	.word	0x3fbc71c6
 8009c90:	9998ebc4 	.word	0x9998ebc4
 8009c94:	3fc99999 	.word	0x3fc99999
 8009c98:	54442d18 	.word	0x54442d18
 8009c9c:	3ff921fb 	.word	0x3ff921fb
 8009ca0:	440fffff 	.word	0x440fffff
 8009ca4:	7ff00000 	.word	0x7ff00000
 8009ca8:	3fdbffff 	.word	0x3fdbffff
 8009cac:	3ff00000 	.word	0x3ff00000
 8009cb0:	3ff2ffff 	.word	0x3ff2ffff
 8009cb4:	40038000 	.word	0x40038000
 8009cb8:	3ff80000 	.word	0x3ff80000
 8009cbc:	bff00000 	.word	0xbff00000
 8009cc0:	0800a580 	.word	0x0800a580
 8009cc4:	0800a560 	.word	0x0800a560

08009cc8 <fabs>:
 8009cc8:	ec51 0b10 	vmov	r0, r1, d0
 8009ccc:	ee10 2a10 	vmov	r2, s0
 8009cd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009cd4:	ec43 2b10 	vmov	d0, r2, r3
 8009cd8:	4770      	bx	lr

08009cda <fabsf>:
 8009cda:	ee10 3a10 	vmov	r3, s0
 8009cde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ce2:	ee00 3a10 	vmov	s0, r3
 8009ce6:	4770      	bx	lr

08009ce8 <floorf>:
 8009ce8:	ee10 3a10 	vmov	r3, s0
 8009cec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009cf0:	3a7f      	subs	r2, #127	; 0x7f
 8009cf2:	2a16      	cmp	r2, #22
 8009cf4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009cf8:	dc2a      	bgt.n	8009d50 <floorf+0x68>
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	da11      	bge.n	8009d22 <floorf+0x3a>
 8009cfe:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009d60 <floorf+0x78>
 8009d02:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d06:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0e:	dd05      	ble.n	8009d1c <floorf+0x34>
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	da23      	bge.n	8009d5c <floorf+0x74>
 8009d14:	4a13      	ldr	r2, [pc, #76]	; (8009d64 <floorf+0x7c>)
 8009d16:	2900      	cmp	r1, #0
 8009d18:	bf18      	it	ne
 8009d1a:	4613      	movne	r3, r2
 8009d1c:	ee00 3a10 	vmov	s0, r3
 8009d20:	4770      	bx	lr
 8009d22:	4911      	ldr	r1, [pc, #68]	; (8009d68 <floorf+0x80>)
 8009d24:	4111      	asrs	r1, r2
 8009d26:	420b      	tst	r3, r1
 8009d28:	d0fa      	beq.n	8009d20 <floorf+0x38>
 8009d2a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8009d60 <floorf+0x78>
 8009d2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009d32:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3a:	ddef      	ble.n	8009d1c <floorf+0x34>
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	bfbe      	ittt	lt
 8009d40:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8009d44:	fa40 f202 	asrlt.w	r2, r0, r2
 8009d48:	189b      	addlt	r3, r3, r2
 8009d4a:	ea23 0301 	bic.w	r3, r3, r1
 8009d4e:	e7e5      	b.n	8009d1c <floorf+0x34>
 8009d50:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009d54:	d3e4      	bcc.n	8009d20 <floorf+0x38>
 8009d56:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d5a:	4770      	bx	lr
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	e7dd      	b.n	8009d1c <floorf+0x34>
 8009d60:	7149f2ca 	.word	0x7149f2ca
 8009d64:	bf800000 	.word	0xbf800000
 8009d68:	007fffff 	.word	0x007fffff

08009d6c <scalbnf>:
 8009d6c:	ee10 3a10 	vmov	r3, s0
 8009d70:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8009d74:	d025      	beq.n	8009dc2 <scalbnf+0x56>
 8009d76:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8009d7a:	d302      	bcc.n	8009d82 <scalbnf+0x16>
 8009d7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009d80:	4770      	bx	lr
 8009d82:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8009d86:	d122      	bne.n	8009dce <scalbnf+0x62>
 8009d88:	4b2a      	ldr	r3, [pc, #168]	; (8009e34 <scalbnf+0xc8>)
 8009d8a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8009e38 <scalbnf+0xcc>
 8009d8e:	4298      	cmp	r0, r3
 8009d90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009d94:	db16      	blt.n	8009dc4 <scalbnf+0x58>
 8009d96:	ee10 3a10 	vmov	r3, s0
 8009d9a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009d9e:	3a19      	subs	r2, #25
 8009da0:	4402      	add	r2, r0
 8009da2:	2afe      	cmp	r2, #254	; 0xfe
 8009da4:	dd15      	ble.n	8009dd2 <scalbnf+0x66>
 8009da6:	ee10 3a10 	vmov	r3, s0
 8009daa:	eddf 7a24 	vldr	s15, [pc, #144]	; 8009e3c <scalbnf+0xd0>
 8009dae:	eddf 6a24 	vldr	s13, [pc, #144]	; 8009e40 <scalbnf+0xd4>
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	eeb0 7a67 	vmov.f32	s14, s15
 8009db8:	bfb8      	it	lt
 8009dba:	eef0 7a66 	vmovlt.f32	s15, s13
 8009dbe:	ee27 0a27 	vmul.f32	s0, s14, s15
 8009dc2:	4770      	bx	lr
 8009dc4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8009e44 <scalbnf+0xd8>
 8009dc8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009dcc:	4770      	bx	lr
 8009dce:	0dd2      	lsrs	r2, r2, #23
 8009dd0:	e7e6      	b.n	8009da0 <scalbnf+0x34>
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	dd06      	ble.n	8009de4 <scalbnf+0x78>
 8009dd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009dda:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009dde:	ee00 3a10 	vmov	s0, r3
 8009de2:	4770      	bx	lr
 8009de4:	f112 0f16 	cmn.w	r2, #22
 8009de8:	da1a      	bge.n	8009e20 <scalbnf+0xb4>
 8009dea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009dee:	4298      	cmp	r0, r3
 8009df0:	ee10 3a10 	vmov	r3, s0
 8009df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009df8:	dd0a      	ble.n	8009e10 <scalbnf+0xa4>
 8009dfa:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8009e3c <scalbnf+0xd0>
 8009dfe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009e40 <scalbnf+0xd4>
 8009e02:	eef0 7a40 	vmov.f32	s15, s0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bf18      	it	ne
 8009e0a:	eeb0 0a47 	vmovne.f32	s0, s14
 8009e0e:	e7db      	b.n	8009dc8 <scalbnf+0x5c>
 8009e10:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009e44 <scalbnf+0xd8>
 8009e14:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8009e48 <scalbnf+0xdc>
 8009e18:	eef0 7a40 	vmov.f32	s15, s0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	e7f3      	b.n	8009e08 <scalbnf+0x9c>
 8009e20:	3219      	adds	r2, #25
 8009e22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009e26:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009e2a:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009e4c <scalbnf+0xe0>
 8009e2e:	ee07 3a10 	vmov	s14, r3
 8009e32:	e7c4      	b.n	8009dbe <scalbnf+0x52>
 8009e34:	ffff3cb0 	.word	0xffff3cb0
 8009e38:	4c000000 	.word	0x4c000000
 8009e3c:	7149f2ca 	.word	0x7149f2ca
 8009e40:	f149f2ca 	.word	0xf149f2ca
 8009e44:	0da24260 	.word	0x0da24260
 8009e48:	8da24260 	.word	0x8da24260
 8009e4c:	33000000 	.word	0x33000000

08009e50 <_init>:
 8009e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e52:	bf00      	nop
 8009e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e56:	bc08      	pop	{r3}
 8009e58:	469e      	mov	lr, r3
 8009e5a:	4770      	bx	lr

08009e5c <_fini>:
 8009e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5e:	bf00      	nop
 8009e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e62:	bc08      	pop	{r3}
 8009e64:	469e      	mov	lr, r3
 8009e66:	4770      	bx	lr
