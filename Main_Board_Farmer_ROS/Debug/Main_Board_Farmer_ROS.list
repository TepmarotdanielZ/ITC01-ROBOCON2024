
Main_Board_Farmer_ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08008a68  08008a68  00018a68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd0  08008dd0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08008dd0  08008dd0  00018dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dd8  08008dd8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008de0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000378  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200003f8  200003f8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136f9  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df2  00000000  00000000  000337a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00036598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001078  00000000  00000000  00037770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e93  00000000  00000000  000387e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157b8  00000000  00000000  0005d67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd836  00000000  00000000  00072e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00150669  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000553c  00000000  00000000  001506bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a4c 	.word	0x08008a4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08008a4c 	.word	0x08008a4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b974 	b.w	8000ebc <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9d08      	ldr	r5, [sp, #32]
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	468e      	mov	lr, r1
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d14d      	bne.n	8000c96 <__udivmoddi4+0xaa>
 8000bfa:	428a      	cmp	r2, r1
 8000bfc:	4694      	mov	ip, r2
 8000bfe:	d969      	bls.n	8000cd4 <__udivmoddi4+0xe8>
 8000c00:	fab2 f282 	clz	r2, r2
 8000c04:	b152      	cbz	r2, 8000c1c <__udivmoddi4+0x30>
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	f1c2 0120 	rsb	r1, r2, #32
 8000c0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c16:	ea41 0e03 	orr.w	lr, r1, r3
 8000c1a:	4094      	lsls	r4, r2
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	0c21      	lsrs	r1, r4, #16
 8000c22:	fbbe f6f8 	udiv	r6, lr, r8
 8000c26:	fa1f f78c 	uxth.w	r7, ip
 8000c2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c32:	fb06 f107 	mul.w	r1, r6, r7
 8000c36:	4299      	cmp	r1, r3
 8000c38:	d90a      	bls.n	8000c50 <__udivmoddi4+0x64>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c42:	f080 811f 	bcs.w	8000e84 <__udivmoddi4+0x298>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 811c 	bls.w	8000e84 <__udivmoddi4+0x298>
 8000c4c:	3e02      	subs	r6, #2
 8000c4e:	4463      	add	r3, ip
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c58:	fb08 3310 	mls	r3, r8, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 f707 	mul.w	r7, r0, r7
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	d90a      	bls.n	8000c7e <__udivmoddi4+0x92>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c70:	f080 810a 	bcs.w	8000e88 <__udivmoddi4+0x29c>
 8000c74:	42a7      	cmp	r7, r4
 8000c76:	f240 8107 	bls.w	8000e88 <__udivmoddi4+0x29c>
 8000c7a:	4464      	add	r4, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	1be4      	subs	r4, r4, r7
 8000c84:	2600      	movs	r6, #0
 8000c86:	b11d      	cbz	r5, 8000c90 <__udivmoddi4+0xa4>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xc2>
 8000c9a:	2d00      	cmp	r5, #0
 8000c9c:	f000 80ef 	beq.w	8000e7e <__udivmoddi4+0x292>
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca6:	4630      	mov	r0, r6
 8000ca8:	4631      	mov	r1, r6
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f683 	clz	r6, r3
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d14a      	bne.n	8000d4c <__udivmoddi4+0x160>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd4>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80f9 	bhi.w	8000eb2 <__udivmoddi4+0x2c6>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	469e      	mov	lr, r3
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa4>
 8000cce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xec>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 8092 	bne.w	8000e06 <__udivmoddi4+0x21a>
 8000ce2:	eba1 010c 	sub.w	r1, r1, ip
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f fe8c 	uxth.w	lr, ip
 8000cee:	2601      	movs	r6, #1
 8000cf0:	0c20      	lsrs	r0, r4, #16
 8000cf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfe:	fb0e f003 	mul.w	r0, lr, r3
 8000d02:	4288      	cmp	r0, r1
 8000d04:	d908      	bls.n	8000d18 <__udivmoddi4+0x12c>
 8000d06:	eb1c 0101 	adds.w	r1, ip, r1
 8000d0a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0e:	d202      	bcs.n	8000d16 <__udivmoddi4+0x12a>
 8000d10:	4288      	cmp	r0, r1
 8000d12:	f200 80cb 	bhi.w	8000eac <__udivmoddi4+0x2c0>
 8000d16:	4643      	mov	r3, r8
 8000d18:	1a09      	subs	r1, r1, r0
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d20:	fb07 1110 	mls	r1, r7, r0, r1
 8000d24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d28:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d908      	bls.n	8000d42 <__udivmoddi4+0x156>
 8000d30:	eb1c 0404 	adds.w	r4, ip, r4
 8000d34:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x154>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f200 80bb 	bhi.w	8000eb6 <__udivmoddi4+0x2ca>
 8000d40:	4608      	mov	r0, r1
 8000d42:	eba4 040e 	sub.w	r4, r4, lr
 8000d46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4a:	e79c      	b.n	8000c86 <__udivmoddi4+0x9a>
 8000d4c:	f1c6 0720 	rsb	r7, r6, #32
 8000d50:	40b3      	lsls	r3, r6
 8000d52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d62:	431c      	orrs	r4, r3
 8000d64:	40f9      	lsrs	r1, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d72:	0c20      	lsrs	r0, r4, #16
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	fb09 1118 	mls	r1, r9, r8, r1
 8000d7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d80:	fb08 f00e 	mul.w	r0, r8, lr
 8000d84:	4288      	cmp	r0, r1
 8000d86:	fa02 f206 	lsl.w	r2, r2, r6
 8000d8a:	d90b      	bls.n	8000da4 <__udivmoddi4+0x1b8>
 8000d8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d90:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d94:	f080 8088 	bcs.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	f240 8085 	bls.w	8000ea8 <__udivmoddi4+0x2bc>
 8000d9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dac:	fb09 1110 	mls	r1, r9, r0, r1
 8000db0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	458e      	cmp	lr, r1
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x1e2>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc4:	d26c      	bcs.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dc6:	458e      	cmp	lr, r1
 8000dc8:	d96a      	bls.n	8000ea0 <__udivmoddi4+0x2b4>
 8000dca:	3802      	subs	r0, #2
 8000dcc:	4461      	add	r1, ip
 8000dce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd6:	eba1 010e 	sub.w	r1, r1, lr
 8000dda:	42a1      	cmp	r1, r4
 8000ddc:	46c8      	mov	r8, r9
 8000dde:	46a6      	mov	lr, r4
 8000de0:	d356      	bcc.n	8000e90 <__udivmoddi4+0x2a4>
 8000de2:	d053      	beq.n	8000e8c <__udivmoddi4+0x2a0>
 8000de4:	b15d      	cbz	r5, 8000dfe <__udivmoddi4+0x212>
 8000de6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dea:	eb61 010e 	sbc.w	r1, r1, lr
 8000dee:	fa01 f707 	lsl.w	r7, r1, r7
 8000df2:	fa22 f306 	lsr.w	r3, r2, r6
 8000df6:	40f1      	lsrs	r1, r6
 8000df8:	431f      	orrs	r7, r3
 8000dfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfe:	2600      	movs	r6, #0
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	f1c2 0320 	rsb	r3, r2, #32
 8000e0a:	40d8      	lsrs	r0, r3
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	fa21 f303 	lsr.w	r3, r1, r3
 8000e14:	4091      	lsls	r1, r2
 8000e16:	4301      	orrs	r1, r0
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa1f fe8c 	uxth.w	lr, ip
 8000e20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e24:	fb07 3610 	mls	r6, r7, r0, r3
 8000e28:	0c0b      	lsrs	r3, r1, #16
 8000e2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e32:	429e      	cmp	r6, r3
 8000e34:	fa04 f402 	lsl.w	r4, r4, r2
 8000e38:	d908      	bls.n	8000e4c <__udivmoddi4+0x260>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e42:	d22f      	bcs.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e44:	429e      	cmp	r6, r3
 8000e46:	d92d      	bls.n	8000ea4 <__udivmoddi4+0x2b8>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e54:	fb07 3316 	mls	r3, r7, r6, r3
 8000e58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e60:	428b      	cmp	r3, r1
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x28a>
 8000e64:	eb1c 0101 	adds.w	r1, ip, r1
 8000e68:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e6c:	d216      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d914      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e72:	3e02      	subs	r6, #2
 8000e74:	4461      	add	r1, ip
 8000e76:	1ac9      	subs	r1, r1, r3
 8000e78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e7c:	e738      	b.n	8000cf0 <__udivmoddi4+0x104>
 8000e7e:	462e      	mov	r6, r5
 8000e80:	4628      	mov	r0, r5
 8000e82:	e705      	b.n	8000c90 <__udivmoddi4+0xa4>
 8000e84:	4606      	mov	r6, r0
 8000e86:	e6e3      	b.n	8000c50 <__udivmoddi4+0x64>
 8000e88:	4618      	mov	r0, r3
 8000e8a:	e6f8      	b.n	8000c7e <__udivmoddi4+0x92>
 8000e8c:	454b      	cmp	r3, r9
 8000e8e:	d2a9      	bcs.n	8000de4 <__udivmoddi4+0x1f8>
 8000e90:	ebb9 0802 	subs.w	r8, r9, r2
 8000e94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e98:	3801      	subs	r0, #1
 8000e9a:	e7a3      	b.n	8000de4 <__udivmoddi4+0x1f8>
 8000e9c:	4646      	mov	r6, r8
 8000e9e:	e7ea      	b.n	8000e76 <__udivmoddi4+0x28a>
 8000ea0:	4620      	mov	r0, r4
 8000ea2:	e794      	b.n	8000dce <__udivmoddi4+0x1e2>
 8000ea4:	4640      	mov	r0, r8
 8000ea6:	e7d1      	b.n	8000e4c <__udivmoddi4+0x260>
 8000ea8:	46d0      	mov	r8, sl
 8000eaa:	e77b      	b.n	8000da4 <__udivmoddi4+0x1b8>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	e732      	b.n	8000d18 <__udivmoddi4+0x12c>
 8000eb2:	4630      	mov	r0, r6
 8000eb4:	e709      	b.n	8000cca <__udivmoddi4+0xde>
 8000eb6:	4464      	add	r4, ip
 8000eb8:	3802      	subs	r0, #2
 8000eba:	e742      	b.n	8000d42 <__udivmoddi4+0x156>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed2:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000ed4:	4a28      	ldr	r2, [pc, #160]	; (8000f78 <MX_ADC1_Init+0xb8>)
 8000ed6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000eda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ede:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee0:	4b24      	ldr	r3, [pc, #144]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef2:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000f02:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <MX_ADC1_Init+0xbc>)
 8000f04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000f0e:	2202      	movs	r2, #2
 8000f10:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f20:	4814      	ldr	r0, [pc, #80]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000f22:	f001 fd19 	bl	8002958 <HAL_ADC_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f2c:	f001 f80a 	bl	8001f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000f30:	230a      	movs	r3, #10
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000f42:	f001 fe7b 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f4c:	f000 fffa 	bl	8001f44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000f50:	230b      	movs	r3, #11
 8000f52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_ADC1_Init+0xb4>)
 8000f5e:	f001 fe6d 	bl	8002c3c <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f68:	f000 ffec 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	2000009c 	.word	0x2000009c
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	0f000001 	.word	0x0f000001

08000f80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a2e      	ldr	r2, [pc, #184]	; (8001058 <HAL_ADC_MspInit+0xd8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d156      	bne.n	8001050 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	; (800105c <HAL_ADC_MspInit+0xdc>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a2c      	ldr	r2, [pc, #176]	; (800105c <HAL_ADC_MspInit+0xdc>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b2a      	ldr	r3, [pc, #168]	; (800105c <HAL_ADC_MspInit+0xdc>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <HAL_ADC_MspInit+0xdc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_ADC_MspInit+0xdc>)
 8000fc8:	f043 0304 	orr.w	r3, r3, #4
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <HAL_ADC_MspInit+0xdc>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0304 	and.w	r3, r3, #4
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	481c      	ldr	r0, [pc, #112]	; (8001060 <HAL_ADC_MspInit+0xe0>)
 8000fee:	f003 fba9 	bl	8004744 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8000ff4:	4a1c      	ldr	r2, [pc, #112]	; (8001068 <HAL_ADC_MspInit+0xe8>)
 8000ff6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 800100c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001010:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8001014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001018:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 800101c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001020:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8001030:	2200      	movs	r2, #0
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8001036:	f003 f815 	bl	8004064 <HAL_DMA_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001040:	f000 ff80 	bl	8001f44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 8001048:	639a      	str	r2, [r3, #56]	; 0x38
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <HAL_ADC_MspInit+0xe4>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40012000 	.word	0x40012000
 800105c:	40023800 	.word	0x40023800
 8001060:	40020800 	.word	0x40020800
 8001064:	200000e4 	.word	0x200000e4
 8001068:	40026410 	.word	0x40026410

0800106c <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4619      	mov	r1, r3
 800107a:	2007      	movs	r0, #7
 800107c:	f000 fbda 	bl	8001834 <bno055_writeData>
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	4619      	mov	r1, r3
 8001096:	203d      	movs	r0, #61	; 0x3d
 8001098:	f000 fbcc 	bl	8001834 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <bno055_setOperationMode+0x22>
    bno055_delay(19);
 80010a2:	2013      	movs	r0, #19
 80010a4:	f000 fbba 	bl	800181c <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 80010a8:	e002      	b.n	80010b0 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 80010aa:	2007      	movs	r0, #7
 80010ac:	f000 fbb6 	bl	800181c <bno055_delay>
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff ffe3 	bl	8001088 <bno055_setOperationMode>
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 80010ca:	200c      	movs	r0, #12
 80010cc:	f7ff ffdc 	bl	8001088 <bno055_setOperationMode>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 80010d8:	2120      	movs	r1, #32
 80010da:	203f      	movs	r0, #63	; 0x3f
 80010dc:	f000 fbaa 	bl	8001834 <bno055_writeData>
  bno055_delay(700);
 80010e0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80010e4:	f000 fb9a 	bl	800181c <bno055_delay>
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}

080010ec <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  bno055_reset();
 80010f2:	f7ff ffef 	bl	80010d4 <bno055_reset>

  uint8_t id = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	2201      	movs	r2, #1
 80010fe:	4619      	mov	r1, r3
 8001100:	2000      	movs	r0, #0
 8001102:	f000 fc83 	bl	8001a0c <bno055_readData>
  if (id != BNO055_ID) {
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2ba0      	cmp	r3, #160	; 0xa0
 800110a:	d004      	beq.n	8001116 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	4619      	mov	r1, r3
 8001110:	4809      	ldr	r0, [pc, #36]	; (8001138 <bno055_setup+0x4c>)
 8001112:	f006 fa1d 	bl	8007550 <iprintf>
  }
  bno055_setPage(0);
 8001116:	2000      	movs	r0, #0
 8001118:	f7ff ffa8 	bl	800106c <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800111c:	2100      	movs	r1, #0
 800111e:	203f      	movs	r0, #63	; 0x3f
 8001120:	f000 fb88 	bl	8001834 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8001124:	f7ff ffc8 	bl	80010b8 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8001128:	200a      	movs	r0, #10
 800112a:	f000 fb77 	bl	800181c <bno055_delay>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	08008a68 	.word	0x08008a68

0800113c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800113c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001140:	b09e      	sub	sp, #120	; 0x78
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 800114a:	2000      	movs	r0, #0
 800114c:	f7ff ff8e 	bl	800106c <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8001150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001154:	2b20      	cmp	r3, #32
 8001156:	d108      	bne.n	800116a <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8001158:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800115c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001160:	2208      	movs	r2, #8
 8001162:	4618      	mov	r0, r3
 8001164:	f000 fc52 	bl	8001a0c <bno055_readData>
 8001168:	e007      	b.n	800117a <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 800116a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800116e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001172:	2206      	movs	r2, #6
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fc49 	bl	8001a0c <bno055_readData>

  double scale = 1;
 800117a:	f04f 0200 	mov.w	r2, #0
 800117e:	4b8b      	ldr	r3, [pc, #556]	; (80013ac <bno055_getVector+0x270>)
 8001180:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 8001184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001188:	2b0e      	cmp	r3, #14
 800118a:	d109      	bne.n	80011a0 <bno055_getVector+0x64>
    scale = magScale;
 800118c:	4b88      	ldr	r3, [pc, #544]	; (80013b0 <bno055_getVector+0x274>)
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9af 	bl	80004f4 <__aeabi_ui2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800119e:	e03e      	b.n	800121e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 80011a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d007      	beq.n	80011b8 <bno055_getVector+0x7c>
 80011a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ac:	2b28      	cmp	r3, #40	; 0x28
 80011ae:	d003      	beq.n	80011b8 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 80011b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011b4:	2b2e      	cmp	r3, #46	; 0x2e
 80011b6:	d109      	bne.n	80011cc <bno055_getVector+0x90>
    scale = accelScale;
 80011b8:	4b7e      	ldr	r3, [pc, #504]	; (80013b4 <bno055_getVector+0x278>)
 80011ba:	881b      	ldrh	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f999 	bl	80004f4 <__aeabi_ui2d>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80011ca:	e028      	b.n	800121e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 80011cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011d0:	2b14      	cmp	r3, #20
 80011d2:	d109      	bne.n	80011e8 <bno055_getVector+0xac>
    scale = angularRateScale;
 80011d4:	4b78      	ldr	r3, [pc, #480]	; (80013b8 <bno055_getVector+0x27c>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f98b 	bl	80004f4 <__aeabi_ui2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80011e6:	e01a      	b.n	800121e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 80011e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ec:	2b1a      	cmp	r3, #26
 80011ee:	d109      	bne.n	8001204 <bno055_getVector+0xc8>
    scale = eulerScale;
 80011f0:	4b72      	ldr	r3, [pc, #456]	; (80013bc <bno055_getVector+0x280>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f97d 	bl	80004f4 <__aeabi_ui2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8001202:	e00c      	b.n	800121e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8001204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001208:	2b20      	cmp	r3, #32
 800120a:	d108      	bne.n	800121e <bno055_getVector+0xe2>
    scale = quaScale;
 800120c:	4b6c      	ldr	r3, [pc, #432]	; (80013c0 <bno055_getVector+0x284>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f96f 	bl	80004f4 <__aeabi_ui2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }
  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	2220      	movs	r2, #32
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f006 f98a 	bl	8007540 <memset>
    if (vec == BNO055_VECTOR_QUATERNION) {
 800122c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001230:	2b20      	cmp	r3, #32
 8001232:	d150      	bne.n	80012d6 <bno055_getVector+0x19a>
      xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8001234:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21b      	sxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff f964 	bl	8000514 <__aeabi_i2d>
 800124c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001250:	f7ff faf4 	bl	800083c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800125c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff f950 	bl	8000514 <__aeabi_i2d>
 8001274:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001278:	f7ff fae0 	bl	800083c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001284:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f93c 	bl	8000514 <__aeabi_i2d>
 800129c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012a0:	f7ff facc 	bl	800083c <__aeabi_ddiv>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 80012ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f928 	bl	8000514 <__aeabi_i2d>
 80012c4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012c8:	f7ff fab8 	bl	800083c <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80012d4:	e03b      	b.n	800134e <bno055_getVector+0x212>
    } else {
      xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80012d6:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21a      	sxth	r2, r3
 80012de:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	4313      	orrs	r3, r2
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f913 	bl	8000514 <__aeabi_i2d>
 80012ee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80012f2:	f7ff faa3 	bl	800083c <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80012fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	b21a      	sxth	r2, r3
 8001306:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21b      	sxth	r3, r3
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8ff 	bl	8000514 <__aeabi_i2d>
 8001316:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800131a:	f7ff fa8f 	bl	800083c <__aeabi_ddiv>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
      xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8001326:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001332:	b21b      	sxth	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b21b      	sxth	r3, r3
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f8eb 	bl	8000514 <__aeabi_i2d>
 800133e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001342:	f7ff fa7b 	bl	800083c <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    }

    return xyz;
 800134e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8001352:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8001356:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800135e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001362:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001366:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800136a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800136e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001372:	ec49 8b14 	vmov	d4, r8, r9
 8001376:	ec45 4b15 	vmov	d5, r4, r5
 800137a:	ec41 0b16 	vmov	d6, r0, r1
 800137e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8001382:	eeb0 0a44 	vmov.f32	s0, s8
 8001386:	eef0 0a64 	vmov.f32	s1, s9
 800138a:	eeb0 1a45 	vmov.f32	s2, s10
 800138e:	eef0 1a65 	vmov.f32	s3, s11
 8001392:	eeb0 2a46 	vmov.f32	s4, s12
 8001396:	eef0 2a66 	vmov.f32	s5, s13
 800139a:	eeb0 3a47 	vmov.f32	s6, s14
 800139e:	eef0 3a67 	vmov.f32	s7, s15
 80013a2:	3778      	adds	r7, #120	; 0x78
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013aa:	bf00      	nop
 80013ac:	3ff00000 	.word	0x3ff00000
 80013b0:	20000006 	.word	0x20000006
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000002 	.word	0x20000002
 80013bc:	20000004 	.word	0x20000004
 80013c0:	20000008 	.word	0x20000008

080013c4 <bno055_getVectorQuaternion>:
    return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
  }
  bno055_vector_t bno055_getVectorGravity() {
    return bno055_getVector(BNO055_VECTOR_GRAVITY);
  }
  bno055_vector_t bno055_getVectorQuaternion() {
 80013c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013c8:	b090      	sub	sp, #64	; 0x40
 80013ca:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_QUATERNION);
 80013cc:	2020      	movs	r0, #32
 80013ce:	f7ff feb5 	bl	800113c <bno055_getVector>
 80013d2:	eeb0 4a40 	vmov.f32	s8, s0
 80013d6:	eef0 4a60 	vmov.f32	s9, s1
 80013da:	eeb0 5a41 	vmov.f32	s10, s2
 80013de:	eef0 5a61 	vmov.f32	s11, s3
 80013e2:	eeb0 6a42 	vmov.f32	s12, s4
 80013e6:	eef0 6a62 	vmov.f32	s13, s5
 80013ea:	eeb0 7a43 	vmov.f32	s14, s6
 80013ee:	eef0 7a63 	vmov.f32	s15, s7
 80013f2:	ed87 4b08 	vstr	d4, [r7, #32]
 80013f6:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80013fa:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80013fe:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8001402:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001406:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800140a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800140e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001412:	ec49 8b14 	vmov	d4, r8, r9
 8001416:	ec45 4b15 	vmov	d5, r4, r5
 800141a:	ec41 0b16 	vmov	d6, r0, r1
 800141e:	ec43 2b17 	vmov	d7, r2, r3
  }
 8001422:	eeb0 0a44 	vmov.f32	s0, s8
 8001426:	eef0 0a64 	vmov.f32	s1, s9
 800142a:	eeb0 1a45 	vmov.f32	s2, s10
 800142e:	eef0 1a65 	vmov.f32	s3, s11
 8001432:	eeb0 2a46 	vmov.f32	s4, s12
 8001436:	eef0 2a66 	vmov.f32	s5, s13
 800143a:	eeb0 3a47 	vmov.f32	s6, s14
 800143e:	eef0 3a67 	vmov.f32	s7, s15
 8001442:	3740      	adds	r7, #64	; 0x40
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800144c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <MX_CAN1_Init+0x9c>)
 8001454:	4a25      	ldr	r2, [pc, #148]	; (80014ec <MX_CAN1_Init+0xa0>)
 8001456:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001458:	4b23      	ldr	r3, [pc, #140]	; (80014e8 <MX_CAN1_Init+0x9c>)
 800145a:	2206      	movs	r2, #6
 800145c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <MX_CAN1_Init+0x9c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001464:	4b20      	ldr	r3, [pc, #128]	; (80014e8 <MX_CAN1_Init+0x9c>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 800146a:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <MX_CAN1_Init+0x9c>)
 800146c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001470:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <MX_CAN1_Init+0x9c>)
 8001474:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001478:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800147a:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_CAN1_Init+0x9c>)
 800147c:	2200      	movs	r2, #0
 800147e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001480:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_CAN1_Init+0x9c>)
 8001482:	2200      	movs	r2, #0
 8001484:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_CAN1_Init+0x9c>)
 8001488:	2200      	movs	r2, #0
 800148a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <MX_CAN1_Init+0x9c>)
 800148e:	2200      	movs	r2, #0
 8001490:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_CAN1_Init+0x9c>)
 8001494:	2200      	movs	r2, #0
 8001496:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <MX_CAN1_Init+0x9c>)
 800149a:	2200      	movs	r2, #0
 800149c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800149e:	4812      	ldr	r0, [pc, #72]	; (80014e8 <MX_CAN1_Init+0x9c>)
 80014a0:	f001 fe6c 	bl	800317c <HAL_CAN_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80014aa:	f000 fd4b 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80014ae:	2301      	movs	r3, #1
 80014b0:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x0000;
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80014ce:	2301      	movs	r3, #1
 80014d0:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 80014d2:	230e      	movs	r3, #14
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 80014d6:	463b      	mov	r3, r7
 80014d8:	4619      	mov	r1, r3
 80014da:	4803      	ldr	r0, [pc, #12]	; (80014e8 <MX_CAN1_Init+0x9c>)
 80014dc:	f001 ff4a 	bl	8003374 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000144 	.word	0x20000144
 80014ec:	40006400 	.word	0x40006400

080014f0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HAL_CAN_MspInit+0x94>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d134      	bne.n	800157c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b1c      	ldr	r3, [pc, #112]	; (8001588 <HAL_CAN_MspInit+0x98>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_CAN_MspInit+0x98>)
 800151c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_CAN_MspInit+0x98>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_CAN_MspInit+0x98>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a14      	ldr	r2, [pc, #80]	; (8001588 <HAL_CAN_MspInit+0x98>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_CAN_MspInit+0x98>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800154a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800154e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800155c:	2309      	movs	r3, #9
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 0314 	add.w	r3, r7, #20
 8001564:	4619      	mov	r1, r3
 8001566:	4809      	ldr	r0, [pc, #36]	; (800158c <HAL_CAN_MspInit+0x9c>)
 8001568:	f003 f8ec 	bl	8004744 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2014      	movs	r0, #20
 8001572:	f002 fd40 	bl	8003ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001576:	2014      	movs	r0, #20
 8001578:	f002 fd59 	bl	800402e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800157c:	bf00      	nop
 800157e:	3728      	adds	r7, #40	; 0x28
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40006400 	.word	0x40006400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020400 	.word	0x40020400

08001590 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_DMA_Init+0x3c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <MX_DMA_Init+0x3c>)
 80015a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_DMA_Init+0x3c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2038      	movs	r0, #56	; 0x38
 80015b8:	f002 fd1d 	bl	8003ff6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015bc:	2038      	movs	r0, #56	; 0x38
 80015be:	f002 fd36 	bl	800402e <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <MX_GPIO_Init+0x134>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a45      	ldr	r2, [pc, #276]	; (8001704 <MX_GPIO_Init+0x134>)
 80015f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b43      	ldr	r3, [pc, #268]	; (8001704 <MX_GPIO_Init+0x134>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fe:	61bb      	str	r3, [r7, #24]
 8001600:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
 8001606:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <MX_GPIO_Init+0x134>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a3e      	ldr	r2, [pc, #248]	; (8001704 <MX_GPIO_Init+0x134>)
 800160c:	f043 0304 	orr.w	r3, r3, #4
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <MX_GPIO_Init+0x134>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	4b38      	ldr	r3, [pc, #224]	; (8001704 <MX_GPIO_Init+0x134>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a37      	ldr	r2, [pc, #220]	; (8001704 <MX_GPIO_Init+0x134>)
 8001628:	f043 0310 	orr.w	r3, r3, #16
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <MX_GPIO_Init+0x134>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	4b31      	ldr	r3, [pc, #196]	; (8001704 <MX_GPIO_Init+0x134>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a30      	ldr	r2, [pc, #192]	; (8001704 <MX_GPIO_Init+0x134>)
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <MX_GPIO_Init+0x134>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60bb      	str	r3, [r7, #8]
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <MX_GPIO_Init+0x134>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a29      	ldr	r2, [pc, #164]	; (8001704 <MX_GPIO_Init+0x134>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b27      	ldr	r3, [pc, #156]	; (8001704 <MX_GPIO_Init+0x134>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
 8001676:	4b23      	ldr	r3, [pc, #140]	; (8001704 <MX_GPIO_Init+0x134>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <MX_GPIO_Init+0x134>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <MX_GPIO_Init+0x134>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001694:	481c      	ldr	r0, [pc, #112]	; (8001708 <MX_GPIO_Init+0x138>)
 8001696:	f003 f9f1 	bl	8004a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Slide_GPIO_Port, Slide_Pin, GPIO_PIN_RESET);
 800169a:	2200      	movs	r2, #0
 800169c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016a0:	481a      	ldr	r0, [pc, #104]	; (800170c <MX_GPIO_Init+0x13c>)
 80016a2:	f003 f9eb 	bl	8004a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE13 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80016a6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	4619      	mov	r1, r3
 80016be:	4812      	ldr	r0, [pc, #72]	; (8001708 <MX_GPIO_Init+0x138>)
 80016c0:	f003 f840 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Slide_Pin;
 80016c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	2301      	movs	r3, #1
 80016cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Slide_GPIO_Port, &GPIO_InitStruct);
 80016d6:	f107 031c 	add.w	r3, r7, #28
 80016da:	4619      	mov	r1, r3
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <MX_GPIO_Init+0x13c>)
 80016de:	f003 f831 	bl	8004744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Push_Pin;
 80016e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Push_GPIO_Port, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4805      	ldr	r0, [pc, #20]	; (800170c <MX_GPIO_Init+0x13c>)
 80016f8:	f003 f824 	bl	8004744 <HAL_GPIO_Init>

}
 80016fc:	bf00      	nop
 80016fe:	3730      	adds	r7, #48	; 0x30
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40023800 	.word	0x40023800
 8001708:	40021000 	.word	0x40021000
 800170c:	40020000 	.word	0x40020000

08001710 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001714:	4b12      	ldr	r3, [pc, #72]	; (8001760 <MX_I2C1_Init+0x50>)
 8001716:	4a13      	ldr	r2, [pc, #76]	; (8001764 <MX_I2C1_Init+0x54>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_I2C1_Init+0x50>)
 800171c:	4a12      	ldr	r2, [pc, #72]	; (8001768 <MX_I2C1_Init+0x58>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_I2C1_Init+0x50>)
 800172e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <MX_I2C1_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_I2C1_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001740:	4b07      	ldr	r3, [pc, #28]	; (8001760 <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	; (8001760 <MX_I2C1_Init+0x50>)
 800174e:	f003 f9af 	bl	8004ab0 <HAL_I2C_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001758:	f000 fbf4 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2000016c 	.word	0x2000016c
 8001764:	40005400 	.word	0x40005400
 8001768:	00061a80 	.word	0x00061a80

0800176c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <HAL_I2C_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12b      	bne.n	80017e6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <HAL_I2C_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <HAL_I2C_MspInit+0x88>)
 8001798:	f043 0302 	orr.w	r3, r3, #2
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_I2C_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ae:	2312      	movs	r3, #18
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ba:	2304      	movs	r3, #4
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <HAL_I2C_MspInit+0x8c>)
 80017c6:	f002 ffbd 	bl	8004744 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_I2C_MspInit+0x88>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	4a08      	ldr	r2, [pc, #32]	; (80017f4 <HAL_I2C_MspInit+0x88>)
 80017d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d8:	6413      	str	r3, [r2, #64]	; 0x40
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_I2C_MspInit+0x88>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40005400 	.word	0x40005400
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020400 	.word	0x40020400

080017fc <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <bno055_assignI2C+0x1c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200001c0 	.word	0x200001c0

0800181c <bno055_delay>:

void bno055_delay(int time) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4618      	mov	r0, r3
 8001828:	f001 f872 	bl	8002910 <HAL_Delay>
#endif
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b088      	sub	sp, #32
 8001838:	af02      	add	r7, sp, #8
 800183a:	4603      	mov	r3, r0
 800183c:	460a      	mov	r2, r1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	4613      	mov	r3, r2
 8001842:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	733b      	strb	r3, [r7, #12]
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 800184c:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <bno055_writeData+0x184>)
 800184e:	6818      	ldr	r0, [r3, #0]
 8001850:	f107 020c 	add.w	r2, r7, #12
 8001854:	230a      	movs	r3, #10
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	2302      	movs	r3, #2
 800185a:	2150      	movs	r1, #80	; 0x50
 800185c:	f003 fa6c 	bl	8004d38 <HAL_I2C_Master_Transmit>
 8001860:	4603      	mov	r3, r0
 8001862:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80a0 	beq.w	80019ac <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 800186c:	7dfb      	ldrb	r3, [r7, #23]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d103      	bne.n	800187a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8001872:	4852      	ldr	r0, [pc, #328]	; (80019bc <bno055_writeData+0x188>)
 8001874:	f005 fef2 	bl	800765c <puts>
 8001878:	e012      	b.n	80018a0 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 800187a:	7dfb      	ldrb	r3, [r7, #23]
 800187c:	2b03      	cmp	r3, #3
 800187e:	d103      	bne.n	8001888 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8001880:	484f      	ldr	r0, [pc, #316]	; (80019c0 <bno055_writeData+0x18c>)
 8001882:	f005 feeb 	bl	800765c <puts>
 8001886:	e00b      	b.n	80018a0 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d103      	bne.n	8001896 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 800188e:	484d      	ldr	r0, [pc, #308]	; (80019c4 <bno055_writeData+0x190>)
 8001890:	f005 fee4 	bl	800765c <puts>
 8001894:	e004      	b.n	80018a0 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	4619      	mov	r1, r3
 800189a:	484b      	ldr	r0, [pc, #300]	; (80019c8 <bno055_writeData+0x194>)
 800189c:	f005 fe58 	bl	8007550 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 80018a0:	4b45      	ldr	r3, [pc, #276]	; (80019b8 <bno055_writeData+0x184>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 fd79 	bl	800539c <HAL_I2C_GetError>
 80018aa:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d07e      	beq.n	80019b0 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d103      	bne.n	80018c0 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 80018b8:	4844      	ldr	r0, [pc, #272]	; (80019cc <bno055_writeData+0x198>)
 80018ba:	f005 fecf 	bl	800765c <puts>
 80018be:	e021      	b.n	8001904 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d103      	bne.n	80018ce <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 80018c6:	4842      	ldr	r0, [pc, #264]	; (80019d0 <bno055_writeData+0x19c>)
 80018c8:	f005 fec8 	bl	800765c <puts>
 80018cc:	e01a      	b.n	8001904 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d103      	bne.n	80018dc <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 80018d4:	483f      	ldr	r0, [pc, #252]	; (80019d4 <bno055_writeData+0x1a0>)
 80018d6:	f005 fec1 	bl	800765c <puts>
 80018da:	e013      	b.n	8001904 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d103      	bne.n	80018ea <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 80018e2:	483d      	ldr	r0, [pc, #244]	; (80019d8 <bno055_writeData+0x1a4>)
 80018e4:	f005 feba 	bl	800765c <puts>
 80018e8:	e00c      	b.n	8001904 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2b10      	cmp	r3, #16
 80018ee:	d103      	bne.n	80018f8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 80018f0:	483a      	ldr	r0, [pc, #232]	; (80019dc <bno055_writeData+0x1a8>)
 80018f2:	f005 feb3 	bl	800765c <puts>
 80018f6:	e005      	b.n	8001904 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d102      	bne.n	8001904 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 80018fe:	4838      	ldr	r0, [pc, #224]	; (80019e0 <bno055_writeData+0x1ac>)
 8001900:	f005 feac 	bl	800765c <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <bno055_writeData+0x184>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 fd39 	bl	8005380 <HAL_I2C_GetState>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d103      	bne.n	8001920 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001918:	4832      	ldr	r0, [pc, #200]	; (80019e4 <bno055_writeData+0x1b0>)
 800191a:	f005 fe9f 	bl	800765c <puts>
 800191e:	e048      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2b20      	cmp	r3, #32
 8001924:	d103      	bne.n	800192e <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8001926:	482f      	ldr	r0, [pc, #188]	; (80019e4 <bno055_writeData+0x1b0>)
 8001928:	f005 fe98 	bl	800765c <puts>
 800192c:	e041      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b24      	cmp	r3, #36	; 0x24
 8001932:	d103      	bne.n	800193c <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8001934:	482c      	ldr	r0, [pc, #176]	; (80019e8 <bno055_writeData+0x1b4>)
 8001936:	f005 fe91 	bl	800765c <puts>
 800193a:	e03a      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2b21      	cmp	r3, #33	; 0x21
 8001940:	d103      	bne.n	800194a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001942:	482a      	ldr	r0, [pc, #168]	; (80019ec <bno055_writeData+0x1b8>)
 8001944:	f005 fe8a 	bl	800765c <puts>
 8001948:	e033      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	2b22      	cmp	r3, #34	; 0x22
 800194e:	d103      	bne.n	8001958 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001950:	4827      	ldr	r0, [pc, #156]	; (80019f0 <bno055_writeData+0x1bc>)
 8001952:	f005 fe83 	bl	800765c <puts>
 8001956:	e02c      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b28      	cmp	r3, #40	; 0x28
 800195c:	d103      	bne.n	8001966 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800195e:	4825      	ldr	r0, [pc, #148]	; (80019f4 <bno055_writeData+0x1c0>)
 8001960:	f005 fe7c 	bl	800765c <puts>
 8001964:	e025      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2b29      	cmp	r3, #41	; 0x29
 800196a:	d103      	bne.n	8001974 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 800196c:	4822      	ldr	r0, [pc, #136]	; (80019f8 <bno055_writeData+0x1c4>)
 800196e:	f005 fe75 	bl	800765c <puts>
 8001972:	e01e      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	2b2a      	cmp	r3, #42	; 0x2a
 8001978:	d103      	bne.n	8001982 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800197a:	4820      	ldr	r0, [pc, #128]	; (80019fc <bno055_writeData+0x1c8>)
 800197c:	f005 fe6e 	bl	800765c <puts>
 8001980:	e017      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001982:	7bfb      	ldrb	r3, [r7, #15]
 8001984:	2b60      	cmp	r3, #96	; 0x60
 8001986:	d103      	bne.n	8001990 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001988:	481d      	ldr	r0, [pc, #116]	; (8001a00 <bno055_writeData+0x1cc>)
 800198a:	f005 fe67 	bl	800765c <puts>
 800198e:	e010      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	2ba0      	cmp	r3, #160	; 0xa0
 8001994:	d103      	bne.n	800199e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001996:	481b      	ldr	r0, [pc, #108]	; (8001a04 <bno055_writeData+0x1d0>)
 8001998:	f005 fe60 	bl	800765c <puts>
 800199c:	e009      	b.n	80019b2 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2be0      	cmp	r3, #224	; 0xe0
 80019a2:	d106      	bne.n	80019b2 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 80019a4:	4818      	ldr	r0, [pc, #96]	; (8001a08 <bno055_writeData+0x1d4>)
 80019a6:	f005 fe59 	bl	800765c <puts>
 80019aa:	e002      	b.n	80019b2 <bno055_writeData+0x17e>
    return;
 80019ac:	bf00      	nop
 80019ae:	e000      	b.n	80019b2 <bno055_writeData+0x17e>
    return;
 80019b0:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200001c0 	.word	0x200001c0
 80019bc:	08008aa4 	.word	0x08008aa4
 80019c0:	08008ac8 	.word	0x08008ac8
 80019c4:	08008af0 	.word	0x08008af0
 80019c8:	08008b14 	.word	0x08008b14
 80019cc:	08008b2c 	.word	0x08008b2c
 80019d0:	08008b40 	.word	0x08008b40
 80019d4:	08008b54 	.word	0x08008b54
 80019d8:	08008b68 	.word	0x08008b68
 80019dc:	08008b7c 	.word	0x08008b7c
 80019e0:	08008b90 	.word	0x08008b90
 80019e4:	08008ba8 	.word	0x08008ba8
 80019e8:	08008bc0 	.word	0x08008bc0
 80019ec:	08008bd4 	.word	0x08008bd4
 80019f0:	08008bec 	.word	0x08008bec
 80019f4:	08008c04 	.word	0x08008c04
 80019f8:	08008c1c 	.word	0x08008c1c
 80019fc:	08008c3c 	.word	0x08008c3c
 8001a00:	08008c5c 	.word	0x08008c5c
 8001a04:	08008c74 	.word	0x08008c74
 8001a08:	08008c8c 	.word	0x08008c8c

08001a0c <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	4603      	mov	r3, r0
 8001a14:	6039      	str	r1, [r7, #0]
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <bno055_readData+0x40>)
 8001a1e:	6818      	ldr	r0, [r3, #0]
 8001a20:	1dfa      	adds	r2, r7, #7
 8001a22:	2364      	movs	r3, #100	; 0x64
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	2301      	movs	r3, #1
 8001a28:	2150      	movs	r1, #80	; 0x50
 8001a2a:	f003 f985 	bl	8004d38 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <bno055_readData+0x40>)
 8001a30:	6818      	ldr	r0, [r3, #0]
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2264      	movs	r2, #100	; 0x64
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	2150      	movs	r1, #80	; 0x50
 8001a3e:	f003 fa79 	bl	8004f34 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200001c0 	.word	0x200001c0

08001a50 <map>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8001a50:	b480      	push	{r7}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a5a:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a5e:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a62:	edc7 1a02 	vstr	s3, [r7, #8]
 8001a66:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8001a6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a72:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a76:	edd7 6a01 	vldr	s13, [r7, #4]
 8001a7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a7e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a82:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a86:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a96:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa2:	371c      	adds	r7, #28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr

08001aac <HAL_CAN_RxFifo0MsgPendingCallback>:
	enc->counter = enc->new_counter;
	enc->counter_status = (count_change >=0);
	enc->speed = (float)count_change*1000.0f/(CPR_X * sampling_time);
	enc->rdps = (float)count_change*2*PI*1000.0f/(CPR_X * sampling_time);
}
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001ab6:	4a0d      	ldr	r2, [pc, #52]	; (8001aec <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001ab8:	2100      	movs	r1, #0
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f001 fe59 	bl	8003772 <HAL_CAN_GetRxMessage>
	cntt++;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001aca:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0) {
 8001acc:	e002      	b.n	8001ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		cntt = 0;
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
	while (cntt - 100 > 0) {
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d8f8      	bhi.n	8001ace <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
	}

}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000230 	.word	0x20000230
 8001aec:	200001c4 	.word	0x200001c4
 8001af0:	20000244 	.word	0x20000244

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af8:	f000 fe98 	bl	800282c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afc:	f000 f85e 	bl	8001bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b00:	f7ff fd66 	bl	80015d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b04:	f7ff fd44 	bl	8001590 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b08:	f7ff f9da 	bl	8000ec0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001b0c:	f7ff fc9e 	bl	800144c <MX_CAN1_Init>
  MX_I2C1_Init();
 8001b10:	f7ff fdfe 	bl	8001710 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001b14:	f000 fbdc 	bl	80022d0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b18:	f000 fc2e 	bl	8002378 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001b1c:	f000 fc7a 	bl	8002414 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001b20:	f000 fccc 	bl	80024bc <MX_TIM5_Init>
  MX_TIM1_Init();
 8001b24:	f000 fb44 	bl	80021b0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //*** CAN CONFIGURE ***//
	HAL_CAN_Start(&hcan1);
 8001b28:	481b      	ldr	r0, [pc, #108]	; (8001b98 <main+0xa4>)
 8001b2a:	f001 fd03 	bl	8003534 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4819      	ldr	r0, [pc, #100]	; (8001b98 <main+0xa4>)
 8001b32:	f001 ff30 	bl	8003996 <HAL_CAN_ActivateNotification>
	TxHeader.DLC = 8; // data length
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <main+0xa8>)
 8001b38:	2208      	movs	r2, #8
 8001b3a:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <main+0xa8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001b42:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <main+0xa8>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x407; //Id 0x7FF
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <main+0xa8>)
 8001b4a:	f240 4207 	movw	r2, #1031	; 0x407
 8001b4e:	601a      	str	r2, [r3, #0]

	// TIMER Internal clock
	HAL_TIM_Base_Start_IT(&htim3);
 8001b50:	4813      	ldr	r0, [pc, #76]	; (8001ba0 <main+0xac>)
 8001b52:	f004 fbf1 	bl	8006338 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8001b56:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <main+0xb0>)
 8001b58:	f004 fbee 	bl	8006338 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	4812      	ldr	r0, [pc, #72]	; (8001ba8 <main+0xb4>)
 8001b60:	f004 fcaa 	bl	80064b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b64:	2104      	movs	r1, #4
 8001b66:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <main+0xb4>)
 8001b68:	f004 fca6 	bl	80064b8 <HAL_TIM_PWM_Start>

	// IMU
	bno055_assignI2C(&hi2c1);
 8001b6c:	480f      	ldr	r0, [pc, #60]	; (8001bac <main+0xb8>)
 8001b6e:	f7ff fe45 	bl	80017fc <bno055_assignI2C>
	bno055_setup();
 8001b72:	f7ff fabb 	bl	80010ec <bno055_setup>
	bno055_setOperationModeNDOF();
 8001b76:	f7ff faa6 	bl	80010c6 <bno055_setOperationModeNDOF>
//		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, 0);
//		  HAL_Delay(1000);
//		  state = 5;
//	  }
//	  if(state>)
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, state);
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <main+0xbc>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b84:	480b      	ldr	r0, [pc, #44]	; (8001bb4 <main+0xc0>)
 8001b86:	f002 ff79 	bl	8004a7c <HAL_GPIO_WritePin>
	  HAL_Delay(air1);
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <main+0xc4>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 febe 	bl	8002910 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, state);
 8001b94:	e7f1      	b.n	8001b7a <main+0x86>
 8001b96:	bf00      	nop
 8001b98:	20000144 	.word	0x20000144
 8001b9c:	200001e0 	.word	0x200001e0
 8001ba0:	2000030c 	.word	0x2000030c
 8001ba4:	2000039c 	.word	0x2000039c
 8001ba8:	2000027c 	.word	0x2000027c
 8001bac:	2000016c 	.word	0x2000016c
 8001bb0:	2000026c 	.word	0x2000026c
 8001bb4:	40020000 	.word	0x40020000
 8001bb8:	2000026e 	.word	0x2000026e

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b094      	sub	sp, #80	; 0x50
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 0320 	add.w	r3, r7, #32
 8001bc6:	2230      	movs	r2, #48	; 0x30
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f005 fcb8 	bl	8007540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	f107 030c 	add.w	r3, r7, #12
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <SystemClock_Config+0xcc>)
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <SystemClock_Config+0xcc>)
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf0:	4b25      	ldr	r3, [pc, #148]	; (8001c88 <SystemClock_Config+0xcc>)
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a21      	ldr	r2, [pc, #132]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0a:	6013      	str	r3, [r2, #0]
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <SystemClock_Config+0xd0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c20:	2310      	movs	r3, #16
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c24:	2302      	movs	r3, #2
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c30:	23a8      	movs	r3, #168	; 0xa8
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c38:	2304      	movs	r3, #4
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3c:	f107 0320 	add.w	r3, r7, #32
 8001c40:	4618      	mov	r0, r3
 8001c42:	f003 fee5 	bl	8005a10 <HAL_RCC_OscConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c4c:	f000 f97a 	bl	8001f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c50:	230f      	movs	r3, #15
 8001c52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c54:	2302      	movs	r3, #2
 8001c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2105      	movs	r1, #5
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 f946 	bl	8005f00 <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c7a:	f000 f963 	bl	8001f44 <Error_Handler>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3750      	adds	r7, #80	; 0x50
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40007000 	.word	0x40007000

08001c90 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c90:	b5b0      	push	{r4, r5, r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a92      	ldr	r2, [pc, #584]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	f040 80d1 	bne.w	8001e46 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		{
//			read_encoder(&encoderX, &htim2, CPR_X);
//			read_encoder(&encoderY, &htim4, CPR_Y);
//			W1 = (double) encoderX.rdps * r;
//			W2 = (double) encoderY.rdps * r;
		if (motor_air > 10){
 8001ca4:	4b91      	ldr	r3, [pc, #580]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	dd0c      	ble.n	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x42>
					TIM1->CCR1 = motor_air;
 8001cb8:	4b8c      	ldr	r3, [pc, #560]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cc4:	ee17 2a90 	vmov	r2, s15
 8001cc8:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 0;
 8001cca:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	639a      	str	r2, [r3, #56]	; 0x38
 8001cd0:	e01e      	b.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x80>
				}
				else if  (motor_air < -10)
 8001cd2:	4b86      	ldr	r3, [pc, #536]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cd4:	edd3 7a00 	vldr	s15, [r3]
 8001cd8:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce4:	d50e      	bpl.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x74>
				{
					TIM1->CCR1 = 0;
 8001ce6:	4b82      	ldr	r3, [pc, #520]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = -1*motor_air;
 8001cec:	4b7f      	ldr	r3, [pc, #508]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	eef1 7a67 	vneg.f32	s15, s15
 8001cf6:	4b7e      	ldr	r3, [pc, #504]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cfc:	ee17 2a90 	vmov	r2, s15
 8001d00:	639a      	str	r2, [r3, #56]	; 0x38
 8001d02:	e005      	b.n	8001d10 <HAL_TIM_PeriodElapsedCallback+0x80>
				}
				else {
					TIM1->CCR1 = 0;
 8001d04:	4b7a      	ldr	r3, [pc, #488]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
					TIM1->CCR2 = 0;
 8001d0a:	4b79      	ldr	r3, [pc, #484]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	639a      	str	r2, [r3, #56]	; 0x38
				}
			Q = bno055_getVectorQuaternion();
 8001d10:	f7ff fb58 	bl	80013c4 <bno055_getVectorQuaternion>
 8001d14:	eeb0 4a40 	vmov.f32	s8, s0
 8001d18:	eef0 4a60 	vmov.f32	s9, s1
 8001d1c:	eeb0 5a41 	vmov.f32	s10, s2
 8001d20:	eef0 5a61 	vmov.f32	s11, s3
 8001d24:	eeb0 6a42 	vmov.f32	s12, s4
 8001d28:	eef0 6a62 	vmov.f32	s13, s5
 8001d2c:	eeb0 7a43 	vmov.f32	s14, s6
 8001d30:	eef0 7a63 	vmov.f32	s15, s7
 8001d34:	4b6f      	ldr	r3, [pc, #444]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d36:	ed83 4b00 	vstr	d4, [r3]
 8001d3a:	ed83 5b02 	vstr	d5, [r3, #8]
 8001d3e:	ed83 6b04 	vstr	d6, [r3, #16]
 8001d42:	ed83 7b06 	vstr	d7, [r3, #24]
			// yaw (z-axis rotation)
			siny_cosp = 2 * (Q.w * Q.z + Q.x * Q.y);
 8001d46:	4b6b      	ldr	r3, [pc, #428]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d4c:	4b69      	ldr	r3, [pc, #420]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d4e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001d52:	f7fe fc49 	bl	80005e8 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4614      	mov	r4, r2
 8001d5c:	461d      	mov	r5, r3
 8001d5e:	4b65      	ldr	r3, [pc, #404]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d60:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d64:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d66:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d6a:	f7fe fc3d 	bl	80005e8 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe fa81 	bl	800027c <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	f7fe fa79 	bl	800027c <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	495a      	ldr	r1, [pc, #360]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001d90:	e9c1 2300 	strd	r2, r3, [r1]
			cosy_cosp = 1 - 2 * (Q.y * Q.y + Q.z * Q.z);
 8001d94:	4b57      	ldr	r3, [pc, #348]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d96:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d9a:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001d9c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001da0:	f7fe fc22 	bl	80005e8 <__aeabi_dmul>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	4614      	mov	r4, r2
 8001daa:	461d      	mov	r5, r3
 8001dac:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001dae:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001db2:	4b50      	ldr	r3, [pc, #320]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001db4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001db8:	f7fe fc16 	bl	80005e8 <__aeabi_dmul>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	f7fe fa5a 	bl	800027c <__adddf3>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	f7fe fa52 	bl	800027c <__adddf3>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	f04f 0000 	mov.w	r0, #0
 8001de0:	4946      	ldr	r1, [pc, #280]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001de2:	f7fe fa49 	bl	8000278 <__aeabi_dsub>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4945      	ldr	r1, [pc, #276]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001dec:	e9c1 2300 	strd	r2, r3, [r1]
			Angle.Yaw = atan2(siny_cosp, cosy_cosp);
 8001df0:	4b41      	ldr	r3, [pc, #260]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001df2:	ed93 7b00 	vldr	d7, [r3]
 8001df6:	4b42      	ldr	r3, [pc, #264]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001df8:	ed93 6b00 	vldr	d6, [r3]
 8001dfc:	eeb0 1a46 	vmov.f32	s2, s12
 8001e00:	eef0 1a66 	vmov.f32	s3, s13
 8001e04:	eeb0 0a47 	vmov.f32	s0, s14
 8001e08:	eef0 0a67 	vmov.f32	s1, s15
 8001e0c:	f006 fba4 	bl	8008558 <atan2>
 8001e10:	eeb0 7a40 	vmov.f32	s14, s0
 8001e14:	eef0 7a60 	vmov.f32	s15, s1
 8001e18:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001e1a:	ed83 7b04 	vstr	d7, [r3, #16]
			theta = Angle.Yaw;
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001e20:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001e24:	4610      	mov	r0, r2
 8001e26:	4619      	mov	r1, r3
 8001e28:	f7fe fe78 	bl	8000b1c <__aeabi_d2f>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a36      	ldr	r2, [pc, #216]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e30:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_DMA(&hadc1, &AD_RES, 2);
 8001e32:	2202      	movs	r2, #2
 8001e34:	4935      	ldr	r1, [pc, #212]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e36:	4836      	ldr	r0, [pc, #216]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001e38:	f000 fdd2 	bl	80029e0 <HAL_ADC_Start_DMA>
//			LaserX = ((AD_RES[1] *0.01416) + 0.1963)/10; //aready
//			LaserY = ((AD_RES[0] *0.01289) + 0.3364)/10;
			j++;
 8001e3c:	4b35      	ldr	r3, [pc, #212]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	3301      	adds	r3, #1
 8001e42:	4a34      	ldr	r2, [pc, #208]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001e44:	6013      	str	r3, [r2, #0]
		}
	if (htim->Instance == TIM3)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a33      	ldr	r2, [pc, #204]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d146      	bne.n	8001ede <HAL_TIM_PeriodElapsedCallback+0x24e>
	{
		imu = map(theta, -3.14159, 3.14159, 0, 65535);
 8001e50:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e52:	edd3 7a00 	vldr	s15, [r3]
 8001e56:	ed9f 2a31 	vldr	s4, [pc, #196]	; 8001f1c <HAL_TIM_PeriodElapsedCallback+0x28c>
 8001e5a:	eddf 1a31 	vldr	s3, [pc, #196]	; 8001f20 <HAL_TIM_PeriodElapsedCallback+0x290>
 8001e5e:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8001f24 <HAL_TIM_PeriodElapsedCallback+0x294>
 8001e62:	eddf 0a31 	vldr	s1, [pc, #196]	; 8001f28 <HAL_TIM_PeriodElapsedCallback+0x298>
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f7ff fdf1 	bl	8001a50 <map>
 8001e6e:	eef0 7a40 	vmov.f32	s15, s0
 8001e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e76:	ee17 3a90 	vmov	r3, s15
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e7e:	801a      	strh	r2, [r3, #0]
		TxData[0] = ((AD_RES[1] & 0xFF00) >> 8);
 8001e80:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e82:	885b      	ldrh	r3, [r3, #2]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e8c:	701a      	strb	r2, [r3, #0]
		TxData[1] = (AD_RES[1] & 0x00FF);
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e90:	885b      	ldrh	r3, [r3, #2]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e96:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((AD_RES[2] & 0xFF00) >> 8);
 8001e98:	4b1c      	ldr	r3, [pc, #112]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001e9a:	889b      	ldrh	r3, [r3, #4]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ea4:	709a      	strb	r2, [r3, #2]
		TxData[3] = (AD_RES[2] & 0x00FF);
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001ea8:	889b      	ldrh	r3, [r3, #4]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001eae:	70da      	strb	r2, [r3, #3]
		TxData[4] = ((imu & 0xFF00) >> 8);
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ebc:	711a      	strb	r2, [r3, #4]
		TxData[5] = (imu & 0x00FF);
 8001ebe:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ec6:	715a      	strb	r2, [r3, #5]


		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001eca:	4a19      	ldr	r2, [pc, #100]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ecc:	491a      	ldr	r1, [pc, #104]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ece:	481b      	ldr	r0, [pc, #108]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ed0:	f001 fb74 	bl	80035bc <HAL_CAN_AddTxMessage>
		c++;
 8001ed4:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	4a19      	ldr	r2, [pc, #100]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001edc:	6013      	str	r3, [r2, #0]
	}
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	20000268 	.word	0x20000268
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	20000210 	.word	0x20000210
 8001ef8:	20000258 	.word	0x20000258
 8001efc:	3ff00000 	.word	0x3ff00000
 8001f00:	20000260 	.word	0x20000260
 8001f04:	200001f8 	.word	0x200001f8
 8001f08:	20000250 	.word	0x20000250
 8001f0c:	20000248 	.word	0x20000248
 8001f10:	2000009c 	.word	0x2000009c
 8001f14:	20000274 	.word	0x20000274
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	477fff00 	.word	0x477fff00
 8001f20:	00000000 	.word	0x00000000
 8001f24:	40490fd0 	.word	0x40490fd0
 8001f28:	c0490fd0 	.word	0xc0490fd0
 8001f2c:	2000024c 	.word	0x2000024c
 8001f30:	20000238 	.word	0x20000238
 8001f34:	20000240 	.word	0x20000240
 8001f38:	200001e0 	.word	0x200001e0
 8001f3c:	20000144 	.word	0x20000144
 8001f40:	20000270 	.word	0x20000270

08001f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f48:	b672      	cpsid	i
}
 8001f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <Error_Handler+0x8>
	...

08001f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6453      	str	r3, [r2, #68]	; 0x44
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <HAL_MspInit+0x4c>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	370c      	adds	r7, #12
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	40023800 	.word	0x40023800

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <NMI_Handler+0x4>

08001fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <HardFault_Handler+0x4>

08001fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <MemManage_Handler+0x4>

08001fb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb6:	e7fe      	b.n	8001fb6 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	e7fe      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fec:	f000 fc70 	bl	80028d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <CAN1_RX0_IRQHandler+0x10>)
 8001ffa:	f001 fcf2 	bl	80039e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000144 	.word	0x20000144

08002008 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <TIM3_IRQHandler+0x10>)
 800200e:	f004 fbc1 	bl	8006794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000030c 	.word	0x2000030c

0800201c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <TIM5_IRQHandler+0x10>)
 8002022:	f004 fbb7 	bl	8006794 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000039c 	.word	0x2000039c

08002030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <DMA2_Stream0_IRQHandler+0x10>)
 8002036:	f002 f91b 	bl	8004270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200000e4 	.word	0x200000e4

08002044 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e00a      	b.n	800206c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002056:	f3af 8000 	nop.w
 800205a:	4601      	mov	r1, r0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbf0      	blt.n	8002056 <_read+0x12>
  }

  return len;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e009      	b.n	80020a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	60ba      	str	r2, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbf1      	blt.n	8002090 <_write+0x12>
  }
  return len;
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_close>:

int _close(int file)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020de:	605a      	str	r2, [r3, #4]
  return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_isatty>:

int _isatty(int file)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f005 f9cc 	bl	80074ec <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20020000 	.word	0x20020000
 8002180:	00000400 	.word	0x00000400
 8002184:	20000278 	.word	0x20000278
 8002188:	200003f8 	.word	0x200003f8

0800218c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b092      	sub	sp, #72	; 0x48
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021d4:	1d3b      	adds	r3, r7, #4
 80021d6:	2220      	movs	r2, #32
 80021d8:	2100      	movs	r1, #0
 80021da:	4618      	mov	r0, r3
 80021dc:	f005 f9b0 	bl	8007540 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021e0:	4b39      	ldr	r3, [pc, #228]	; (80022c8 <MX_TIM1_Init+0x118>)
 80021e2:	4a3a      	ldr	r2, [pc, #232]	; (80022cc <MX_TIM1_Init+0x11c>)
 80021e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 80021e6:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <MX_TIM1_Init+0x118>)
 80021e8:	2205      	movs	r2, #5
 80021ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <MX_TIM1_Init+0x118>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <MX_TIM1_Init+0x118>)
 80021f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <MX_TIM1_Init+0x118>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <MX_TIM1_Init+0x118>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <MX_TIM1_Init+0x118>)
 8002208:	2280      	movs	r2, #128	; 0x80
 800220a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800220c:	482e      	ldr	r0, [pc, #184]	; (80022c8 <MX_TIM1_Init+0x118>)
 800220e:	f004 f903 	bl	8006418 <HAL_TIM_PWM_Init>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002218:	f7ff fe94 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002224:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002228:	4619      	mov	r1, r3
 800222a:	4827      	ldr	r0, [pc, #156]	; (80022c8 <MX_TIM1_Init+0x118>)
 800222c:	f005 f87c 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002236:	f7ff fe85 	bl	8001f44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800223a:	2360      	movs	r3, #96	; 0x60
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002242:	2300      	movs	r3, #0
 8002244:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002246:	2300      	movs	r3, #0
 8002248:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800225a:	2200      	movs	r2, #0
 800225c:	4619      	mov	r1, r3
 800225e:	481a      	ldr	r0, [pc, #104]	; (80022c8 <MX_TIM1_Init+0x118>)
 8002260:	f004 fba0 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800226a:	f7ff fe6b 	bl	8001f44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002272:	2204      	movs	r2, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4814      	ldr	r0, [pc, #80]	; (80022c8 <MX_TIM1_Init+0x118>)
 8002278:	f004 fb94 	bl	80069a4 <HAL_TIM_PWM_ConfigChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002282:	f7ff fe5f 	bl	8001f44 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800229a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800229e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4807      	ldr	r0, [pc, #28]	; (80022c8 <MX_TIM1_Init+0x118>)
 80022aa:	f005 f8b9 	bl	8007420 <HAL_TIMEx_ConfigBreakDeadTime>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80022b4:	f7ff fe46 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80022b8:	4803      	ldr	r0, [pc, #12]	; (80022c8 <MX_TIM1_Init+0x118>)
 80022ba:	f000 fa53 	bl	8002764 <HAL_TIM_MspPostInit>

}
 80022be:	bf00      	nop
 80022c0:	3748      	adds	r7, #72	; 0x48
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000027c 	.word	0x2000027c
 80022cc:	40010000 	.word	0x40010000

080022d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	2224      	movs	r2, #36	; 0x24
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f005 f92e 	bl	8007540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e4:	1d3b      	adds	r3, r7, #4
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_TIM2_Init+0xa4>)
 80022ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <MX_TIM2_Init+0xa4>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <MX_TIM2_Init+0xa4>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <MX_TIM2_Init+0xa4>)
 8002302:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002306:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <MX_TIM2_Init+0xa4>)
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800230e:	4b19      	ldr	r3, [pc, #100]	; (8002374 <MX_TIM2_Init+0xa4>)
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002314:	2303      	movs	r3, #3
 8002316:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002318:	2300      	movs	r3, #0
 800231a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800231c:	2301      	movs	r3, #1
 800231e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002328:	2300      	movs	r3, #0
 800232a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800232c:	2301      	movs	r3, #1
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002330:	2300      	movs	r3, #0
 8002332:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002334:	2300      	movs	r3, #0
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002338:	f107 030c 	add.w	r3, r7, #12
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	; (8002374 <MX_TIM2_Init+0xa4>)
 8002340:	f004 f982 	bl	8006648 <HAL_TIM_Encoder_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800234a:	f7ff fdfb 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <MX_TIM2_Init+0xa4>)
 800235c:	f004 ffe4 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002366:	f7ff fded 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	3730      	adds	r7, #48	; 0x30
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200002c4 	.word	0x200002c4

08002378 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237e:	f107 0308 	add.w	r3, r7, #8
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800238c:	463b      	mov	r3, r7
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002394:	4b1d      	ldr	r3, [pc, #116]	; (800240c <MX_TIM3_Init+0x94>)
 8002396:	4a1e      	ldr	r2, [pc, #120]	; (8002410 <MX_TIM3_Init+0x98>)
 8002398:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800239a:	4b1c      	ldr	r3, [pc, #112]	; (800240c <MX_TIM3_Init+0x94>)
 800239c:	2253      	movs	r2, #83	; 0x53
 800239e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	; (800240c <MX_TIM3_Init+0x94>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80023a6:	4b19      	ldr	r3, [pc, #100]	; (800240c <MX_TIM3_Init+0x94>)
 80023a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80023ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ae:	4b17      	ldr	r3, [pc, #92]	; (800240c <MX_TIM3_Init+0x94>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023b4:	4b15      	ldr	r3, [pc, #84]	; (800240c <MX_TIM3_Init+0x94>)
 80023b6:	2280      	movs	r2, #128	; 0x80
 80023b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023ba:	4814      	ldr	r0, [pc, #80]	; (800240c <MX_TIM3_Init+0x94>)
 80023bc:	f003 ff6c 	bl	8006298 <HAL_TIM_Base_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80023c6:	f7ff fdbd 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4619      	mov	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	; (800240c <MX_TIM3_Init+0x94>)
 80023d8:	f004 fba6 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80023e2:	f7ff fdaf 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023ee:	463b      	mov	r3, r7
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <MX_TIM3_Init+0x94>)
 80023f4:	f004 ff98 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80023fe:	f7ff fda1 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000030c 	.word	0x2000030c
 8002410:	40000400 	.word	0x40000400

08002414 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	; 0x30
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	2224      	movs	r2, #36	; 0x24
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f005 f88c 	bl	8007540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002430:	4b20      	ldr	r3, [pc, #128]	; (80024b4 <MX_TIM4_Init+0xa0>)
 8002432:	4a21      	ldr	r2, [pc, #132]	; (80024b8 <MX_TIM4_Init+0xa4>)
 8002434:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <MX_TIM4_Init+0xa0>)
 8002438:	2200      	movs	r2, #0
 800243a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <MX_TIM4_Init+0xa0>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <MX_TIM4_Init+0xa0>)
 8002444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002448:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244a:	4b1a      	ldr	r3, [pc, #104]	; (80024b4 <MX_TIM4_Init+0xa0>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002450:	4b18      	ldr	r3, [pc, #96]	; (80024b4 <MX_TIM4_Init+0xa0>)
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002456:	2303      	movs	r3, #3
 8002458:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800245e:	2301      	movs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002462:	2300      	movs	r3, #0
 8002464:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800246e:	2301      	movs	r3, #1
 8002470:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002472:	2300      	movs	r3, #0
 8002474:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4619      	mov	r1, r3
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <MX_TIM4_Init+0xa0>)
 8002482:	f004 f8e1 	bl	8006648 <HAL_TIM_Encoder_Init>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800248c:	f7ff fd5a 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	4619      	mov	r1, r3
 800249c:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_TIM4_Init+0xa0>)
 800249e:	f004 ff43 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80024a8:	f7ff fd4c 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	3730      	adds	r7, #48	; 0x30
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000354 	.word	0x20000354
 80024b8:	40000800 	.word	0x40000800

080024bc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024c2:	f107 0308 	add.w	r3, r7, #8
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
 80024ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d0:	463b      	mov	r3, r7
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <MX_TIM5_Init+0x94>)
 80024da:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <MX_TIM5_Init+0x98>)
 80024dc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80024de:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <MX_TIM5_Init+0x94>)
 80024e0:	2253      	movs	r2, #83	; 0x53
 80024e2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e4:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <MX_TIM5_Init+0x94>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 80024ea:	4b19      	ldr	r3, [pc, #100]	; (8002550 <MX_TIM5_Init+0x94>)
 80024ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80024f0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f2:	4b17      	ldr	r3, [pc, #92]	; (8002550 <MX_TIM5_Init+0x94>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <MX_TIM5_Init+0x94>)
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024fe:	4814      	ldr	r0, [pc, #80]	; (8002550 <MX_TIM5_Init+0x94>)
 8002500:	f003 feca 	bl	8006298 <HAL_TIM_Base_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800250a:	f7ff fd1b 	bl	8001f44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800250e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002512:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002514:	f107 0308 	add.w	r3, r7, #8
 8002518:	4619      	mov	r1, r3
 800251a:	480d      	ldr	r0, [pc, #52]	; (8002550 <MX_TIM5_Init+0x94>)
 800251c:	f004 fb04 	bl	8006b28 <HAL_TIM_ConfigClockSource>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002526:	f7ff fd0d 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002532:	463b      	mov	r3, r7
 8002534:	4619      	mov	r1, r3
 8002536:	4806      	ldr	r0, [pc, #24]	; (8002550 <MX_TIM5_Init+0x94>)
 8002538:	f004 fef6 	bl	8007328 <HAL_TIMEx_MasterConfigSynchronization>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002542:	f7ff fcff 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	2000039c 	.word	0x2000039c
 8002554:	40000c00 	.word	0x40000c00

08002558 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <HAL_TIM_PWM_MspInit+0x3c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10d      	bne.n	8002586 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_TIM_PWM_MspInit+0x40>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_TIM_PWM_MspInit+0x40>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_TIM_PWM_MspInit+0x40>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002586:	bf00      	nop
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40010000 	.word	0x40010000
 8002598:	40023800 	.word	0x40023800

0800259c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	; 0x30
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d14b      	bne.n	8002656 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
 80025c2:	4b40      	ldr	r3, [pc, #256]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	4a3f      	ldr	r2, [pc, #252]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6413      	str	r3, [r2, #64]	; 0x40
 80025ce:	4b3d      	ldr	r3, [pc, #244]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	61bb      	str	r3, [r7, #24]
 80025d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	4b39      	ldr	r3, [pc, #228]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a38      	ldr	r2, [pc, #224]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a31      	ldr	r2, [pc, #196]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002600:	f043 0302 	orr.w	r3, r3, #2
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002624:	2301      	movs	r3, #1
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	4619      	mov	r1, r3
 800262e:	4826      	ldr	r0, [pc, #152]	; (80026c8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002630:	f002 f888 	bl	8004744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002634:	2308      	movs	r3, #8
 8002636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002638:	2302      	movs	r3, #2
 800263a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263c:	2300      	movs	r3, #0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002640:	2300      	movs	r3, #0
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002644:	2301      	movs	r3, #1
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	4619      	mov	r1, r3
 800264e:	481f      	ldr	r0, [pc, #124]	; (80026cc <HAL_TIM_Encoder_MspInit+0x130>)
 8002650:	f002 f878 	bl	8004744 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002654:	e031      	b.n	80026ba <HAL_TIM_Encoder_MspInit+0x11e>
  else if(tim_encoderHandle->Instance==TIM4)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <HAL_TIM_Encoder_MspInit+0x134>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d12c      	bne.n	80026ba <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	4a16      	ldr	r2, [pc, #88]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6413      	str	r3, [r2, #64]	; 0x40
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 8002686:	f043 0308 	orr.w	r3, r3, #8
 800268a:	6313      	str	r3, [r2, #48]	; 0x30
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_TIM_Encoder_MspInit+0x128>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002698:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800269c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a6:	2300      	movs	r3, #0
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026aa:	2302      	movs	r3, #2
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	4619      	mov	r1, r3
 80026b4:	4807      	ldr	r0, [pc, #28]	; (80026d4 <HAL_TIM_Encoder_MspInit+0x138>)
 80026b6:	f002 f845 	bl	8004744 <HAL_GPIO_Init>
}
 80026ba:	bf00      	nop
 80026bc:	3730      	adds	r7, #48	; 0x30
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40020c00 	.word	0x40020c00

080026d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <HAL_TIM_Base_MspInit+0x80>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d116      	bne.n	8002718 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_TIM_Base_MspInit+0x84>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_TIM_Base_MspInit+0x84>)
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_TIM_Base_MspInit+0x84>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002706:	2200      	movs	r2, #0
 8002708:	2100      	movs	r1, #0
 800270a:	201d      	movs	r0, #29
 800270c:	f001 fc73 	bl	8003ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002710:	201d      	movs	r0, #29
 8002712:	f001 fc8c 	bl	800402e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002716:	e01a      	b.n	800274e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM5)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a10      	ldr	r2, [pc, #64]	; (8002760 <HAL_TIM_Base_MspInit+0x88>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d115      	bne.n	800274e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	4b0d      	ldr	r3, [pc, #52]	; (800275c <HAL_TIM_Base_MspInit+0x84>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a0c      	ldr	r2, [pc, #48]	; (800275c <HAL_TIM_Base_MspInit+0x84>)
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_TIM_Base_MspInit+0x84>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	60bb      	str	r3, [r7, #8]
 800273c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2032      	movs	r0, #50	; 0x32
 8002744:	f001 fc57 	bl	8003ff6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002748:	2032      	movs	r0, #50	; 0x32
 800274a:	f001 fc70 	bl	800402e <HAL_NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40000400 	.word	0x40000400
 800275c:	40023800 	.word	0x40023800
 8002760:	40000c00 	.word	0x40000c00

08002764 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a12      	ldr	r2, [pc, #72]	; (80027cc <HAL_TIM_MspPostInit+0x68>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d11e      	bne.n	80027c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <HAL_TIM_MspPostInit+0x6c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_TIM_MspPostInit+0x6c>)
 8002790:	f043 0310 	orr.w	r3, r3, #16
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <HAL_TIM_MspPostInit+0x6c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	60bb      	str	r3, [r7, #8]
 80027a0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80027a2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80027a6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80027b4:	2301      	movs	r3, #1
 80027b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	4619      	mov	r1, r3
 80027be:	4805      	ldr	r0, [pc, #20]	; (80027d4 <HAL_TIM_MspPostInit+0x70>)
 80027c0:	f001 ffc0 	bl	8004744 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027c4:	bf00      	nop
 80027c6:	3720      	adds	r7, #32
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40010000 	.word	0x40010000
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40021000 	.word	0x40021000

080027d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002810 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027dc:	480d      	ldr	r0, [pc, #52]	; (8002814 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027de:	490e      	ldr	r1, [pc, #56]	; (8002818 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027e0:	4a0e      	ldr	r2, [pc, #56]	; (800281c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027e4:	e002      	b.n	80027ec <LoopCopyDataInit>

080027e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ea:	3304      	adds	r3, #4

080027ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f0:	d3f9      	bcc.n	80027e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027f2:	4a0b      	ldr	r2, [pc, #44]	; (8002820 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027f4:	4c0b      	ldr	r4, [pc, #44]	; (8002824 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f8:	e001      	b.n	80027fe <LoopFillZerobss>

080027fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027fc:	3204      	adds	r2, #4

080027fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002800:	d3fb      	bcc.n	80027fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002802:	f7ff fcc3 	bl	800218c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002806:	f004 fe77 	bl	80074f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800280a:	f7ff f973 	bl	8001af4 <main>
  bx  lr    
 800280e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002810:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002818:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800281c:	08008de0 	.word	0x08008de0
  ldr r2, =_sbss
 8002820:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002824:	200003f8 	.word	0x200003f8

08002828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002828:	e7fe      	b.n	8002828 <ADC_IRQHandler>
	...

0800282c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002830:	4b0e      	ldr	r3, [pc, #56]	; (800286c <HAL_Init+0x40>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <HAL_Init+0x40>)
 8002836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800283a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_Init+0x40>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a0a      	ldr	r2, [pc, #40]	; (800286c <HAL_Init+0x40>)
 8002842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002848:	4b08      	ldr	r3, [pc, #32]	; (800286c <HAL_Init+0x40>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a07      	ldr	r2, [pc, #28]	; (800286c <HAL_Init+0x40>)
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002854:	2003      	movs	r0, #3
 8002856:	f001 fbc3 	bl	8003fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285a:	200f      	movs	r0, #15
 800285c:	f000 f808 	bl	8002870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002860:	f7ff fb76 	bl	8001f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40023c00 	.word	0x40023c00

08002870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_InitTick+0x54>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_InitTick+0x58>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	4619      	mov	r1, r3
 8002882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002886:	fbb3 f3f1 	udiv	r3, r3, r1
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	4618      	mov	r0, r3
 8002890:	f001 fbdb 	bl	800404a <HAL_SYSTICK_Config>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e00e      	b.n	80028bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d80a      	bhi.n	80028ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a4:	2200      	movs	r2, #0
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028ac:	f001 fba3 	bl	8003ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b0:	4a06      	ldr	r2, [pc, #24]	; (80028cc <HAL_InitTick+0x5c>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000000c 	.word	0x2000000c
 80028c8:	20000014 	.word	0x20000014
 80028cc:	20000010 	.word	0x20000010

080028d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_IncTick+0x20>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	461a      	mov	r2, r3
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_IncTick+0x24>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4413      	add	r3, r2
 80028e0:	4a04      	ldr	r2, [pc, #16]	; (80028f4 <HAL_IncTick+0x24>)
 80028e2:	6013      	str	r3, [r2, #0]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000014 	.word	0x20000014
 80028f4:	200003e4 	.word	0x200003e4

080028f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_GetTick+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	200003e4 	.word	0x200003e4

08002910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002918:	f7ff ffee 	bl	80028f8 <HAL_GetTick>
 800291c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002928:	d005      	beq.n	8002936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800292a:	4b0a      	ldr	r3, [pc, #40]	; (8002954 <HAL_Delay+0x44>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002936:	bf00      	nop
 8002938:	f7ff ffde 	bl	80028f8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	429a      	cmp	r2, r3
 8002946:	d8f7      	bhi.n	8002938 <HAL_Delay+0x28>
  {
  }
}
 8002948:	bf00      	nop
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000014 	.word	0x20000014

08002958 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e033      	b.n	80029d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d109      	bne.n	800298a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fe fb02 	bl	8000f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d118      	bne.n	80029c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800299e:	f023 0302 	bic.w	r3, r3, #2
 80029a2:	f043 0202 	orr.w	r2, r3, #2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 fa68 	bl	8002e80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f023 0303 	bic.w	r3, r3, #3
 80029be:	f043 0201 	orr.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
 80029c6:	e001      	b.n	80029cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
	...

080029e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_Start_DMA+0x1e>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e0e9      	b.n	8002bd2 <HAL_ADC_Start_DMA+0x1f2>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d018      	beq.n	8002a46 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a24:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_ADC_Start_DMA+0x1fc>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a6d      	ldr	r2, [pc, #436]	; (8002be0 <HAL_ADC_Start_DMA+0x200>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9a      	lsrs	r2, r3, #18
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a38:	e002      	b.n	8002a40 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f9      	bne.n	8002a3a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a54:	d107      	bne.n	8002a66 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a64:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	f040 80a1 	bne.w	8002bb8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a7e:	f023 0301 	bic.w	r3, r3, #1
 8002a82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002aa0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab4:	d106      	bne.n	8002ac4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f023 0206 	bic.w	r2, r3, #6
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
 8002ac2:	e002      	b.n	8002aca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ad2:	4b44      	ldr	r3, [pc, #272]	; (8002be4 <HAL_ADC_Start_DMA+0x204>)
 8002ad4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4a43      	ldr	r2, [pc, #268]	; (8002be8 <HAL_ADC_Start_DMA+0x208>)
 8002adc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	4a42      	ldr	r2, [pc, #264]	; (8002bec <HAL_ADC_Start_DMA+0x20c>)
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	4a41      	ldr	r2, [pc, #260]	; (8002bf0 <HAL_ADC_Start_DMA+0x210>)
 8002aec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002af6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002b06:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b16:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	334c      	adds	r3, #76	; 0x4c
 8002b22:	4619      	mov	r1, r3
 8002b24:	68ba      	ldr	r2, [r7, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f001 fb4a 	bl	80041c0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d12a      	bne.n	8002b8e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a2d      	ldr	r2, [pc, #180]	; (8002bf4 <HAL_ADC_Start_DMA+0x214>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d015      	beq.n	8002b6e <HAL_ADC_Start_DMA+0x18e>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a2c      	ldr	r2, [pc, #176]	; (8002bf8 <HAL_ADC_Start_DMA+0x218>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d105      	bne.n	8002b58 <HAL_ADC_Start_DMA+0x178>
 8002b4c:	4b25      	ldr	r3, [pc, #148]	; (8002be4 <HAL_ADC_Start_DMA+0x204>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_ADC_Start_DMA+0x21c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d136      	bne.n	8002bd0 <HAL_ADC_Start_DMA+0x1f0>
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_ADC_Start_DMA+0x204>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f003 0310 	and.w	r3, r3, #16
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d130      	bne.n	8002bd0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d129      	bne.n	8002bd0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	e020      	b.n	8002bd0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_ADC_Start_DMA+0x214>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d11b      	bne.n	8002bd0 <HAL_ADC_Start_DMA+0x1f0>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d114      	bne.n	8002bd0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	f043 0210 	orr.w	r2, r3, #16
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	f043 0201 	orr.w	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000000c 	.word	0x2000000c
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	40012300 	.word	0x40012300
 8002be8:	08003079 	.word	0x08003079
 8002bec:	08003133 	.word	0x08003133
 8002bf0:	0800314f 	.word	0x0800314f
 8002bf4:	40012000 	.word	0x40012000
 8002bf8:	40012100 	.word	0x40012100
 8002bfc:	40012200 	.word	0x40012200

08002c00 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1c>
 8002c54:	2302      	movs	r3, #2
 8002c56:	e105      	b.n	8002e64 <HAL_ADC_ConfigChannel+0x228>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b09      	cmp	r3, #9
 8002c66:	d925      	bls.n	8002cb4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68d9      	ldr	r1, [r3, #12]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	461a      	mov	r2, r3
 8002c76:	4613      	mov	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3b1e      	subs	r3, #30
 8002c7e:	2207      	movs	r2, #7
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43da      	mvns	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	400a      	ands	r2, r1
 8002c8c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68d9      	ldr	r1, [r3, #12]
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	4403      	add	r3, r0
 8002ca6:	3b1e      	subs	r3, #30
 8002ca8:	409a      	lsls	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	e022      	b.n	8002cfa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6919      	ldr	r1, [r3, #16]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	4413      	add	r3, r2
 8002cc8:	2207      	movs	r2, #7
 8002cca:	fa02 f303 	lsl.w	r3, r2, r3
 8002cce:	43da      	mvns	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	400a      	ands	r2, r1
 8002cd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6919      	ldr	r1, [r3, #16]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	4618      	mov	r0, r3
 8002cea:	4603      	mov	r3, r0
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	4403      	add	r3, r0
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b06      	cmp	r3, #6
 8002d00:	d824      	bhi.n	8002d4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	3b05      	subs	r3, #5
 8002d14:	221f      	movs	r2, #31
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43da      	mvns	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	400a      	ands	r2, r1
 8002d22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3b05      	subs	r3, #5
 8002d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34
 8002d4a:	e04c      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d824      	bhi.n	8002d9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	3b23      	subs	r3, #35	; 0x23
 8002d66:	221f      	movs	r2, #31
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	400a      	ands	r2, r1
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	4618      	mov	r0, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3b23      	subs	r3, #35	; 0x23
 8002d90:	fa00 f203 	lsl.w	r2, r0, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9c:	e023      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	3b41      	subs	r3, #65	; 0x41
 8002db0:	221f      	movs	r2, #31
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	400a      	ands	r2, r1
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	3b41      	subs	r3, #65	; 0x41
 8002dda:	fa00 f203 	lsl.w	r2, r0, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_ADC_ConfigChannel+0x234>)
 8002de8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <HAL_ADC_ConfigChannel+0x238>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d109      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x1cc>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b12      	cmp	r3, #18
 8002dfa:	d105      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a19      	ldr	r2, [pc, #100]	; (8002e74 <HAL_ADC_ConfigChannel+0x238>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d123      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x21e>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b10      	cmp	r3, #16
 8002e18:	d003      	beq.n	8002e22 <HAL_ADC_ConfigChannel+0x1e6>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b11      	cmp	r3, #17
 8002e20:	d11b      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	d111      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e36:	4b10      	ldr	r3, [pc, #64]	; (8002e78 <HAL_ADC_ConfigChannel+0x23c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <HAL_ADC_ConfigChannel+0x240>)
 8002e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e40:	0c9a      	lsrs	r2, r3, #18
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e4c:	e002      	b.n	8002e54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1f9      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	40012300 	.word	0x40012300
 8002e74:	40012000 	.word	0x40012000
 8002e78:	2000000c 	.word	0x2000000c
 8002e7c:	431bde83 	.word	0x431bde83

08002e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e88:	4b79      	ldr	r3, [pc, #484]	; (8003070 <ADC_Init+0x1f0>)
 8002e8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	431a      	orrs	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	021a      	lsls	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6899      	ldr	r1, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	68da      	ldr	r2, [r3, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	4a58      	ldr	r2, [pc, #352]	; (8003074 <ADC_Init+0x1f4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d022      	beq.n	8002f5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6899      	ldr	r1, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	e00f      	b.n	8002f7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0202 	bic.w	r2, r2, #2
 8002f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6899      	ldr	r1, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	7e1b      	ldrb	r3, [r3, #24]
 8002f98:	005a      	lsls	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6859      	ldr	r1, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	035a      	lsls	r2, r3, #13
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	e007      	b.n	8002ff4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	3b01      	subs	r3, #1
 8003010:	051a      	lsls	r2, r3, #20
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6899      	ldr	r1, [r3, #8]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003036:	025a      	lsls	r2, r3, #9
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	029a      	lsls	r2, r3, #10
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	609a      	str	r2, [r3, #8]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40012300 	.word	0x40012300
 8003074:	0f000001 	.word	0x0f000001

08003078 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800308e:	2b00      	cmp	r3, #0
 8003090:	d13c      	bne.n	800310c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d12b      	bne.n	8003104 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d127      	bne.n	8003104 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d006      	beq.n	80030d0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d119      	bne.n	8003104 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0220 	bic.w	r2, r2, #32
 80030de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d105      	bne.n	8003104 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f7ff fd7b 	bl	8002c00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800310a:	e00e      	b.n	800312a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f7ff fd85 	bl	8002c28 <HAL_ADC_ErrorCallback>
}
 800311e:	e004      	b.n	800312a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
}
 800312a:	bf00      	nop
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7ff fd67 	bl	8002c14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff fd5a 	bl	8002c28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0ed      	b.n	800336a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fe f9a8 	bl	80014f0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031b0:	f7ff fba2 	bl	80028f8 <HAL_GetTick>
 80031b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031b6:	e012      	b.n	80031de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031b8:	f7ff fb9e 	bl	80028f8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b0a      	cmp	r3, #10
 80031c4:	d90b      	bls.n	80031de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2205      	movs	r2, #5
 80031d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0c5      	b.n	800336a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0e5      	beq.n	80031b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0202 	bic.w	r2, r2, #2
 80031fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031fc:	f7ff fb7c 	bl	80028f8 <HAL_GetTick>
 8003200:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003202:	e012      	b.n	800322a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003204:	f7ff fb78 	bl	80028f8 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b0a      	cmp	r3, #10
 8003210:	d90b      	bls.n	800322a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003216:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e09f      	b.n	800336a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1e5      	bne.n	8003204 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	7e1b      	ldrb	r3, [r3, #24]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d108      	bne.n	8003252 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e007      	b.n	8003262 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003260:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7e5b      	ldrb	r3, [r3, #25]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d108      	bne.n	800327c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	e007      	b.n	800328c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	7e9b      	ldrb	r3, [r3, #26]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d108      	bne.n	80032a6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	e007      	b.n	80032b6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0220 	bic.w	r2, r2, #32
 80032b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7edb      	ldrb	r3, [r3, #27]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d108      	bne.n	80032d0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0210 	bic.w	r2, r2, #16
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e007      	b.n	80032e0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0210 	orr.w	r2, r2, #16
 80032de:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	7f1b      	ldrb	r3, [r3, #28]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0208 	orr.w	r2, r2, #8
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	e007      	b.n	800330a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f022 0208 	bic.w	r2, r2, #8
 8003308:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	7f5b      	ldrb	r3, [r3, #29]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d108      	bne.n	8003324 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0204 	orr.w	r2, r2, #4
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	e007      	b.n	8003334 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f022 0204 	bic.w	r2, r2, #4
 8003332:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	431a      	orrs	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	ea42 0103 	orr.w	r1, r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	1e5a      	subs	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
	...

08003374 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800338a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d003      	beq.n	800339a <HAL_CAN_ConfigFilter+0x26>
 8003392:	7cfb      	ldrb	r3, [r7, #19]
 8003394:	2b02      	cmp	r3, #2
 8003396:	f040 80be 	bne.w	8003516 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800339a:	4b65      	ldr	r3, [pc, #404]	; (8003530 <HAL_CAN_ConfigFilter+0x1bc>)
 800339c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033a4:	f043 0201 	orr.w	r2, r3, #1
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	431a      	orrs	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2201      	movs	r2, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	401a      	ands	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d123      	bne.n	8003444 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	43db      	mvns	r3, r3
 8003406:	401a      	ands	r2, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800341e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	3248      	adds	r2, #72	; 0x48
 8003424:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003438:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800343a:	6979      	ldr	r1, [r7, #20]
 800343c:	3348      	adds	r3, #72	; 0x48
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	440b      	add	r3, r1
 8003442:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d122      	bne.n	8003492 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	431a      	orrs	r2, r3
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800346c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	3248      	adds	r2, #72	; 0x48
 8003472:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003486:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003488:	6979      	ldr	r1, [r7, #20]
 800348a:	3348      	adds	r3, #72	; 0x48
 800348c:	00db      	lsls	r3, r3, #3
 800348e:	440b      	add	r3, r1
 8003490:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d109      	bne.n	80034ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	401a      	ands	r2, r3
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80034ac:	e007      	b.n	80034be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	43db      	mvns	r3, r3
 80034d0:	401a      	ands	r2, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80034d8:	e007      	b.n	80034ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d107      	bne.n	8003502 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003508:	f023 0201 	bic.w	r2, r3, #1
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	e006      	b.n	8003524 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	40006400 	.word	0x40006400

08003534 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d12e      	bne.n	80035a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2202      	movs	r2, #2
 800354c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003560:	f7ff f9ca 	bl	80028f8 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003566:	e012      	b.n	800358e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003568:	f7ff f9c6 	bl	80028f8 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b0a      	cmp	r3, #10
 8003574:	d90b      	bls.n	800358e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2205      	movs	r2, #5
 8003586:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e012      	b.n	80035b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e5      	bne.n	8003568 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e006      	b.n	80035b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
  }
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80035bc:	b480      	push	{r7}
 80035be:	b089      	sub	sp, #36	; 0x24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
 80035c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80035da:	7ffb      	ldrb	r3, [r7, #31]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d003      	beq.n	80035e8 <HAL_CAN_AddTxMessage+0x2c>
 80035e0:	7ffb      	ldrb	r3, [r7, #31]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	f040 80b8 	bne.w	8003758 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d105      	bne.n	8003608 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 80a0 	beq.w	8003748 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	0e1b      	lsrs	r3, r3, #24
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d907      	bls.n	8003628 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e09e      	b.n	8003766 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003628:	2201      	movs	r2, #1
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	409a      	lsls	r2, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d10d      	bne.n	8003656 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	6809      	ldr	r1, [r1, #0]
 8003648:	431a      	orrs	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	3318      	adds	r3, #24
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	440b      	add	r3, r1
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e00f      	b.n	8003676 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003660:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003666:	68f9      	ldr	r1, [r7, #12]
 8003668:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800366a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	3318      	adds	r3, #24
 8003670:	011b      	lsls	r3, r3, #4
 8003672:	440b      	add	r3, r1
 8003674:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	691a      	ldr	r2, [r3, #16]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	3318      	adds	r3, #24
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	440b      	add	r3, r1
 8003686:	3304      	adds	r3, #4
 8003688:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	7d1b      	ldrb	r3, [r3, #20]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d111      	bne.n	80036b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3318      	adds	r3, #24
 800369a:	011b      	lsls	r3, r3, #4
 800369c:	4413      	add	r3, r2
 800369e:	3304      	adds	r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	6811      	ldr	r1, [r2, #0]
 80036a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	3318      	adds	r3, #24
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	440b      	add	r3, r1
 80036b2:	3304      	adds	r3, #4
 80036b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3307      	adds	r3, #7
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	061a      	lsls	r2, r3, #24
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3306      	adds	r3, #6
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3305      	adds	r3, #5
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	4313      	orrs	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	3204      	adds	r2, #4
 80036d6:	7812      	ldrb	r2, [r2, #0]
 80036d8:	4610      	mov	r0, r2
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	6811      	ldr	r1, [r2, #0]
 80036de:	ea43 0200 	orr.w	r2, r3, r0
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	440b      	add	r3, r1
 80036e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80036ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3303      	adds	r3, #3
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	061a      	lsls	r2, r3, #24
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3302      	adds	r3, #2
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	041b      	lsls	r3, r3, #16
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3301      	adds	r3, #1
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	021b      	lsls	r3, r3, #8
 8003708:	4313      	orrs	r3, r2
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	4610      	mov	r0, r2
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	6811      	ldr	r1, [r2, #0]
 8003714:	ea43 0200 	orr.w	r2, r3, r0
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	440b      	add	r3, r1
 800371e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003722:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	3318      	adds	r3, #24
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	6811      	ldr	r1, [r2, #0]
 8003736:	f043 0201 	orr.w	r2, r3, #1
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3318      	adds	r3, #24
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	440b      	add	r3, r1
 8003742:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	e00e      	b.n	8003766 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e006      	b.n	8003766 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
  }
}
 8003766:	4618      	mov	r0, r3
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003772:	b480      	push	{r7}
 8003774:	b087      	sub	sp, #28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003786:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003788:	7dfb      	ldrb	r3, [r7, #23]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d003      	beq.n	8003796 <HAL_CAN_GetRxMessage+0x24>
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	2b02      	cmp	r3, #2
 8003792:	f040 80f3 	bne.w	800397c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10e      	bne.n	80037ba <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d116      	bne.n	80037d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0e7      	b.n	800398a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d107      	bne.n	80037d8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0d8      	b.n	800398a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	331b      	adds	r3, #27
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	4413      	add	r3, r2
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0204 	and.w	r2, r3, #4
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10c      	bne.n	8003810 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	331b      	adds	r3, #27
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	0d5b      	lsrs	r3, r3, #21
 8003806:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	e00b      	b.n	8003828 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	331b      	adds	r3, #27
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	4413      	add	r3, r2
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	08db      	lsrs	r3, r3, #3
 8003820:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	331b      	adds	r3, #27
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	4413      	add	r3, r2
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0202 	and.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	331b      	adds	r3, #27
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	4413      	add	r3, r2
 800384a:	3304      	adds	r3, #4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 020f 	and.w	r2, r3, #15
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	331b      	adds	r3, #27
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	4413      	add	r3, r2
 8003862:	3304      	adds	r3, #4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	b2da      	uxtb	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	331b      	adds	r3, #27
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4413      	add	r3, r2
 800387a:	3304      	adds	r3, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	0c1b      	lsrs	r3, r3, #16
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	4413      	add	r3, r2
 8003890:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	0a1a      	lsrs	r2, r3, #8
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	4413      	add	r3, r2
 80038c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	0c1a      	lsrs	r2, r3, #16
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	3302      	adds	r3, #2
 80038cc:	b2d2      	uxtb	r2, r2
 80038ce:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	4413      	add	r3, r2
 80038da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	0e1a      	lsrs	r2, r3, #24
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	3303      	adds	r3, #3
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	3304      	adds	r3, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	4413      	add	r3, r2
 800390c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	0a1a      	lsrs	r2, r3, #8
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	3305      	adds	r3, #5
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	4413      	add	r3, r2
 8003926:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	0c1a      	lsrs	r2, r3, #16
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	3306      	adds	r3, #6
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	4413      	add	r3, r2
 8003940:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	0e1a      	lsrs	r2, r3, #24
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	3307      	adds	r3, #7
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68da      	ldr	r2, [r3, #12]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0220 	orr.w	r2, r2, #32
 8003964:	60da      	str	r2, [r3, #12]
 8003966:	e007      	b.n	8003978 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691a      	ldr	r2, [r3, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0220 	orr.w	r2, r2, #32
 8003976:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	e006      	b.n	800398a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d002      	beq.n	80039b4 <HAL_CAN_ActivateNotification+0x1e>
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d109      	bne.n	80039c8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6959      	ldr	r1, [r3, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	e006      	b.n	80039d6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3714      	adds	r7, #20
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b08a      	sub	sp, #40	; 0x28
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d07c      	beq.n	8003b22 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d023      	beq.n	8003a7a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	f003 0302 	and.w	r3, r3, #2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f983 	bl	8003d50 <HAL_CAN_TxMailbox0CompleteCallback>
 8003a4a:	e016      	b.n	8003a7a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a5e:	e00c      	b.n	8003a7a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e002      	b.n	8003a7a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f989 	bl	8003d8c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d024      	beq.n	8003ace <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f963 	bl	8003d64 <HAL_CAN_TxMailbox1CompleteCallback>
 8003a9e:	e016      	b.n	8003ace <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d004      	beq.n	8003ab4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	e00c      	b.n	8003ace <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac6:	e002      	b.n	8003ace <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 f969 	bl	8003da0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d024      	beq.n	8003b22 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ae0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f943 	bl	8003d78 <HAL_CAN_TxMailbox2CompleteCallback>
 8003af2:	e016      	b.n	8003b22 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
 8003b06:	e00c      	b.n	8003b22 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d004      	beq.n	8003b1c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	e002      	b.n	8003b22 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f949 	bl	8003db4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 0310 	and.w	r3, r3, #16
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d007      	beq.n	8003b46 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2210      	movs	r2, #16
 8003b44:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d006      	beq.n	8003b68 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f930 	bl	8003dc8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	f003 0302 	and.w	r3, r3, #2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d009      	beq.n	8003b86 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7fd ff93 	bl	8001aac <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00c      	beq.n	8003baa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f003 0310 	and.w	r3, r3, #16
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003baa:	6a3b      	ldr	r3, [r7, #32]
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00b      	beq.n	8003bcc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d006      	beq.n	8003bcc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f912 	bl	8003df0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691b      	ldr	r3, [r3, #16]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f8f9 	bl	8003ddc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0310 	and.w	r3, r3, #16
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2210      	movs	r2, #16
 8003c04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f000 f8fc 	bl	8003e04 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2208      	movs	r2, #8
 8003c26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8f5 	bl	8003e18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d07b      	beq.n	8003d30 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d072      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d008      	beq.n	8003c5e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d008      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	f043 0304 	orr.w	r3, r3, #4
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d043      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d03e      	beq.n	8003d28 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cb0:	2b60      	cmp	r3, #96	; 0x60
 8003cb2:	d02b      	beq.n	8003d0c <HAL_CAN_IRQHandler+0x32a>
 8003cb4:	2b60      	cmp	r3, #96	; 0x60
 8003cb6:	d82e      	bhi.n	8003d16 <HAL_CAN_IRQHandler+0x334>
 8003cb8:	2b50      	cmp	r3, #80	; 0x50
 8003cba:	d022      	beq.n	8003d02 <HAL_CAN_IRQHandler+0x320>
 8003cbc:	2b50      	cmp	r3, #80	; 0x50
 8003cbe:	d82a      	bhi.n	8003d16 <HAL_CAN_IRQHandler+0x334>
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d019      	beq.n	8003cf8 <HAL_CAN_IRQHandler+0x316>
 8003cc4:	2b40      	cmp	r3, #64	; 0x40
 8003cc6:	d826      	bhi.n	8003d16 <HAL_CAN_IRQHandler+0x334>
 8003cc8:	2b30      	cmp	r3, #48	; 0x30
 8003cca:	d010      	beq.n	8003cee <HAL_CAN_IRQHandler+0x30c>
 8003ccc:	2b30      	cmp	r3, #48	; 0x30
 8003cce:	d822      	bhi.n	8003d16 <HAL_CAN_IRQHandler+0x334>
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d002      	beq.n	8003cda <HAL_CAN_IRQHandler+0x2f8>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d005      	beq.n	8003ce4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003cd8:	e01d      	b.n	8003d16 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	f043 0308 	orr.w	r3, r3, #8
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003ce2:	e019      	b.n	8003d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	f043 0310 	orr.w	r3, r3, #16
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cec:	e014      	b.n	8003d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	f043 0320 	orr.w	r3, r3, #32
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003cf6:	e00f      	b.n	8003d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d00:	e00a      	b.n	8003d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d0a:	e005      	b.n	8003d18 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d14:	e000      	b.n	8003d18 <HAL_CAN_IRQHandler+0x336>
            break;
 8003d16:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003d26:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2204      	movs	r2, #4
 8003d2e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d008      	beq.n	8003d48 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f872 	bl	8003e2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003d48:	bf00      	nop
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b083      	sub	sp, #12
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003e34:	bf00      	nop
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr

08003e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <__NVIC_SetPriorityGrouping+0x44>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e72:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <__NVIC_SetPriorityGrouping+0x44>)
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	60d3      	str	r3, [r2, #12]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e8c:	4b04      	ldr	r3, [pc, #16]	; (8003ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	f003 0307 	and.w	r3, r3, #7
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000ed00 	.word	0xe000ed00

08003ea4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	db0b      	blt.n	8003ece <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	f003 021f 	and.w	r2, r3, #31
 8003ebc:	4907      	ldr	r1, [pc, #28]	; (8003edc <__NVIC_EnableIRQ+0x38>)
 8003ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2001      	movs	r0, #1
 8003ec6:	fa00 f202 	lsl.w	r2, r0, r2
 8003eca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	e000e100 	.word	0xe000e100

08003ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	6039      	str	r1, [r7, #0]
 8003eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	db0a      	blt.n	8003f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	490c      	ldr	r1, [pc, #48]	; (8003f2c <__NVIC_SetPriority+0x4c>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	0112      	lsls	r2, r2, #4
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	440b      	add	r3, r1
 8003f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f08:	e00a      	b.n	8003f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4908      	ldr	r1, [pc, #32]	; (8003f30 <__NVIC_SetPriority+0x50>)
 8003f10:	79fb      	ldrb	r3, [r7, #7]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	3b04      	subs	r3, #4
 8003f18:	0112      	lsls	r2, r2, #4
 8003f1a:	b2d2      	uxtb	r2, r2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	761a      	strb	r2, [r3, #24]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr
 8003f2c:	e000e100 	.word	0xe000e100
 8003f30:	e000ed00 	.word	0xe000ed00

08003f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b089      	sub	sp, #36	; 0x24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f1c3 0307 	rsb	r3, r3, #7
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	bf28      	it	cs
 8003f52:	2304      	movcs	r3, #4
 8003f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	2b06      	cmp	r3, #6
 8003f5c:	d902      	bls.n	8003f64 <NVIC_EncodePriority+0x30>
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3b03      	subs	r3, #3
 8003f62:	e000      	b.n	8003f66 <NVIC_EncodePriority+0x32>
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	43da      	mvns	r2, r3
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	401a      	ands	r2, r3
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	43d9      	mvns	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f8c:	4313      	orrs	r3, r2
         );
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3724      	adds	r7, #36	; 0x24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fac:	d301      	bcc.n	8003fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e00f      	b.n	8003fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fb2:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <SysTick_Config+0x40>)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fba:	210f      	movs	r1, #15
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fc0:	f7ff ff8e 	bl	8003ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <SysTick_Config+0x40>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fca:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <SysTick_Config+0x40>)
 8003fcc:	2207      	movs	r2, #7
 8003fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	e000e010 	.word	0xe000e010

08003fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff ff29 	bl	8003e40 <__NVIC_SetPriorityGrouping>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b086      	sub	sp, #24
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	60b9      	str	r1, [r7, #8]
 8004000:	607a      	str	r2, [r7, #4]
 8004002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004004:	2300      	movs	r3, #0
 8004006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004008:	f7ff ff3e 	bl	8003e88 <__NVIC_GetPriorityGrouping>
 800400c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ff8e 	bl	8003f34 <NVIC_EncodePriority>
 8004018:	4602      	mov	r2, r0
 800401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff5d 	bl	8003ee0 <__NVIC_SetPriority>
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff31 	bl	8003ea4 <__NVIC_EnableIRQ>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ffa2 	bl	8003f9c <SysTick_Config>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004070:	f7fe fc42 	bl	80028f8 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e099      	b.n	80041b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0201 	bic.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040a0:	e00f      	b.n	80040c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040a2:	f7fe fc29 	bl	80028f8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d908      	bls.n	80040c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2203      	movs	r2, #3
 80040ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e078      	b.n	80041b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e8      	bne.n	80040a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4b38      	ldr	r3, [pc, #224]	; (80041bc <HAL_DMA_Init+0x158>)
 80040dc:	4013      	ands	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80040ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004106:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	2b04      	cmp	r3, #4
 800411a:	d107      	bne.n	800412c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	4313      	orrs	r3, r2
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0307 	bic.w	r3, r3, #7
 8004142:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004152:	2b04      	cmp	r3, #4
 8004154:	d117      	bne.n	8004186 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4313      	orrs	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00e      	beq.n	8004186 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fa6f 	bl	800464c <DMA_CheckFifoParam>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d008      	beq.n	8004186 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004182:	2301      	movs	r3, #1
 8004184:	e016      	b.n	80041b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fa26 	bl	80045e0 <DMA_CalcBaseAndBitshift>
 8004194:	4603      	mov	r3, r0
 8004196:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419c:	223f      	movs	r2, #63	; 0x3f
 800419e:	409a      	lsls	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	f010803f 	.word	0xf010803f

080041c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
 80041cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_DMA_Start_IT+0x26>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e040      	b.n	8004268 <HAL_DMA_Start_IT+0xa8>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d12f      	bne.n	800425a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2202      	movs	r2, #2
 80041fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f9b8 	bl	8004584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	223f      	movs	r2, #63	; 0x3f
 800421a:	409a      	lsls	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0216 	orr.w	r2, r2, #22
 800422e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004234:	2b00      	cmp	r3, #0
 8004236:	d007      	beq.n	8004248 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0208 	orr.w	r2, r2, #8
 8004246:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e005      	b.n	8004266 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004262:	2302      	movs	r3, #2
 8004264:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004266:	7dfb      	ldrb	r3, [r7, #23]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800427c:	4b8e      	ldr	r3, [pc, #568]	; (80044b8 <HAL_DMA_IRQHandler+0x248>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a8e      	ldr	r2, [pc, #568]	; (80044bc <HAL_DMA_IRQHandler+0x24c>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	0a9b      	lsrs	r3, r3, #10
 8004288:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800429a:	2208      	movs	r2, #8
 800429c:	409a      	lsls	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4013      	ands	r3, r2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d01a      	beq.n	80042dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0204 	bic.w	r2, r2, #4
 80042c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	2208      	movs	r2, #8
 80042ca:	409a      	lsls	r2, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f043 0201 	orr.w	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	2201      	movs	r2, #1
 80042e2:	409a      	lsls	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d012      	beq.n	8004312 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00b      	beq.n	8004312 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fe:	2201      	movs	r2, #1
 8004300:	409a      	lsls	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430a:	f043 0202 	orr.w	r2, r3, #2
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	2204      	movs	r2, #4
 8004318:	409a      	lsls	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d012      	beq.n	8004348 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00b      	beq.n	8004348 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	2204      	movs	r2, #4
 8004336:	409a      	lsls	r2, r3
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	f043 0204 	orr.w	r2, r3, #4
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434c:	2210      	movs	r2, #16
 800434e:	409a      	lsls	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d043      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d03c      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	2210      	movs	r2, #16
 800436c:	409a      	lsls	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d018      	beq.n	80043b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d108      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	2b00      	cmp	r3, #0
 8004394:	d024      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	4798      	blx	r3
 800439e:	e01f      	b.n	80043e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01b      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	4798      	blx	r3
 80043b0:	e016      	b.n	80043e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d107      	bne.n	80043d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0208 	bic.w	r2, r2, #8
 80043ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	2220      	movs	r2, #32
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 808f 	beq.w	8004510 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0310 	and.w	r3, r3, #16
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8087 	beq.w	8004510 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004406:	2220      	movs	r2, #32
 8004408:	409a      	lsls	r2, r3
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b05      	cmp	r3, #5
 8004418:	d136      	bne.n	8004488 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0216 	bic.w	r2, r2, #22
 8004428:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695a      	ldr	r2, [r3, #20]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004438:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d103      	bne.n	800444a <HAL_DMA_IRQHandler+0x1da>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004446:	2b00      	cmp	r3, #0
 8004448:	d007      	beq.n	800445a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0208 	bic.w	r2, r2, #8
 8004458:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445e:	223f      	movs	r2, #63	; 0x3f
 8004460:	409a      	lsls	r2, r3
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d07e      	beq.n	800457c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
        }
        return;
 8004486:	e079      	b.n	800457c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01d      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10d      	bne.n	80044c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d031      	beq.n	8004510 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	4798      	blx	r3
 80044b4:	e02c      	b.n	8004510 <HAL_DMA_IRQHandler+0x2a0>
 80044b6:	bf00      	nop
 80044b8:	2000000c 	.word	0x2000000c
 80044bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d023      	beq.n	8004510 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	4798      	blx	r3
 80044d0:	e01e      	b.n	8004510 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10f      	bne.n	8004500 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0210 	bic.w	r2, r2, #16
 80044ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004514:	2b00      	cmp	r3, #0
 8004516:	d032      	beq.n	800457e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d022      	beq.n	800456a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2205      	movs	r2, #5
 8004528:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	3301      	adds	r3, #1
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	d307      	bcc.n	8004558 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f2      	bne.n	800453c <HAL_DMA_IRQHandler+0x2cc>
 8004556:	e000      	b.n	800455a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004558:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e000      	b.n	800457e <HAL_DMA_IRQHandler+0x30e>
        return;
 800457c:	bf00      	nop
    }
  }
}
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d108      	bne.n	80045c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045c2:	e007      	b.n	80045d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	60da      	str	r2, [r3, #12]
}
 80045d4:	bf00      	nop
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	3b10      	subs	r3, #16
 80045f0:	4a14      	ldr	r2, [pc, #80]	; (8004644 <DMA_CalcBaseAndBitshift+0x64>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	091b      	lsrs	r3, r3, #4
 80045f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045fa:	4a13      	ldr	r2, [pc, #76]	; (8004648 <DMA_CalcBaseAndBitshift+0x68>)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d909      	bls.n	8004622 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	1d1a      	adds	r2, r3, #4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	659a      	str	r2, [r3, #88]	; 0x58
 8004620:	e007      	b.n	8004632 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800462a:	f023 0303 	bic.w	r3, r3, #3
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004636:	4618      	mov	r0, r3
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	aaaaaaab 	.word	0xaaaaaaab
 8004648:	08008cbc 	.word	0x08008cbc

0800464c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11f      	bne.n	80046a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d856      	bhi.n	800471a <DMA_CheckFifoParam+0xce>
 800466c:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <DMA_CheckFifoParam+0x28>)
 800466e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004672:	bf00      	nop
 8004674:	08004685 	.word	0x08004685
 8004678:	08004697 	.word	0x08004697
 800467c:	08004685 	.word	0x08004685
 8004680:	0800471b 	.word	0x0800471b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d046      	beq.n	800471e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004694:	e043      	b.n	800471e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800469e:	d140      	bne.n	8004722 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046a4:	e03d      	b.n	8004722 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ae:	d121      	bne.n	80046f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d837      	bhi.n	8004726 <DMA_CheckFifoParam+0xda>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <DMA_CheckFifoParam+0x70>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046cd 	.word	0x080046cd
 80046c0:	080046d3 	.word	0x080046d3
 80046c4:	080046cd 	.word	0x080046cd
 80046c8:	080046e5 	.word	0x080046e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      break;
 80046d0:	e030      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d025      	beq.n	800472a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e2:	e022      	b.n	800472a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046ec:	d11f      	bne.n	800472e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046f2:	e01c      	b.n	800472e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d903      	bls.n	8004702 <DMA_CheckFifoParam+0xb6>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d003      	beq.n	8004708 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004700:	e018      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
      break;
 8004706:	e015      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      break;
 8004718:	e00b      	b.n	8004732 <DMA_CheckFifoParam+0xe6>
      break;
 800471a:	bf00      	nop
 800471c:	e00a      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 800471e:	bf00      	nop
 8004720:	e008      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 8004722:	bf00      	nop
 8004724:	e006      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;   
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <DMA_CheckFifoParam+0xe8>
      break;
 8004732:	bf00      	nop
    }
  } 
  
  return status; 
 8004734:	7bfb      	ldrb	r3, [r7, #15]
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop

08004744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	; 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e16b      	b.n	8004a38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	429a      	cmp	r2, r3
 800477a:	f040 815a 	bne.w	8004a32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d005      	beq.n	8004796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004792:	2b02      	cmp	r3, #2
 8004794:	d130      	bne.n	80047f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	2203      	movs	r2, #3
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047cc:	2201      	movs	r2, #1
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 0201 	and.w	r2, r3, #1
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b03      	cmp	r3, #3
 8004802:	d017      	beq.n	8004834 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2203      	movs	r2, #3
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d123      	bne.n	8004888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	08da      	lsrs	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3208      	adds	r2, #8
 8004848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	220f      	movs	r2, #15
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4013      	ands	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4313      	orrs	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	08da      	lsrs	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3208      	adds	r2, #8
 8004882:	69b9      	ldr	r1, [r7, #24]
 8004884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	2203      	movs	r2, #3
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0203 	and.w	r2, r3, #3
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80b4 	beq.w	8004a32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	4b60      	ldr	r3, [pc, #384]	; (8004a50 <HAL_GPIO_Init+0x30c>)
 80048d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d2:	4a5f      	ldr	r2, [pc, #380]	; (8004a50 <HAL_GPIO_Init+0x30c>)
 80048d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d8:	6453      	str	r3, [r2, #68]	; 0x44
 80048da:	4b5d      	ldr	r3, [pc, #372]	; (8004a50 <HAL_GPIO_Init+0x30c>)
 80048dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048e6:	4a5b      	ldr	r2, [pc, #364]	; (8004a54 <HAL_GPIO_Init+0x310>)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	089b      	lsrs	r3, r3, #2
 80048ec:	3302      	adds	r3, #2
 80048ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	f003 0303 	and.w	r3, r3, #3
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	220f      	movs	r2, #15
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	43db      	mvns	r3, r3
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	4013      	ands	r3, r2
 8004908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a52      	ldr	r2, [pc, #328]	; (8004a58 <HAL_GPIO_Init+0x314>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02b      	beq.n	800496a <HAL_GPIO_Init+0x226>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a51      	ldr	r2, [pc, #324]	; (8004a5c <HAL_GPIO_Init+0x318>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d025      	beq.n	8004966 <HAL_GPIO_Init+0x222>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a50      	ldr	r2, [pc, #320]	; (8004a60 <HAL_GPIO_Init+0x31c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d01f      	beq.n	8004962 <HAL_GPIO_Init+0x21e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a4f      	ldr	r2, [pc, #316]	; (8004a64 <HAL_GPIO_Init+0x320>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d019      	beq.n	800495e <HAL_GPIO_Init+0x21a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a4e      	ldr	r2, [pc, #312]	; (8004a68 <HAL_GPIO_Init+0x324>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_GPIO_Init+0x216>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a4d      	ldr	r2, [pc, #308]	; (8004a6c <HAL_GPIO_Init+0x328>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00d      	beq.n	8004956 <HAL_GPIO_Init+0x212>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a4c      	ldr	r2, [pc, #304]	; (8004a70 <HAL_GPIO_Init+0x32c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <HAL_GPIO_Init+0x20e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a4b      	ldr	r2, [pc, #300]	; (8004a74 <HAL_GPIO_Init+0x330>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_GPIO_Init+0x20a>
 800494a:	2307      	movs	r3, #7
 800494c:	e00e      	b.n	800496c <HAL_GPIO_Init+0x228>
 800494e:	2308      	movs	r3, #8
 8004950:	e00c      	b.n	800496c <HAL_GPIO_Init+0x228>
 8004952:	2306      	movs	r3, #6
 8004954:	e00a      	b.n	800496c <HAL_GPIO_Init+0x228>
 8004956:	2305      	movs	r3, #5
 8004958:	e008      	b.n	800496c <HAL_GPIO_Init+0x228>
 800495a:	2304      	movs	r3, #4
 800495c:	e006      	b.n	800496c <HAL_GPIO_Init+0x228>
 800495e:	2303      	movs	r3, #3
 8004960:	e004      	b.n	800496c <HAL_GPIO_Init+0x228>
 8004962:	2302      	movs	r3, #2
 8004964:	e002      	b.n	800496c <HAL_GPIO_Init+0x228>
 8004966:	2301      	movs	r3, #1
 8004968:	e000      	b.n	800496c <HAL_GPIO_Init+0x228>
 800496a:	2300      	movs	r3, #0
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	f002 0203 	and.w	r2, r2, #3
 8004972:	0092      	lsls	r2, r2, #2
 8004974:	4093      	lsls	r3, r2
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800497c:	4935      	ldr	r1, [pc, #212]	; (8004a54 <HAL_GPIO_Init+0x310>)
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	3302      	adds	r3, #2
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_GPIO_Init+0x334>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	43db      	mvns	r3, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4013      	ands	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d003      	beq.n	80049ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ae:	4a32      	ldr	r2, [pc, #200]	; (8004a78 <HAL_GPIO_Init+0x334>)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b4:	4b30      	ldr	r3, [pc, #192]	; (8004a78 <HAL_GPIO_Init+0x334>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	43db      	mvns	r3, r3
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4013      	ands	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049d8:	4a27      	ldr	r2, [pc, #156]	; (8004a78 <HAL_GPIO_Init+0x334>)
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049de:	4b26      	ldr	r3, [pc, #152]	; (8004a78 <HAL_GPIO_Init+0x334>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a02:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <HAL_GPIO_Init+0x334>)
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a08:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_GPIO_Init+0x334>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a2c:	4a12      	ldr	r2, [pc, #72]	; (8004a78 <HAL_GPIO_Init+0x334>)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	3301      	adds	r3, #1
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	f67f ae90 	bls.w	8004760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a40:	bf00      	nop
 8004a42:	bf00      	nop
 8004a44:	3724      	adds	r7, #36	; 0x24
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40013800 	.word	0x40013800
 8004a58:	40020000 	.word	0x40020000
 8004a5c:	40020400 	.word	0x40020400
 8004a60:	40020800 	.word	0x40020800
 8004a64:	40020c00 	.word	0x40020c00
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40021400 	.word	0x40021400
 8004a70:	40021800 	.word	0x40021800
 8004a74:	40021c00 	.word	0x40021c00
 8004a78:	40013c00 	.word	0x40013c00

08004a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	807b      	strh	r3, [r7, #2]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a8c:	787b      	ldrb	r3, [r7, #1]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a92:	887a      	ldrh	r2, [r7, #2]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a98:	e003      	b.n	8004aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a9a:	887b      	ldrh	r3, [r7, #2]
 8004a9c:	041a      	lsls	r2, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	619a      	str	r2, [r3, #24]
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e12b      	b.n	8004d1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc fe48 	bl	800176c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2224      	movs	r2, #36	; 0x24
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 0201 	bic.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b14:	f001 fbac 	bl	8006270 <HAL_RCC_GetPCLK1Freq>
 8004b18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4a81      	ldr	r2, [pc, #516]	; (8004d24 <HAL_I2C_Init+0x274>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d807      	bhi.n	8004b34 <HAL_I2C_Init+0x84>
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a80      	ldr	r2, [pc, #512]	; (8004d28 <HAL_I2C_Init+0x278>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	bf94      	ite	ls
 8004b2c:	2301      	movls	r3, #1
 8004b2e:	2300      	movhi	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e006      	b.n	8004b42 <HAL_I2C_Init+0x92>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a7d      	ldr	r2, [pc, #500]	; (8004d2c <HAL_I2C_Init+0x27c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	bf94      	ite	ls
 8004b3c:	2301      	movls	r3, #1
 8004b3e:	2300      	movhi	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e0e7      	b.n	8004d1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a78      	ldr	r2, [pc, #480]	; (8004d30 <HAL_I2C_Init+0x280>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	0c9b      	lsrs	r3, r3, #18
 8004b54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	4a6a      	ldr	r2, [pc, #424]	; (8004d24 <HAL_I2C_Init+0x274>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d802      	bhi.n	8004b84 <HAL_I2C_Init+0xd4>
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	3301      	adds	r3, #1
 8004b82:	e009      	b.n	8004b98 <HAL_I2C_Init+0xe8>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b8a:	fb02 f303 	mul.w	r3, r2, r3
 8004b8e:	4a69      	ldr	r2, [pc, #420]	; (8004d34 <HAL_I2C_Init+0x284>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	3301      	adds	r3, #1
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	6812      	ldr	r2, [r2, #0]
 8004b9c:	430b      	orrs	r3, r1
 8004b9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004baa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	495c      	ldr	r1, [pc, #368]	; (8004d24 <HAL_I2C_Init+0x274>)
 8004bb4:	428b      	cmp	r3, r1
 8004bb6:	d819      	bhi.n	8004bec <HAL_I2C_Init+0x13c>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	1e59      	subs	r1, r3, #1
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bc6:	1c59      	adds	r1, r3, #1
 8004bc8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004bcc:	400b      	ands	r3, r1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_I2C_Init+0x138>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1e59      	subs	r1, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004be0:	3301      	adds	r3, #1
 8004be2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be6:	e051      	b.n	8004c8c <HAL_I2C_Init+0x1dc>
 8004be8:	2304      	movs	r3, #4
 8004bea:	e04f      	b.n	8004c8c <HAL_I2C_Init+0x1dc>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d111      	bne.n	8004c18 <HAL_I2C_Init+0x168>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1e58      	subs	r0, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6859      	ldr	r1, [r3, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	440b      	add	r3, r1
 8004c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c06:	3301      	adds	r3, #1
 8004c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e012      	b.n	8004c3e <HAL_I2C_Init+0x18e>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1e58      	subs	r0, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6859      	ldr	r1, [r3, #4]
 8004c20:	460b      	mov	r3, r1
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	0099      	lsls	r1, r3, #2
 8004c28:	440b      	add	r3, r1
 8004c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_I2C_Init+0x196>
 8004c42:	2301      	movs	r3, #1
 8004c44:	e022      	b.n	8004c8c <HAL_I2C_Init+0x1dc>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10e      	bne.n	8004c6c <HAL_I2C_Init+0x1bc>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1e58      	subs	r0, r3, #1
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6859      	ldr	r1, [r3, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	440b      	add	r3, r1
 8004c5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c60:	3301      	adds	r3, #1
 8004c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c6a:	e00f      	b.n	8004c8c <HAL_I2C_Init+0x1dc>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1e58      	subs	r0, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6859      	ldr	r1, [r3, #4]
 8004c74:	460b      	mov	r3, r1
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	440b      	add	r3, r1
 8004c7a:	0099      	lsls	r1, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c82:	3301      	adds	r3, #1
 8004c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	6809      	ldr	r1, [r1, #0]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69da      	ldr	r2, [r3, #28]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6911      	ldr	r1, [r2, #16]
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	68d2      	ldr	r2, [r2, #12]
 8004cc6:	4311      	orrs	r1, r2
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	000186a0 	.word	0x000186a0
 8004d28:	001e847f 	.word	0x001e847f
 8004d2c:	003d08ff 	.word	0x003d08ff
 8004d30:	431bde83 	.word	0x431bde83
 8004d34:	10624dd3 	.word	0x10624dd3

08004d38 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af02      	add	r7, sp, #8
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	461a      	mov	r2, r3
 8004d44:	460b      	mov	r3, r1
 8004d46:	817b      	strh	r3, [r7, #10]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7fd fdd4 	bl	80028f8 <HAL_GetTick>
 8004d50:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	f040 80e0 	bne.w	8004f20 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	9300      	str	r3, [sp, #0]
 8004d64:	2319      	movs	r3, #25
 8004d66:	2201      	movs	r2, #1
 8004d68:	4970      	ldr	r1, [pc, #448]	; (8004f2c <HAL_I2C_Master_Transmit+0x1f4>)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f000 fc72 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d001      	beq.n	8004d7a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
 8004d78:	e0d3      	b.n	8004f22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d101      	bne.n	8004d88 <HAL_I2C_Master_Transmit+0x50>
 8004d84:	2302      	movs	r3, #2
 8004d86:	e0cc      	b.n	8004f22 <HAL_I2C_Master_Transmit+0x1ea>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d007      	beq.n	8004dae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2221      	movs	r2, #33	; 0x21
 8004dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2210      	movs	r2, #16
 8004dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	893a      	ldrh	r2, [r7, #8]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	4a50      	ldr	r2, [pc, #320]	; (8004f30 <HAL_I2C_Master_Transmit+0x1f8>)
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004df0:	8979      	ldrh	r1, [r7, #10]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fadc 	bl	80053b4 <I2C_MasterRequestWrite>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e08d      	b.n	8004f22 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e06:	2300      	movs	r3, #0
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	613b      	str	r3, [r7, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	613b      	str	r3, [r7, #16]
 8004e1a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e1c:	e066      	b.n	8004eec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	6a39      	ldr	r1, [r7, #32]
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 fcec 	bl	8005800 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00d      	beq.n	8004e4a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d107      	bne.n	8004e46 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e06b      	b.n	8004f22 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	781a      	ldrb	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	3b01      	subs	r3, #1
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f003 0304 	and.w	r3, r3, #4
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d11b      	bne.n	8004ec0 <HAL_I2C_Master_Transmit+0x188>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d017      	beq.n	8004ec0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e94:	781a      	ldrb	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	6a39      	ldr	r1, [r7, #32]
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 fcdc 	bl	8005882 <I2C_WaitOnBTFFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00d      	beq.n	8004eec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d107      	bne.n	8004ee8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e01a      	b.n	8004f22 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d194      	bne.n	8004e1e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2220      	movs	r2, #32
 8004f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e000      	b.n	8004f22 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f20:	2302      	movs	r3, #2
  }
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	00100002 	.word	0x00100002
 8004f30:	ffff0000 	.word	0xffff0000

08004f34 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	; 0x30
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	607a      	str	r2, [r7, #4]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	460b      	mov	r3, r1
 8004f42:	817b      	strh	r3, [r7, #10]
 8004f44:	4613      	mov	r3, r2
 8004f46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f48:	f7fd fcd6 	bl	80028f8 <HAL_GetTick>
 8004f4c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b20      	cmp	r3, #32
 8004f58:	f040 820b 	bne.w	8005372 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	2319      	movs	r3, #25
 8004f62:	2201      	movs	r2, #1
 8004f64:	497c      	ldr	r1, [pc, #496]	; (8005158 <HAL_I2C_Master_Receive+0x224>)
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fb74 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004f72:	2302      	movs	r3, #2
 8004f74:	e1fe      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d101      	bne.n	8004f84 <HAL_I2C_Master_Receive+0x50>
 8004f80:	2302      	movs	r3, #2
 8004f82:	e1f7      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d007      	beq.n	8004faa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2222      	movs	r2, #34	; 0x22
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2210      	movs	r2, #16
 8004fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	893a      	ldrh	r2, [r7, #8]
 8004fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4a5c      	ldr	r2, [pc, #368]	; (800515c <HAL_I2C_Master_Receive+0x228>)
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004fec:	8979      	ldrh	r1, [r7, #10]
 8004fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fa60 	bl	80054b8 <I2C_MasterRequestRead>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e1b8      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005006:	2b00      	cmp	r3, #0
 8005008:	d113      	bne.n	8005032 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800500a:	2300      	movs	r3, #0
 800500c:	623b      	str	r3, [r7, #32]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	623b      	str	r3, [r7, #32]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	623b      	str	r3, [r7, #32]
 800501e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	e18c      	b.n	800534c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005036:	2b01      	cmp	r3, #1
 8005038:	d11b      	bne.n	8005072 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504a:	2300      	movs	r3, #0
 800504c:	61fb      	str	r3, [r7, #28]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	61fb      	str	r3, [r7, #28]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	61fb      	str	r3, [r7, #28]
 800505e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e16c      	b.n	800534c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005076:	2b02      	cmp	r3, #2
 8005078:	d11b      	bne.n	80050b2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005088:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005098:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	e14c      	b.n	800534c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	695b      	ldr	r3, [r3, #20]
 80050cc:	617b      	str	r3, [r7, #20]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699b      	ldr	r3, [r3, #24]
 80050d4:	617b      	str	r3, [r7, #20]
 80050d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80050d8:	e138      	b.n	800534c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	2b03      	cmp	r3, #3
 80050e0:	f200 80f1 	bhi.w	80052c6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d123      	bne.n	8005134 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 fc07 	bl	8005904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e139      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	b2d2      	uxtb	r2, r2
 800510c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005132:	e10b      	b.n	800534c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005138:	2b02      	cmp	r3, #2
 800513a:	d14e      	bne.n	80051da <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	2200      	movs	r2, #0
 8005144:	4906      	ldr	r1, [pc, #24]	; (8005160 <HAL_I2C_Master_Receive+0x22c>)
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 fa84 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d008      	beq.n	8005164 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e10e      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
 8005156:	bf00      	nop
 8005158:	00100002 	.word	0x00100002
 800515c:	ffff0000 	.word	0xffff0000
 8005160:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005172:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691a      	ldr	r2, [r3, #16]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	3b01      	subs	r3, #1
 80051a0:	b29a      	uxth	r2, r3
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c2:	3b01      	subs	r3, #1
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	3b01      	subs	r3, #1
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051d8:	e0b8      	b.n	800534c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	9300      	str	r3, [sp, #0]
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	2200      	movs	r2, #0
 80051e2:	4966      	ldr	r1, [pc, #408]	; (800537c <HAL_I2C_Master_Receive+0x448>)
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fa35 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0bf      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005202:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	691a      	ldr	r2, [r3, #16]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522c:	b29b      	uxth	r3, r3
 800522e:	3b01      	subs	r3, #1
 8005230:	b29a      	uxth	r2, r3
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	2200      	movs	r2, #0
 800523e:	494f      	ldr	r1, [pc, #316]	; (800537c <HAL_I2C_Master_Receive+0x448>)
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 fa07 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e091      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800525e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	1c5a      	adds	r2, r3, #1
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691a      	ldr	r2, [r3, #16]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052c4:	e042      	b.n	800534c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 fb1a 	bl	8005904 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e04c      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	691a      	ldr	r2, [r3, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b04      	cmp	r3, #4
 8005318:	d118      	bne.n	800534c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005350:	2b00      	cmp	r3, #0
 8005352:	f47f aec2 	bne.w	80050da <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2220      	movs	r2, #32
 800535a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800536e:	2300      	movs	r3, #0
 8005370:	e000      	b.n	8005374 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005372:	2302      	movs	r3, #2
  }
}
 8005374:	4618      	mov	r0, r3
 8005376:	3728      	adds	r7, #40	; 0x28
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	00010004 	.word	0x00010004

08005380 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538e:	b2db      	uxtb	r3, r3
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af02      	add	r7, sp, #8
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	603b      	str	r3, [r7, #0]
 80053c0:	460b      	mov	r3, r1
 80053c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d006      	beq.n	80053de <I2C_MasterRequestWrite+0x2a>
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d003      	beq.n	80053de <I2C_MasterRequestWrite+0x2a>
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053dc:	d108      	bne.n	80053f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e00b      	b.n	8005408 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	2b12      	cmp	r3, #18
 80053f6:	d107      	bne.n	8005408 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005406:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	9300      	str	r3, [sp, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 f91d 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00d      	beq.n	800543c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d103      	bne.n	8005438 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e035      	b.n	80054a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005444:	d108      	bne.n	8005458 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005446:	897b      	ldrh	r3, [r7, #10]
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005454:	611a      	str	r2, [r3, #16]
 8005456:	e01b      	b.n	8005490 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005458:	897b      	ldrh	r3, [r7, #10]
 800545a:	11db      	asrs	r3, r3, #7
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f003 0306 	and.w	r3, r3, #6
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f063 030f 	orn	r3, r3, #15
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	490e      	ldr	r1, [pc, #56]	; (80054b0 <I2C_MasterRequestWrite+0xfc>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f943 	bl	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e010      	b.n	80054a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	4907      	ldr	r1, [pc, #28]	; (80054b4 <I2C_MasterRequestWrite+0x100>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f933 	bl	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e000      	b.n	80054a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3718      	adds	r7, #24
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	00010008 	.word	0x00010008
 80054b4:	00010002 	.word	0x00010002

080054b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	607a      	str	r2, [r7, #4]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	460b      	mov	r3, r1
 80054c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b08      	cmp	r3, #8
 80054e2:	d006      	beq.n	80054f2 <I2C_MasterRequestRead+0x3a>
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d003      	beq.n	80054f2 <I2C_MasterRequestRead+0x3a>
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054f0:	d108      	bne.n	8005504 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	e00b      	b.n	800551c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	2b11      	cmp	r3, #17
 800550a:	d107      	bne.n	800551c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800551a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f000 f893 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00d      	beq.n	8005550 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005542:	d103      	bne.n	800554c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e079      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005558:	d108      	bne.n	800556c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800555a:	897b      	ldrh	r3, [r7, #10]
 800555c:	b2db      	uxtb	r3, r3
 800555e:	f043 0301 	orr.w	r3, r3, #1
 8005562:	b2da      	uxtb	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	611a      	str	r2, [r3, #16]
 800556a:	e05f      	b.n	800562c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800556c:	897b      	ldrh	r3, [r7, #10]
 800556e:	11db      	asrs	r3, r3, #7
 8005570:	b2db      	uxtb	r3, r3
 8005572:	f003 0306 	and.w	r3, r3, #6
 8005576:	b2db      	uxtb	r3, r3
 8005578:	f063 030f 	orn	r3, r3, #15
 800557c:	b2da      	uxtb	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	4930      	ldr	r1, [pc, #192]	; (800564c <I2C_MasterRequestRead+0x194>)
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f8b9 	bl	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e054      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800559a:	897b      	ldrh	r3, [r7, #10]
 800559c:	b2da      	uxtb	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4929      	ldr	r1, [pc, #164]	; (8005650 <I2C_MasterRequestRead+0x198>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f8a9 	bl	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e044      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	9300      	str	r3, [sp, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 f831 	bl	8005654 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00d      	beq.n	8005614 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005606:	d103      	bne.n	8005610 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e017      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	11db      	asrs	r3, r3, #7
 8005618:	b2db      	uxtb	r3, r3
 800561a:	f003 0306 	and.w	r3, r3, #6
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f063 030e 	orn	r3, r3, #14
 8005624:	b2da      	uxtb	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4907      	ldr	r1, [pc, #28]	; (8005650 <I2C_MasterRequestRead+0x198>)
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f000 f865 	bl	8005702 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	00010008 	.word	0x00010008
 8005650:	00010002 	.word	0x00010002

08005654 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	4613      	mov	r3, r2
 8005662:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005664:	e025      	b.n	80056b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800566c:	d021      	beq.n	80056b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566e:	f7fd f943 	bl	80028f8 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d302      	bcc.n	8005684 <I2C_WaitOnFlagUntilTimeout+0x30>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d116      	bne.n	80056b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2220      	movs	r2, #32
 800568e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	f043 0220 	orr.w	r2, r3, #32
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e023      	b.n	80056fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10d      	bne.n	80056d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	43da      	mvns	r2, r3
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4013      	ands	r3, r2
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf0c      	ite	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	2300      	movne	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	461a      	mov	r2, r3
 80056d6:	e00c      	b.n	80056f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	43da      	mvns	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf0c      	ite	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	2300      	movne	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	461a      	mov	r2, r3
 80056f2:	79fb      	ldrb	r3, [r7, #7]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d0b6      	beq.n	8005666 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005710:	e051      	b.n	80057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005720:	d123      	bne.n	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005730:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800573a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005756:	f043 0204 	orr.w	r2, r3, #4
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e046      	b.n	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005770:	d021      	beq.n	80057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005772:	f7fd f8c1 	bl	80028f8 <HAL_GetTick>
 8005776:	4602      	mov	r2, r0
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d302      	bcc.n	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d116      	bne.n	80057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e020      	b.n	80057f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	0c1b      	lsrs	r3, r3, #16
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d10c      	bne.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	43da      	mvns	r2, r3
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4013      	ands	r3, r2
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	bf14      	ite	ne
 80057d2:	2301      	movne	r3, #1
 80057d4:	2300      	moveq	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	e00b      	b.n	80057f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	43da      	mvns	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4013      	ands	r3, r2
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	bf14      	ite	ne
 80057ec:	2301      	movne	r3, #1
 80057ee:	2300      	moveq	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d18d      	bne.n	8005712 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800580c:	e02d      	b.n	800586a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 f8ce 	bl	80059b0 <I2C_IsAcknowledgeFailed>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e02d      	b.n	800587a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005824:	d021      	beq.n	800586a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005826:	f7fd f867 	bl	80028f8 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	429a      	cmp	r2, r3
 8005834:	d302      	bcc.n	800583c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d116      	bne.n	800586a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	f043 0220 	orr.w	r2, r3, #32
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e007      	b.n	800587a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	695b      	ldr	r3, [r3, #20]
 8005870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005874:	2b80      	cmp	r3, #128	; 0x80
 8005876:	d1ca      	bne.n	800580e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800588e:	e02d      	b.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f88d 	bl	80059b0 <I2C_IsAcknowledgeFailed>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e02d      	b.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058a6:	d021      	beq.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a8:	f7fd f826 	bl	80028f8 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d302      	bcc.n	80058be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d116      	bne.n	80058ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2220      	movs	r2, #32
 80058c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	f043 0220 	orr.w	r2, r3, #32
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e007      	b.n	80058fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0304 	and.w	r3, r3, #4
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d1ca      	bne.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005910:	e042      	b.n	8005998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	f003 0310 	and.w	r3, r3, #16
 800591c:	2b10      	cmp	r3, #16
 800591e:	d119      	bne.n	8005954 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0210 	mvn.w	r2, #16
 8005928:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e029      	b.n	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005954:	f7fc ffd0 	bl	80028f8 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	d302      	bcc.n	800596a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d116      	bne.n	8005998 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	f043 0220 	orr.w	r2, r3, #32
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e007      	b.n	80059a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d1b5      	bne.n	8005912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059c6:	d11b      	bne.n	8005a00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ec:	f043 0204 	orr.w	r2, r3, #4
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e267      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d075      	beq.n	8005b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a2e:	4b88      	ldr	r3, [pc, #544]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d00c      	beq.n	8005a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a3a:	4b85      	ldr	r3, [pc, #532]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d112      	bne.n	8005a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a46:	4b82      	ldr	r3, [pc, #520]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a52:	d10b      	bne.n	8005a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a54:	4b7e      	ldr	r3, [pc, #504]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d05b      	beq.n	8005b18 <HAL_RCC_OscConfig+0x108>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d157      	bne.n	8005b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e242      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a74:	d106      	bne.n	8005a84 <HAL_RCC_OscConfig+0x74>
 8005a76:	4b76      	ldr	r3, [pc, #472]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a75      	ldr	r2, [pc, #468]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e01d      	b.n	8005ac0 <HAL_RCC_OscConfig+0xb0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x98>
 8005a8e:	4b70      	ldr	r3, [pc, #448]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a6f      	ldr	r2, [pc, #444]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	4b6d      	ldr	r3, [pc, #436]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a6c      	ldr	r2, [pc, #432]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e00b      	b.n	8005ac0 <HAL_RCC_OscConfig+0xb0>
 8005aa8:	4b69      	ldr	r3, [pc, #420]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a68      	ldr	r2, [pc, #416]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	4b66      	ldr	r3, [pc, #408]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a65      	ldr	r2, [pc, #404]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d013      	beq.n	8005af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac8:	f7fc ff16 	bl	80028f8 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ad0:	f7fc ff12 	bl	80028f8 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	; 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e207      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae2:	4b5b      	ldr	r3, [pc, #364]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0xc0>
 8005aee:	e014      	b.n	8005b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fc ff02 	bl	80028f8 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005af8:	f7fc fefe 	bl	80028f8 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b64      	cmp	r3, #100	; 0x64
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e1f3      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0a:	4b51      	ldr	r3, [pc, #324]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0xe8>
 8005b16:	e000      	b.n	8005b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d063      	beq.n	8005bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b26:	4b4a      	ldr	r3, [pc, #296]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00b      	beq.n	8005b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b32:	4b47      	ldr	r3, [pc, #284]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d11c      	bne.n	8005b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b3e:	4b44      	ldr	r3, [pc, #272]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d116      	bne.n	8005b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b4a:	4b41      	ldr	r3, [pc, #260]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_RCC_OscConfig+0x152>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d001      	beq.n	8005b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e1c7      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b62:	4b3b      	ldr	r3, [pc, #236]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4937      	ldr	r1, [pc, #220]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b76:	e03a      	b.n	8005bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d020      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b80:	4b34      	ldr	r3, [pc, #208]	; (8005c54 <HAL_RCC_OscConfig+0x244>)
 8005b82:	2201      	movs	r2, #1
 8005b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b86:	f7fc feb7 	bl	80028f8 <HAL_GetTick>
 8005b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8c:	e008      	b.n	8005ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b8e:	f7fc feb3 	bl	80028f8 <HAL_GetTick>
 8005b92:	4602      	mov	r2, r0
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d901      	bls.n	8005ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e1a8      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0f0      	beq.n	8005b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bac:	4b28      	ldr	r3, [pc, #160]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4925      	ldr	r1, [pc, #148]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	600b      	str	r3, [r1, #0]
 8005bc0:	e015      	b.n	8005bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bc2:	4b24      	ldr	r3, [pc, #144]	; (8005c54 <HAL_RCC_OscConfig+0x244>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fc fe96 	bl	80028f8 <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd0:	f7fc fe92 	bl	80028f8 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e187      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005be2:	4b1b      	ldr	r3, [pc, #108]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1f0      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d036      	beq.n	8005c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d016      	beq.n	8005c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <HAL_RCC_OscConfig+0x248>)
 8005c04:	2201      	movs	r2, #1
 8005c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c08:	f7fc fe76 	bl	80028f8 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c10:	f7fc fe72 	bl	80028f8 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e167      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <HAL_RCC_OscConfig+0x240>)
 8005c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0f0      	beq.n	8005c10 <HAL_RCC_OscConfig+0x200>
 8005c2e:	e01b      	b.n	8005c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_RCC_OscConfig+0x248>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c36:	f7fc fe5f 	bl	80028f8 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c3c:	e00e      	b.n	8005c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c3e:	f7fc fe5b 	bl	80028f8 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d907      	bls.n	8005c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e150      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
 8005c50:	40023800 	.word	0x40023800
 8005c54:	42470000 	.word	0x42470000
 8005c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c5c:	4b88      	ldr	r3, [pc, #544]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1ea      	bne.n	8005c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0304 	and.w	r3, r3, #4
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f000 8097 	beq.w	8005da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c76:	2300      	movs	r3, #0
 8005c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c7a:	4b81      	ldr	r3, [pc, #516]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10f      	bne.n	8005ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c86:	2300      	movs	r3, #0
 8005c88:	60bb      	str	r3, [r7, #8]
 8005c8a:	4b7d      	ldr	r3, [pc, #500]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	4a7c      	ldr	r2, [pc, #496]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6413      	str	r3, [r2, #64]	; 0x40
 8005c96:	4b7a      	ldr	r3, [pc, #488]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c9e:	60bb      	str	r3, [r7, #8]
 8005ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca6:	4b77      	ldr	r3, [pc, #476]	; (8005e84 <HAL_RCC_OscConfig+0x474>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d118      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cb2:	4b74      	ldr	r3, [pc, #464]	; (8005e84 <HAL_RCC_OscConfig+0x474>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a73      	ldr	r2, [pc, #460]	; (8005e84 <HAL_RCC_OscConfig+0x474>)
 8005cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cbe:	f7fc fe1b 	bl	80028f8 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc6:	f7fc fe17 	bl	80028f8 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e10c      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd8:	4b6a      	ldr	r3, [pc, #424]	; (8005e84 <HAL_RCC_OscConfig+0x474>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d0f0      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d106      	bne.n	8005cfa <HAL_RCC_OscConfig+0x2ea>
 8005cec:	4b64      	ldr	r3, [pc, #400]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf0:	4a63      	ldr	r2, [pc, #396]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005cf2:	f043 0301 	orr.w	r3, r3, #1
 8005cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8005cf8:	e01c      	b.n	8005d34 <HAL_RCC_OscConfig+0x324>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	d10c      	bne.n	8005d1c <HAL_RCC_OscConfig+0x30c>
 8005d02:	4b5f      	ldr	r3, [pc, #380]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	4a5e      	ldr	r2, [pc, #376]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d08:	f043 0304 	orr.w	r3, r3, #4
 8005d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0e:	4b5c      	ldr	r3, [pc, #368]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a5b      	ldr	r2, [pc, #364]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d14:	f043 0301 	orr.w	r3, r3, #1
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	e00b      	b.n	8005d34 <HAL_RCC_OscConfig+0x324>
 8005d1c:	4b58      	ldr	r3, [pc, #352]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	4a57      	ldr	r2, [pc, #348]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d22:	f023 0301 	bic.w	r3, r3, #1
 8005d26:	6713      	str	r3, [r2, #112]	; 0x70
 8005d28:	4b55      	ldr	r3, [pc, #340]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2c:	4a54      	ldr	r2, [pc, #336]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	f023 0304 	bic.w	r3, r3, #4
 8005d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d015      	beq.n	8005d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fc fddc 	bl	80028f8 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d42:	e00a      	b.n	8005d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d44:	f7fc fdd8 	bl	80028f8 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e0cb      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d5a:	4b49      	ldr	r3, [pc, #292]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0ee      	beq.n	8005d44 <HAL_RCC_OscConfig+0x334>
 8005d66:	e014      	b.n	8005d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d68:	f7fc fdc6 	bl	80028f8 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d6e:	e00a      	b.n	8005d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d70:	f7fc fdc2 	bl	80028f8 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0b5      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d86:	4b3e      	ldr	r3, [pc, #248]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1ee      	bne.n	8005d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d105      	bne.n	8005da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d98:	4b39      	ldr	r3, [pc, #228]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	4a38      	ldr	r2, [pc, #224]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 80a1 	beq.w	8005ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dae:	4b34      	ldr	r3, [pc, #208]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b08      	cmp	r3, #8
 8005db8:	d05c      	beq.n	8005e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b02      	cmp	r3, #2
 8005dc0:	d141      	bne.n	8005e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc2:	4b31      	ldr	r3, [pc, #196]	; (8005e88 <HAL_RCC_OscConfig+0x478>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc8:	f7fc fd96 	bl	80028f8 <HAL_GetTick>
 8005dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dce:	e008      	b.n	8005de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dd0:	f7fc fd92 	bl	80028f8 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d901      	bls.n	8005de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e087      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005de2:	4b27      	ldr	r3, [pc, #156]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1f0      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfc:	019b      	lsls	r3, r3, #6
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	3b01      	subs	r3, #1
 8005e08:	041b      	lsls	r3, r3, #16
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e10:	061b      	lsls	r3, r3, #24
 8005e12:	491b      	ldr	r1, [pc, #108]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e18:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <HAL_RCC_OscConfig+0x478>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1e:	f7fc fd6b 	bl	80028f8 <HAL_GetTick>
 8005e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e26:	f7fc fd67 	bl	80028f8 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e05c      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e38:	4b11      	ldr	r3, [pc, #68]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0f0      	beq.n	8005e26 <HAL_RCC_OscConfig+0x416>
 8005e44:	e054      	b.n	8005ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e46:	4b10      	ldr	r3, [pc, #64]	; (8005e88 <HAL_RCC_OscConfig+0x478>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e4c:	f7fc fd54 	bl	80028f8 <HAL_GetTick>
 8005e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e54:	f7fc fd50 	bl	80028f8 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e045      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e66:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <HAL_RCC_OscConfig+0x470>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f0      	bne.n	8005e54 <HAL_RCC_OscConfig+0x444>
 8005e72:	e03d      	b.n	8005ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d107      	bne.n	8005e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e038      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
 8005e80:	40023800 	.word	0x40023800
 8005e84:	40007000 	.word	0x40007000
 8005e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e8c:	4b1b      	ldr	r3, [pc, #108]	; (8005efc <HAL_RCC_OscConfig+0x4ec>)
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d028      	beq.n	8005eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d121      	bne.n	8005eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d11a      	bne.n	8005eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eb6:	68fa      	ldr	r2, [r7, #12]
 8005eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d111      	bne.n	8005eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed2:	085b      	lsrs	r3, r3, #1
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d107      	bne.n	8005eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	40023800 	.word	0x40023800

08005f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e0cc      	b.n	80060ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f14:	4b68      	ldr	r3, [pc, #416]	; (80060b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d90c      	bls.n	8005f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f22:	4b65      	ldr	r3, [pc, #404]	; (80060b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2a:	4b63      	ldr	r3, [pc, #396]	; (80060b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0307 	and.w	r3, r3, #7
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d001      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0b8      	b.n	80060ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0302 	and.w	r3, r3, #2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d020      	beq.n	8005f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0304 	and.w	r3, r3, #4
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f54:	4b59      	ldr	r3, [pc, #356]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4a58      	ldr	r2, [pc, #352]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0308 	and.w	r3, r3, #8
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f6c:	4b53      	ldr	r3, [pc, #332]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4a52      	ldr	r2, [pc, #328]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f78:	4b50      	ldr	r3, [pc, #320]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	494d      	ldr	r1, [pc, #308]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d044      	beq.n	8006020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d107      	bne.n	8005fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f9e:	4b47      	ldr	r3, [pc, #284]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d119      	bne.n	8005fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e07f      	b.n	80060ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d003      	beq.n	8005fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d107      	bne.n	8005fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d109      	bne.n	8005fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e06f      	b.n	80060ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fce:	4b3b      	ldr	r3, [pc, #236]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d101      	bne.n	8005fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e067      	b.n	80060ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fde:	4b37      	ldr	r3, [pc, #220]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f023 0203 	bic.w	r2, r3, #3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4934      	ldr	r1, [pc, #208]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ff0:	f7fc fc82 	bl	80028f8 <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ff8:	f7fc fc7e 	bl	80028f8 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e04f      	b.n	80060ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800600e:	4b2b      	ldr	r3, [pc, #172]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f003 020c 	and.w	r2, r3, #12
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	429a      	cmp	r2, r3
 800601e:	d1eb      	bne.n	8005ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006020:	4b25      	ldr	r3, [pc, #148]	; (80060b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d20c      	bcs.n	8006048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800602e:	4b22      	ldr	r3, [pc, #136]	; (80060b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006036:	4b20      	ldr	r3, [pc, #128]	; (80060b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d001      	beq.n	8006048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e032      	b.n	80060ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b00      	cmp	r3, #0
 8006052:	d008      	beq.n	8006066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006054:	4b19      	ldr	r3, [pc, #100]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	4916      	ldr	r1, [pc, #88]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	4313      	orrs	r3, r2
 8006064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b00      	cmp	r3, #0
 8006070:	d009      	beq.n	8006086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006072:	4b12      	ldr	r3, [pc, #72]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	00db      	lsls	r3, r3, #3
 8006080:	490e      	ldr	r1, [pc, #56]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 8006082:	4313      	orrs	r3, r2
 8006084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006086:	f000 f821 	bl	80060cc <HAL_RCC_GetSysClockFreq>
 800608a:	4602      	mov	r2, r0
 800608c:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	091b      	lsrs	r3, r3, #4
 8006092:	f003 030f 	and.w	r3, r3, #15
 8006096:	490a      	ldr	r1, [pc, #40]	; (80060c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006098:	5ccb      	ldrb	r3, [r1, r3]
 800609a:	fa22 f303 	lsr.w	r3, r2, r3
 800609e:	4a09      	ldr	r2, [pc, #36]	; (80060c4 <HAL_RCC_ClockConfig+0x1c4>)
 80060a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <HAL_RCC_ClockConfig+0x1c8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7fc fbe2 	bl	8002870 <HAL_InitTick>

  return HAL_OK;
 80060ac:	2300      	movs	r3, #0
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40023c00 	.word	0x40023c00
 80060bc:	40023800 	.word	0x40023800
 80060c0:	08008ca4 	.word	0x08008ca4
 80060c4:	2000000c 	.word	0x2000000c
 80060c8:	20000010 	.word	0x20000010

080060cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d0:	b090      	sub	sp, #64	; 0x40
 80060d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
 80060d8:	2300      	movs	r3, #0
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060dc:	2300      	movs	r3, #0
 80060de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060e4:	4b59      	ldr	r3, [pc, #356]	; (800624c <HAL_RCC_GetSysClockFreq+0x180>)
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f003 030c 	and.w	r3, r3, #12
 80060ec:	2b08      	cmp	r3, #8
 80060ee:	d00d      	beq.n	800610c <HAL_RCC_GetSysClockFreq+0x40>
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	f200 80a1 	bhi.w	8006238 <HAL_RCC_GetSysClockFreq+0x16c>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d002      	beq.n	8006100 <HAL_RCC_GetSysClockFreq+0x34>
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d003      	beq.n	8006106 <HAL_RCC_GetSysClockFreq+0x3a>
 80060fe:	e09b      	b.n	8006238 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006100:	4b53      	ldr	r3, [pc, #332]	; (8006250 <HAL_RCC_GetSysClockFreq+0x184>)
 8006102:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006104:	e09b      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006106:	4b53      	ldr	r3, [pc, #332]	; (8006254 <HAL_RCC_GetSysClockFreq+0x188>)
 8006108:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800610a:	e098      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800610c:	4b4f      	ldr	r3, [pc, #316]	; (800624c <HAL_RCC_GetSysClockFreq+0x180>)
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006114:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006116:	4b4d      	ldr	r3, [pc, #308]	; (800624c <HAL_RCC_GetSysClockFreq+0x180>)
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d028      	beq.n	8006174 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006122:	4b4a      	ldr	r3, [pc, #296]	; (800624c <HAL_RCC_GetSysClockFreq+0x180>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	099b      	lsrs	r3, r3, #6
 8006128:	2200      	movs	r2, #0
 800612a:	623b      	str	r3, [r7, #32]
 800612c:	627a      	str	r2, [r7, #36]	; 0x24
 800612e:	6a3b      	ldr	r3, [r7, #32]
 8006130:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006134:	2100      	movs	r1, #0
 8006136:	4b47      	ldr	r3, [pc, #284]	; (8006254 <HAL_RCC_GetSysClockFreq+0x188>)
 8006138:	fb03 f201 	mul.w	r2, r3, r1
 800613c:	2300      	movs	r3, #0
 800613e:	fb00 f303 	mul.w	r3, r0, r3
 8006142:	4413      	add	r3, r2
 8006144:	4a43      	ldr	r2, [pc, #268]	; (8006254 <HAL_RCC_GetSysClockFreq+0x188>)
 8006146:	fba0 1202 	umull	r1, r2, r0, r2
 800614a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800614c:	460a      	mov	r2, r1
 800614e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006152:	4413      	add	r3, r2
 8006154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006158:	2200      	movs	r2, #0
 800615a:	61bb      	str	r3, [r7, #24]
 800615c:	61fa      	str	r2, [r7, #28]
 800615e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006166:	f7fa fd29 	bl	8000bbc <__aeabi_uldivmod>
 800616a:	4602      	mov	r2, r0
 800616c:	460b      	mov	r3, r1
 800616e:	4613      	mov	r3, r2
 8006170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006172:	e053      	b.n	800621c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006174:	4b35      	ldr	r3, [pc, #212]	; (800624c <HAL_RCC_GetSysClockFreq+0x180>)
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	099b      	lsrs	r3, r3, #6
 800617a:	2200      	movs	r2, #0
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	617a      	str	r2, [r7, #20]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006186:	f04f 0b00 	mov.w	fp, #0
 800618a:	4652      	mov	r2, sl
 800618c:	465b      	mov	r3, fp
 800618e:	f04f 0000 	mov.w	r0, #0
 8006192:	f04f 0100 	mov.w	r1, #0
 8006196:	0159      	lsls	r1, r3, #5
 8006198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800619c:	0150      	lsls	r0, r2, #5
 800619e:	4602      	mov	r2, r0
 80061a0:	460b      	mov	r3, r1
 80061a2:	ebb2 080a 	subs.w	r8, r2, sl
 80061a6:	eb63 090b 	sbc.w	r9, r3, fp
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80061b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80061ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80061be:	ebb2 0408 	subs.w	r4, r2, r8
 80061c2:	eb63 0509 	sbc.w	r5, r3, r9
 80061c6:	f04f 0200 	mov.w	r2, #0
 80061ca:	f04f 0300 	mov.w	r3, #0
 80061ce:	00eb      	lsls	r3, r5, #3
 80061d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061d4:	00e2      	lsls	r2, r4, #3
 80061d6:	4614      	mov	r4, r2
 80061d8:	461d      	mov	r5, r3
 80061da:	eb14 030a 	adds.w	r3, r4, sl
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	eb45 030b 	adc.w	r3, r5, fp
 80061e4:	607b      	str	r3, [r7, #4]
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80061f2:	4629      	mov	r1, r5
 80061f4:	028b      	lsls	r3, r1, #10
 80061f6:	4621      	mov	r1, r4
 80061f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80061fc:	4621      	mov	r1, r4
 80061fe:	028a      	lsls	r2, r1, #10
 8006200:	4610      	mov	r0, r2
 8006202:	4619      	mov	r1, r3
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	2200      	movs	r2, #0
 8006208:	60bb      	str	r3, [r7, #8]
 800620a:	60fa      	str	r2, [r7, #12]
 800620c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006210:	f7fa fcd4 	bl	8000bbc <__aeabi_uldivmod>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4613      	mov	r3, r2
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <HAL_RCC_GetSysClockFreq+0x180>)
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	0c1b      	lsrs	r3, r3, #16
 8006222:	f003 0303 	and.w	r3, r3, #3
 8006226:	3301      	adds	r3, #1
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800622c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	fbb2 f3f3 	udiv	r3, r2, r3
 8006234:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006236:	e002      	b.n	800623e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <HAL_RCC_GetSysClockFreq+0x184>)
 800623a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800623c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800623e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006240:	4618      	mov	r0, r3
 8006242:	3740      	adds	r7, #64	; 0x40
 8006244:	46bd      	mov	sp, r7
 8006246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800624a:	bf00      	nop
 800624c:	40023800 	.word	0x40023800
 8006250:	00f42400 	.word	0x00f42400
 8006254:	017d7840 	.word	0x017d7840

08006258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <HAL_RCC_GetHCLKFreq+0x14>)
 800625e:	681b      	ldr	r3, [r3, #0]
}
 8006260:	4618      	mov	r0, r3
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	2000000c 	.word	0x2000000c

08006270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006274:	f7ff fff0 	bl	8006258 <HAL_RCC_GetHCLKFreq>
 8006278:	4602      	mov	r2, r0
 800627a:	4b05      	ldr	r3, [pc, #20]	; (8006290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	0a9b      	lsrs	r3, r3, #10
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	4903      	ldr	r1, [pc, #12]	; (8006294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006286:	5ccb      	ldrb	r3, [r1, r3]
 8006288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800628c:	4618      	mov	r0, r3
 800628e:	bd80      	pop	{r7, pc}
 8006290:	40023800 	.word	0x40023800
 8006294:	08008cb4 	.word	0x08008cb4

08006298 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e041      	b.n	800632e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d106      	bne.n	80062c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7fc fa0a 	bl	80026d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3304      	adds	r3, #4
 80062d4:	4619      	mov	r1, r3
 80062d6:	4610      	mov	r0, r2
 80062d8:	f000 fd16 	bl	8006d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b01      	cmp	r3, #1
 800634a:	d001      	beq.n	8006350 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e04e      	b.n	80063ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2202      	movs	r2, #2
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a23      	ldr	r2, [pc, #140]	; (80063fc <HAL_TIM_Base_Start_IT+0xc4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d022      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x80>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800637a:	d01d      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x80>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a1f      	ldr	r2, [pc, #124]	; (8006400 <HAL_TIM_Base_Start_IT+0xc8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d018      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x80>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a1e      	ldr	r2, [pc, #120]	; (8006404 <HAL_TIM_Base_Start_IT+0xcc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d013      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x80>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1c      	ldr	r2, [pc, #112]	; (8006408 <HAL_TIM_Base_Start_IT+0xd0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00e      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x80>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1b      	ldr	r2, [pc, #108]	; (800640c <HAL_TIM_Base_Start_IT+0xd4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d009      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x80>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <HAL_TIM_Base_Start_IT+0xd8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d004      	beq.n	80063b8 <HAL_TIM_Base_Start_IT+0x80>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_TIM_Base_Start_IT+0xdc>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d111      	bne.n	80063dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b06      	cmp	r3, #6
 80063c8:	d010      	beq.n	80063ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f042 0201 	orr.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063da:	e007      	b.n	80063ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40010000 	.word	0x40010000
 8006400:	40000400 	.word	0x40000400
 8006404:	40000800 	.word	0x40000800
 8006408:	40000c00 	.word	0x40000c00
 800640c:	40010400 	.word	0x40010400
 8006410:	40014000 	.word	0x40014000
 8006414:	40001800 	.word	0x40001800

08006418 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e041      	b.n	80064ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fc f88a 	bl	8002558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f000 fc56 	bl	8006d08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d109      	bne.n	80064dc <HAL_TIM_PWM_Start+0x24>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	bf14      	ite	ne
 80064d4:	2301      	movne	r3, #1
 80064d6:	2300      	moveq	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	e022      	b.n	8006522 <HAL_TIM_PWM_Start+0x6a>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d109      	bne.n	80064f6 <HAL_TIM_PWM_Start+0x3e>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	bf14      	ite	ne
 80064ee:	2301      	movne	r3, #1
 80064f0:	2300      	moveq	r3, #0
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	e015      	b.n	8006522 <HAL_TIM_PWM_Start+0x6a>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b08      	cmp	r3, #8
 80064fa:	d109      	bne.n	8006510 <HAL_TIM_PWM_Start+0x58>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	e008      	b.n	8006522 <HAL_TIM_PWM_Start+0x6a>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e07c      	b.n	8006624 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d104      	bne.n	800653a <HAL_TIM_PWM_Start+0x82>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2202      	movs	r2, #2
 8006534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006538:	e013      	b.n	8006562 <HAL_TIM_PWM_Start+0xaa>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b04      	cmp	r3, #4
 800653e:	d104      	bne.n	800654a <HAL_TIM_PWM_Start+0x92>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006548:	e00b      	b.n	8006562 <HAL_TIM_PWM_Start+0xaa>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b08      	cmp	r3, #8
 800654e:	d104      	bne.n	800655a <HAL_TIM_PWM_Start+0xa2>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006558:	e003      	b.n	8006562 <HAL_TIM_PWM_Start+0xaa>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2202      	movs	r2, #2
 800655e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2201      	movs	r2, #1
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 feb6 	bl	80072dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a2d      	ldr	r2, [pc, #180]	; (800662c <HAL_TIM_PWM_Start+0x174>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_TIM_PWM_Start+0xcc>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a2c      	ldr	r2, [pc, #176]	; (8006630 <HAL_TIM_PWM_Start+0x178>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d101      	bne.n	8006588 <HAL_TIM_PWM_Start+0xd0>
 8006584:	2301      	movs	r3, #1
 8006586:	e000      	b.n	800658a <HAL_TIM_PWM_Start+0xd2>
 8006588:	2300      	movs	r3, #0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800659c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a22      	ldr	r2, [pc, #136]	; (800662c <HAL_TIM_PWM_Start+0x174>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d022      	beq.n	80065ee <HAL_TIM_PWM_Start+0x136>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d01d      	beq.n	80065ee <HAL_TIM_PWM_Start+0x136>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <HAL_TIM_PWM_Start+0x17c>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d018      	beq.n	80065ee <HAL_TIM_PWM_Start+0x136>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <HAL_TIM_PWM_Start+0x180>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_TIM_PWM_Start+0x136>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1c      	ldr	r2, [pc, #112]	; (800663c <HAL_TIM_PWM_Start+0x184>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_TIM_PWM_Start+0x136>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a16      	ldr	r2, [pc, #88]	; (8006630 <HAL_TIM_PWM_Start+0x178>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_TIM_PWM_Start+0x136>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a18      	ldr	r2, [pc, #96]	; (8006640 <HAL_TIM_PWM_Start+0x188>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_TIM_PWM_Start+0x136>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a16      	ldr	r2, [pc, #88]	; (8006644 <HAL_TIM_PWM_Start+0x18c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d111      	bne.n	8006612 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0307 	and.w	r3, r3, #7
 80065f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b06      	cmp	r3, #6
 80065fe:	d010      	beq.n	8006622 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 0201 	orr.w	r2, r2, #1
 800660e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006610:	e007      	b.n	8006622 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f042 0201 	orr.w	r2, r2, #1
 8006620:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3710      	adds	r7, #16
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40010000 	.word	0x40010000
 8006630:	40010400 	.word	0x40010400
 8006634:	40000400 	.word	0x40000400
 8006638:	40000800 	.word	0x40000800
 800663c:	40000c00 	.word	0x40000c00
 8006640:	40014000 	.word	0x40014000
 8006644:	40001800 	.word	0x40001800

08006648 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e097      	b.n	800678c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b00      	cmp	r3, #0
 8006666:	d106      	bne.n	8006676 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fb ff93 	bl	800259c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800668c:	f023 0307 	bic.w	r3, r3, #7
 8006690:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f000 fb33 	bl	8006d08 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699b      	ldr	r3, [r3, #24]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6a1b      	ldr	r3, [r3, #32]
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	021b      	lsls	r3, r3, #8
 80066da:	4313      	orrs	r3, r2
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80066e8:	f023 030c 	bic.w	r3, r3, #12
 80066ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	4313      	orrs	r3, r2
 8006706:	693a      	ldr	r2, [r7, #16]
 8006708:	4313      	orrs	r3, r2
 800670a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	011a      	lsls	r2, r3, #4
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	031b      	lsls	r3, r3, #12
 8006718:	4313      	orrs	r3, r2
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006726:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685a      	ldr	r2, [r3, #4]
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	4313      	orrs	r3, r2
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b02      	cmp	r3, #2
 80067a8:	d122      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0302 	and.w	r3, r3, #2
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d11b      	bne.n	80067f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0202 	mvn.w	r2, #2
 80067c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	f003 0303 	and.w	r3, r3, #3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fa77 	bl	8006cca <HAL_TIM_IC_CaptureCallback>
 80067dc:	e005      	b.n	80067ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fa69 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f000 fa7a 	bl	8006cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	f003 0304 	and.w	r3, r3, #4
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d122      	bne.n	8006844 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0304 	and.w	r3, r3, #4
 8006808:	2b04      	cmp	r3, #4
 800680a:	d11b      	bne.n	8006844 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f06f 0204 	mvn.w	r2, #4
 8006814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fa4d 	bl	8006cca <HAL_TIM_IC_CaptureCallback>
 8006830:	e005      	b.n	800683e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa3f 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 fa50 	bl	8006cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	f003 0308 	and.w	r3, r3, #8
 800684e:	2b08      	cmp	r3, #8
 8006850:	d122      	bne.n	8006898 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f003 0308 	and.w	r3, r3, #8
 800685c:	2b08      	cmp	r3, #8
 800685e:	d11b      	bne.n	8006898 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0208 	mvn.w	r2, #8
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2204      	movs	r2, #4
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f003 0303 	and.w	r3, r3, #3
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa23 	bl	8006cca <HAL_TIM_IC_CaptureCallback>
 8006884:	e005      	b.n	8006892 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa15 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fa26 	bl	8006cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b10      	cmp	r3, #16
 80068a4:	d122      	bne.n	80068ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f003 0310 	and.w	r3, r3, #16
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d11b      	bne.n	80068ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0210 	mvn.w	r2, #16
 80068bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2208      	movs	r2, #8
 80068c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	69db      	ldr	r3, [r3, #28]
 80068ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f9f9 	bl	8006cca <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 f9eb 	bl	8006cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f9fc 	bl	8006cde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d10e      	bne.n	8006918 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b01      	cmp	r3, #1
 8006906:	d107      	bne.n	8006918 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f06f 0201 	mvn.w	r2, #1
 8006910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7fb f9bc 	bl	8001c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006922:	2b80      	cmp	r3, #128	; 0x80
 8006924:	d10e      	bne.n	8006944 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d107      	bne.n	8006944 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800693c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fdca 	bl	80074d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d10e      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695c:	2b40      	cmp	r3, #64	; 0x40
 800695e:	d107      	bne.n	8006970 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9c1 	bl	8006cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b20      	cmp	r3, #32
 800697c:	d10e      	bne.n	800699c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b20      	cmp	r3, #32
 800698a:	d107      	bne.n	800699c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0220 	mvn.w	r2, #32
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fd94 	bl	80074c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	60f8      	str	r0, [r7, #12]
 80069ac:	60b9      	str	r1, [r7, #8]
 80069ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069b0:	2300      	movs	r3, #0
 80069b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069be:	2302      	movs	r3, #2
 80069c0:	e0ae      	b.n	8006b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	f200 809f 	bhi.w	8006b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069d2:	a201      	add	r2, pc, #4	; (adr r2, 80069d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d8:	08006a0d 	.word	0x08006a0d
 80069dc:	08006b11 	.word	0x08006b11
 80069e0:	08006b11 	.word	0x08006b11
 80069e4:	08006b11 	.word	0x08006b11
 80069e8:	08006a4d 	.word	0x08006a4d
 80069ec:	08006b11 	.word	0x08006b11
 80069f0:	08006b11 	.word	0x08006b11
 80069f4:	08006b11 	.word	0x08006b11
 80069f8:	08006a8f 	.word	0x08006a8f
 80069fc:	08006b11 	.word	0x08006b11
 8006a00:	08006b11 	.word	0x08006b11
 8006a04:	08006b11 	.word	0x08006b11
 8006a08:	08006acf 	.word	0x08006acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68b9      	ldr	r1, [r7, #8]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f000 fa18 	bl	8006e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	699a      	ldr	r2, [r3, #24]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0208 	orr.w	r2, r2, #8
 8006a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	699a      	ldr	r2, [r3, #24]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0204 	bic.w	r2, r2, #4
 8006a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6999      	ldr	r1, [r3, #24]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	619a      	str	r2, [r3, #24]
      break;
 8006a4a:	e064      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fa68 	bl	8006f28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	699a      	ldr	r2, [r3, #24]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6999      	ldr	r1, [r3, #24]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	021a      	lsls	r2, r3, #8
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	619a      	str	r2, [r3, #24]
      break;
 8006a8c:	e043      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f000 fabd 	bl	8007014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	69da      	ldr	r2, [r3, #28]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f042 0208 	orr.w	r2, r2, #8
 8006aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	69da      	ldr	r2, [r3, #28]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0204 	bic.w	r2, r2, #4
 8006ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	69d9      	ldr	r1, [r3, #28]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	691a      	ldr	r2, [r3, #16]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	61da      	str	r2, [r3, #28]
      break;
 8006acc:	e023      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68b9      	ldr	r1, [r7, #8]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 fb11 	bl	80070fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	69da      	ldr	r2, [r3, #28]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	69d9      	ldr	r1, [r3, #28]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	021a      	lsls	r2, r3, #8
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	61da      	str	r2, [r3, #28]
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	75fb      	strb	r3, [r7, #23]
      break;
 8006b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3718      	adds	r7, #24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIM_ConfigClockSource+0x1c>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e0b4      	b.n	8006cae <HAL_TIM_ConfigClockSource+0x186>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b7c:	d03e      	beq.n	8006bfc <HAL_TIM_ConfigClockSource+0xd4>
 8006b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b82:	f200 8087 	bhi.w	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	f000 8086 	beq.w	8006c9a <HAL_TIM_ConfigClockSource+0x172>
 8006b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b92:	d87f      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b94:	2b70      	cmp	r3, #112	; 0x70
 8006b96:	d01a      	beq.n	8006bce <HAL_TIM_ConfigClockSource+0xa6>
 8006b98:	2b70      	cmp	r3, #112	; 0x70
 8006b9a:	d87b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006b9c:	2b60      	cmp	r3, #96	; 0x60
 8006b9e:	d050      	beq.n	8006c42 <HAL_TIM_ConfigClockSource+0x11a>
 8006ba0:	2b60      	cmp	r3, #96	; 0x60
 8006ba2:	d877      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba4:	2b50      	cmp	r3, #80	; 0x50
 8006ba6:	d03c      	beq.n	8006c22 <HAL_TIM_ConfigClockSource+0xfa>
 8006ba8:	2b50      	cmp	r3, #80	; 0x50
 8006baa:	d873      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d058      	beq.n	8006c62 <HAL_TIM_ConfigClockSource+0x13a>
 8006bb0:	2b40      	cmp	r3, #64	; 0x40
 8006bb2:	d86f      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb4:	2b30      	cmp	r3, #48	; 0x30
 8006bb6:	d064      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d86b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d060      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d867      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d05c      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bc8:	2b10      	cmp	r3, #16
 8006bca:	d05a      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x15a>
 8006bcc:	e062      	b.n	8006c94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6818      	ldr	r0, [r3, #0]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	6899      	ldr	r1, [r3, #8]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f000 fb5d 	bl	800729c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	609a      	str	r2, [r3, #8]
      break;
 8006bfa:	e04f      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6899      	ldr	r1, [r3, #8]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f000 fb46 	bl	800729c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1e:	609a      	str	r2, [r3, #8]
      break;
 8006c20:	e03c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	6859      	ldr	r1, [r3, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f000 faba 	bl	80071a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2150      	movs	r1, #80	; 0x50
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fb13 	bl	8007266 <TIM_ITRx_SetConfig>
      break;
 8006c40:	e02c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6818      	ldr	r0, [r3, #0]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	6859      	ldr	r1, [r3, #4]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f000 fad9 	bl	8007206 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2160      	movs	r1, #96	; 0x60
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f000 fb03 	bl	8007266 <TIM_ITRx_SetConfig>
      break;
 8006c60:	e01c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6818      	ldr	r0, [r3, #0]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6859      	ldr	r1, [r3, #4]
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	f000 fa9a 	bl	80071a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2140      	movs	r1, #64	; 0x40
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 faf3 	bl	8007266 <TIM_ITRx_SetConfig>
      break;
 8006c80:	e00c      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	4610      	mov	r0, r2
 8006c8e:	f000 faea 	bl	8007266 <TIM_ITRx_SetConfig>
      break;
 8006c92:	e003      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	73fb      	strb	r3, [r7, #15]
      break;
 8006c98:	e000      	b.n	8006c9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006c9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3710      	adds	r7, #16
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cbe:	bf00      	nop
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ce6:	bf00      	nop
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a40      	ldr	r2, [pc, #256]	; (8006e1c <TIM_Base_SetConfig+0x114>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d013      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d26:	d00f      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4a3d      	ldr	r2, [pc, #244]	; (8006e20 <TIM_Base_SetConfig+0x118>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00b      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a3c      	ldr	r2, [pc, #240]	; (8006e24 <TIM_Base_SetConfig+0x11c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d007      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a3b      	ldr	r2, [pc, #236]	; (8006e28 <TIM_Base_SetConfig+0x120>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d003      	beq.n	8006d48 <TIM_Base_SetConfig+0x40>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a3a      	ldr	r2, [pc, #232]	; (8006e2c <TIM_Base_SetConfig+0x124>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d108      	bne.n	8006d5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a2f      	ldr	r2, [pc, #188]	; (8006e1c <TIM_Base_SetConfig+0x114>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d02b      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d68:	d027      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a2c      	ldr	r2, [pc, #176]	; (8006e20 <TIM_Base_SetConfig+0x118>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d023      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a2b      	ldr	r2, [pc, #172]	; (8006e24 <TIM_Base_SetConfig+0x11c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d01f      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a2a      	ldr	r2, [pc, #168]	; (8006e28 <TIM_Base_SetConfig+0x120>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01b      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a29      	ldr	r2, [pc, #164]	; (8006e2c <TIM_Base_SetConfig+0x124>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d017      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a28      	ldr	r2, [pc, #160]	; (8006e30 <TIM_Base_SetConfig+0x128>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a27      	ldr	r2, [pc, #156]	; (8006e34 <TIM_Base_SetConfig+0x12c>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d00f      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	4a26      	ldr	r2, [pc, #152]	; (8006e38 <TIM_Base_SetConfig+0x130>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d00b      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4a25      	ldr	r2, [pc, #148]	; (8006e3c <TIM_Base_SetConfig+0x134>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d007      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a24      	ldr	r2, [pc, #144]	; (8006e40 <TIM_Base_SetConfig+0x138>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d003      	beq.n	8006dba <TIM_Base_SetConfig+0xb2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a23      	ldr	r2, [pc, #140]	; (8006e44 <TIM_Base_SetConfig+0x13c>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d108      	bne.n	8006dcc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a0a      	ldr	r2, [pc, #40]	; (8006e1c <TIM_Base_SetConfig+0x114>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_Base_SetConfig+0xf8>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a0c      	ldr	r2, [pc, #48]	; (8006e2c <TIM_Base_SetConfig+0x124>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d103      	bne.n	8006e08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	615a      	str	r2, [r3, #20]
}
 8006e0e:	bf00      	nop
 8006e10:	3714      	adds	r7, #20
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	40010000 	.word	0x40010000
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40010400 	.word	0x40010400
 8006e30:	40014000 	.word	0x40014000
 8006e34:	40014400 	.word	0x40014400
 8006e38:	40014800 	.word	0x40014800
 8006e3c:	40001800 	.word	0x40001800
 8006e40:	40001c00 	.word	0x40001c00
 8006e44:	40002000 	.word	0x40002000

08006e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b087      	sub	sp, #28
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0201 	bic.w	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
 8006e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0303 	bic.w	r3, r3, #3
 8006e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f023 0302 	bic.w	r3, r3, #2
 8006e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a20      	ldr	r2, [pc, #128]	; (8006f20 <TIM_OC1_SetConfig+0xd8>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d003      	beq.n	8006eac <TIM_OC1_SetConfig+0x64>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <TIM_OC1_SetConfig+0xdc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d10c      	bne.n	8006ec6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f023 0308 	bic.w	r3, r3, #8
 8006eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f023 0304 	bic.w	r3, r3, #4
 8006ec4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <TIM_OC1_SetConfig+0xd8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d003      	beq.n	8006ed6 <TIM_OC1_SetConfig+0x8e>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a14      	ldr	r2, [pc, #80]	; (8006f24 <TIM_OC1_SetConfig+0xdc>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d111      	bne.n	8006efa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006edc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ee4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	699b      	ldr	r3, [r3, #24]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	621a      	str	r2, [r3, #32]
}
 8006f14:	bf00      	nop
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	40010000 	.word	0x40010000
 8006f24:	40010400 	.word	0x40010400

08006f28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b087      	sub	sp, #28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	f023 0210 	bic.w	r2, r3, #16
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 0320 	bic.w	r3, r3, #32
 8006f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a22      	ldr	r2, [pc, #136]	; (800700c <TIM_OC2_SetConfig+0xe4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d003      	beq.n	8006f90 <TIM_OC2_SetConfig+0x68>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a21      	ldr	r2, [pc, #132]	; (8007010 <TIM_OC2_SetConfig+0xe8>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d10d      	bne.n	8006fac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006faa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a17      	ldr	r2, [pc, #92]	; (800700c <TIM_OC2_SetConfig+0xe4>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC2_SetConfig+0x94>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a16      	ldr	r2, [pc, #88]	; (8007010 <TIM_OC2_SetConfig+0xe8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d113      	bne.n	8006fe4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40010000 	.word	0x40010000
 8007010:	40010400 	.word	0x40010400

08007014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a1b      	ldr	r3, [r3, #32]
 800702e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f023 0303 	bic.w	r3, r3, #3
 800704a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800705c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a21      	ldr	r2, [pc, #132]	; (80070f4 <TIM_OC3_SetConfig+0xe0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d003      	beq.n	800707a <TIM_OC3_SetConfig+0x66>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a20      	ldr	r2, [pc, #128]	; (80070f8 <TIM_OC3_SetConfig+0xe4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d10d      	bne.n	8007096 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a16      	ldr	r2, [pc, #88]	; (80070f4 <TIM_OC3_SetConfig+0xe0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d003      	beq.n	80070a6 <TIM_OC3_SetConfig+0x92>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a15      	ldr	r2, [pc, #84]	; (80070f8 <TIM_OC3_SetConfig+0xe4>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d113      	bne.n	80070ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	011b      	lsls	r3, r3, #4
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68fa      	ldr	r2, [r7, #12]
 80070d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	621a      	str	r2, [r3, #32]
}
 80070e8:	bf00      	nop
 80070ea:	371c      	adds	r7, #28
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	40010000 	.word	0x40010000
 80070f8:	40010400 	.word	0x40010400

080070fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800712a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007132:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	021b      	lsls	r3, r3, #8
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4313      	orrs	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007146:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	031b      	lsls	r3, r3, #12
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	4313      	orrs	r3, r2
 8007152:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a12      	ldr	r2, [pc, #72]	; (80071a0 <TIM_OC4_SetConfig+0xa4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_OC4_SetConfig+0x68>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a11      	ldr	r2, [pc, #68]	; (80071a4 <TIM_OC4_SetConfig+0xa8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d109      	bne.n	8007178 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800716a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	695b      	ldr	r3, [r3, #20]
 8007170:	019b      	lsls	r3, r3, #6
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	4313      	orrs	r3, r2
 8007176:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	68fa      	ldr	r2, [r7, #12]
 8007182:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685a      	ldr	r2, [r3, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	621a      	str	r2, [r3, #32]
}
 8007192:	bf00      	nop
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40010400 	.word	0x40010400

080071a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b087      	sub	sp, #28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	f023 0201 	bic.w	r2, r3, #1
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f023 030a 	bic.w	r3, r3, #10
 80071e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	621a      	str	r2, [r3, #32]
}
 80071fa:	bf00      	nop
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007206:	b480      	push	{r7}
 8007208:	b087      	sub	sp, #28
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0210 	bic.w	r2, r3, #16
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	031b      	lsls	r3, r3, #12
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	011b      	lsls	r3, r3, #4
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4313      	orrs	r3, r2
 800724c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	621a      	str	r2, [r3, #32]
}
 800725a:	bf00      	nop
 800725c:	371c      	adds	r7, #28
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800727c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4313      	orrs	r3, r2
 8007284:	f043 0307 	orr.w	r3, r3, #7
 8007288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	609a      	str	r2, [r3, #8]
}
 8007290:	bf00      	nop
 8007292:	3714      	adds	r7, #20
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800729c:	b480      	push	{r7}
 800729e:	b087      	sub	sp, #28
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	021a      	lsls	r2, r3, #8
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	431a      	orrs	r2, r3
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	609a      	str	r2, [r3, #8]
}
 80072d0:	bf00      	nop
 80072d2:	371c      	adds	r7, #28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	2201      	movs	r2, #1
 80072f0:	fa02 f303 	lsl.w	r3, r2, r3
 80072f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1a      	ldr	r2, [r3, #32]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	43db      	mvns	r3, r3
 80072fe:	401a      	ands	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6a1a      	ldr	r2, [r3, #32]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f003 031f 	and.w	r3, r3, #31
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	fa01 f303 	lsl.w	r3, r1, r3
 8007314:	431a      	orrs	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	621a      	str	r2, [r3, #32]
}
 800731a:	bf00      	nop
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
	...

08007328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800733c:	2302      	movs	r3, #2
 800733e:	e05a      	b.n	80073f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	4313      	orrs	r3, r2
 8007370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a21      	ldr	r2, [pc, #132]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d022      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800738c:	d01d      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d018      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a1b      	ldr	r2, [pc, #108]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d013      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a1a      	ldr	r2, [pc, #104]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a17      	ldr	r2, [pc, #92]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d10c      	bne.n	80073e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3714      	adds	r7, #20
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	40010000 	.word	0x40010000
 8007408:	40000400 	.word	0x40000400
 800740c:	40000800 	.word	0x40000800
 8007410:	40000c00 	.word	0x40000c00
 8007414:	40010400 	.word	0x40010400
 8007418:	40014000 	.word	0x40014000
 800741c:	40001800 	.word	0x40001800

08007420 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007438:	2302      	movs	r3, #2
 800743a:	e03d      	b.n	80074b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80074e0:	bf00      	nop
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <__errno>:
 80074ec:	4b01      	ldr	r3, [pc, #4]	; (80074f4 <__errno+0x8>)
 80074ee:	6818      	ldr	r0, [r3, #0]
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop
 80074f4:	20000018 	.word	0x20000018

080074f8 <__libc_init_array>:
 80074f8:	b570      	push	{r4, r5, r6, lr}
 80074fa:	4d0d      	ldr	r5, [pc, #52]	; (8007530 <__libc_init_array+0x38>)
 80074fc:	4c0d      	ldr	r4, [pc, #52]	; (8007534 <__libc_init_array+0x3c>)
 80074fe:	1b64      	subs	r4, r4, r5
 8007500:	10a4      	asrs	r4, r4, #2
 8007502:	2600      	movs	r6, #0
 8007504:	42a6      	cmp	r6, r4
 8007506:	d109      	bne.n	800751c <__libc_init_array+0x24>
 8007508:	4d0b      	ldr	r5, [pc, #44]	; (8007538 <__libc_init_array+0x40>)
 800750a:	4c0c      	ldr	r4, [pc, #48]	; (800753c <__libc_init_array+0x44>)
 800750c:	f001 fa9e 	bl	8008a4c <_init>
 8007510:	1b64      	subs	r4, r4, r5
 8007512:	10a4      	asrs	r4, r4, #2
 8007514:	2600      	movs	r6, #0
 8007516:	42a6      	cmp	r6, r4
 8007518:	d105      	bne.n	8007526 <__libc_init_array+0x2e>
 800751a:	bd70      	pop	{r4, r5, r6, pc}
 800751c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007520:	4798      	blx	r3
 8007522:	3601      	adds	r6, #1
 8007524:	e7ee      	b.n	8007504 <__libc_init_array+0xc>
 8007526:	f855 3b04 	ldr.w	r3, [r5], #4
 800752a:	4798      	blx	r3
 800752c:	3601      	adds	r6, #1
 800752e:	e7f2      	b.n	8007516 <__libc_init_array+0x1e>
 8007530:	08008dd8 	.word	0x08008dd8
 8007534:	08008dd8 	.word	0x08008dd8
 8007538:	08008dd8 	.word	0x08008dd8
 800753c:	08008ddc 	.word	0x08008ddc

08007540 <memset>:
 8007540:	4402      	add	r2, r0
 8007542:	4603      	mov	r3, r0
 8007544:	4293      	cmp	r3, r2
 8007546:	d100      	bne.n	800754a <memset+0xa>
 8007548:	4770      	bx	lr
 800754a:	f803 1b01 	strb.w	r1, [r3], #1
 800754e:	e7f9      	b.n	8007544 <memset+0x4>

08007550 <iprintf>:
 8007550:	b40f      	push	{r0, r1, r2, r3}
 8007552:	4b0a      	ldr	r3, [pc, #40]	; (800757c <iprintf+0x2c>)
 8007554:	b513      	push	{r0, r1, r4, lr}
 8007556:	681c      	ldr	r4, [r3, #0]
 8007558:	b124      	cbz	r4, 8007564 <iprintf+0x14>
 800755a:	69a3      	ldr	r3, [r4, #24]
 800755c:	b913      	cbnz	r3, 8007564 <iprintf+0x14>
 800755e:	4620      	mov	r0, r4
 8007560:	f000 fa5e 	bl	8007a20 <__sinit>
 8007564:	ab05      	add	r3, sp, #20
 8007566:	9a04      	ldr	r2, [sp, #16]
 8007568:	68a1      	ldr	r1, [r4, #8]
 800756a:	9301      	str	r3, [sp, #4]
 800756c:	4620      	mov	r0, r4
 800756e:	f000 fc67 	bl	8007e40 <_vfiprintf_r>
 8007572:	b002      	add	sp, #8
 8007574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007578:	b004      	add	sp, #16
 800757a:	4770      	bx	lr
 800757c:	20000018 	.word	0x20000018

08007580 <_puts_r>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	460e      	mov	r6, r1
 8007584:	4605      	mov	r5, r0
 8007586:	b118      	cbz	r0, 8007590 <_puts_r+0x10>
 8007588:	6983      	ldr	r3, [r0, #24]
 800758a:	b90b      	cbnz	r3, 8007590 <_puts_r+0x10>
 800758c:	f000 fa48 	bl	8007a20 <__sinit>
 8007590:	69ab      	ldr	r3, [r5, #24]
 8007592:	68ac      	ldr	r4, [r5, #8]
 8007594:	b913      	cbnz	r3, 800759c <_puts_r+0x1c>
 8007596:	4628      	mov	r0, r5
 8007598:	f000 fa42 	bl	8007a20 <__sinit>
 800759c:	4b2c      	ldr	r3, [pc, #176]	; (8007650 <_puts_r+0xd0>)
 800759e:	429c      	cmp	r4, r3
 80075a0:	d120      	bne.n	80075e4 <_puts_r+0x64>
 80075a2:	686c      	ldr	r4, [r5, #4]
 80075a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075a6:	07db      	lsls	r3, r3, #31
 80075a8:	d405      	bmi.n	80075b6 <_puts_r+0x36>
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	0598      	lsls	r0, r3, #22
 80075ae:	d402      	bmi.n	80075b6 <_puts_r+0x36>
 80075b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075b2:	f000 fad3 	bl	8007b5c <__retarget_lock_acquire_recursive>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	0719      	lsls	r1, r3, #28
 80075ba:	d51d      	bpl.n	80075f8 <_puts_r+0x78>
 80075bc:	6923      	ldr	r3, [r4, #16]
 80075be:	b1db      	cbz	r3, 80075f8 <_puts_r+0x78>
 80075c0:	3e01      	subs	r6, #1
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075c8:	3b01      	subs	r3, #1
 80075ca:	60a3      	str	r3, [r4, #8]
 80075cc:	bb39      	cbnz	r1, 800761e <_puts_r+0x9e>
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	da38      	bge.n	8007644 <_puts_r+0xc4>
 80075d2:	4622      	mov	r2, r4
 80075d4:	210a      	movs	r1, #10
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 f848 	bl	800766c <__swbuf_r>
 80075dc:	3001      	adds	r0, #1
 80075de:	d011      	beq.n	8007604 <_puts_r+0x84>
 80075e0:	250a      	movs	r5, #10
 80075e2:	e011      	b.n	8007608 <_puts_r+0x88>
 80075e4:	4b1b      	ldr	r3, [pc, #108]	; (8007654 <_puts_r+0xd4>)
 80075e6:	429c      	cmp	r4, r3
 80075e8:	d101      	bne.n	80075ee <_puts_r+0x6e>
 80075ea:	68ac      	ldr	r4, [r5, #8]
 80075ec:	e7da      	b.n	80075a4 <_puts_r+0x24>
 80075ee:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <_puts_r+0xd8>)
 80075f0:	429c      	cmp	r4, r3
 80075f2:	bf08      	it	eq
 80075f4:	68ec      	ldreq	r4, [r5, #12]
 80075f6:	e7d5      	b.n	80075a4 <_puts_r+0x24>
 80075f8:	4621      	mov	r1, r4
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 f888 	bl	8007710 <__swsetup_r>
 8007600:	2800      	cmp	r0, #0
 8007602:	d0dd      	beq.n	80075c0 <_puts_r+0x40>
 8007604:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800760a:	07da      	lsls	r2, r3, #31
 800760c:	d405      	bmi.n	800761a <_puts_r+0x9a>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	059b      	lsls	r3, r3, #22
 8007612:	d402      	bmi.n	800761a <_puts_r+0x9a>
 8007614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007616:	f000 faa2 	bl	8007b5e <__retarget_lock_release_recursive>
 800761a:	4628      	mov	r0, r5
 800761c:	bd70      	pop	{r4, r5, r6, pc}
 800761e:	2b00      	cmp	r3, #0
 8007620:	da04      	bge.n	800762c <_puts_r+0xac>
 8007622:	69a2      	ldr	r2, [r4, #24]
 8007624:	429a      	cmp	r2, r3
 8007626:	dc06      	bgt.n	8007636 <_puts_r+0xb6>
 8007628:	290a      	cmp	r1, #10
 800762a:	d004      	beq.n	8007636 <_puts_r+0xb6>
 800762c:	6823      	ldr	r3, [r4, #0]
 800762e:	1c5a      	adds	r2, r3, #1
 8007630:	6022      	str	r2, [r4, #0]
 8007632:	7019      	strb	r1, [r3, #0]
 8007634:	e7c5      	b.n	80075c2 <_puts_r+0x42>
 8007636:	4622      	mov	r2, r4
 8007638:	4628      	mov	r0, r5
 800763a:	f000 f817 	bl	800766c <__swbuf_r>
 800763e:	3001      	adds	r0, #1
 8007640:	d1bf      	bne.n	80075c2 <_puts_r+0x42>
 8007642:	e7df      	b.n	8007604 <_puts_r+0x84>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	250a      	movs	r5, #10
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	6022      	str	r2, [r4, #0]
 800764c:	701d      	strb	r5, [r3, #0]
 800764e:	e7db      	b.n	8007608 <_puts_r+0x88>
 8007650:	08008ce8 	.word	0x08008ce8
 8007654:	08008d08 	.word	0x08008d08
 8007658:	08008cc8 	.word	0x08008cc8

0800765c <puts>:
 800765c:	4b02      	ldr	r3, [pc, #8]	; (8007668 <puts+0xc>)
 800765e:	4601      	mov	r1, r0
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	f7ff bf8d 	b.w	8007580 <_puts_r>
 8007666:	bf00      	nop
 8007668:	20000018 	.word	0x20000018

0800766c <__swbuf_r>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	460e      	mov	r6, r1
 8007670:	4614      	mov	r4, r2
 8007672:	4605      	mov	r5, r0
 8007674:	b118      	cbz	r0, 800767e <__swbuf_r+0x12>
 8007676:	6983      	ldr	r3, [r0, #24]
 8007678:	b90b      	cbnz	r3, 800767e <__swbuf_r+0x12>
 800767a:	f000 f9d1 	bl	8007a20 <__sinit>
 800767e:	4b21      	ldr	r3, [pc, #132]	; (8007704 <__swbuf_r+0x98>)
 8007680:	429c      	cmp	r4, r3
 8007682:	d12b      	bne.n	80076dc <__swbuf_r+0x70>
 8007684:	686c      	ldr	r4, [r5, #4]
 8007686:	69a3      	ldr	r3, [r4, #24]
 8007688:	60a3      	str	r3, [r4, #8]
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	071a      	lsls	r2, r3, #28
 800768e:	d52f      	bpl.n	80076f0 <__swbuf_r+0x84>
 8007690:	6923      	ldr	r3, [r4, #16]
 8007692:	b36b      	cbz	r3, 80076f0 <__swbuf_r+0x84>
 8007694:	6923      	ldr	r3, [r4, #16]
 8007696:	6820      	ldr	r0, [r4, #0]
 8007698:	1ac0      	subs	r0, r0, r3
 800769a:	6963      	ldr	r3, [r4, #20]
 800769c:	b2f6      	uxtb	r6, r6
 800769e:	4283      	cmp	r3, r0
 80076a0:	4637      	mov	r7, r6
 80076a2:	dc04      	bgt.n	80076ae <__swbuf_r+0x42>
 80076a4:	4621      	mov	r1, r4
 80076a6:	4628      	mov	r0, r5
 80076a8:	f000 f926 	bl	80078f8 <_fflush_r>
 80076ac:	bb30      	cbnz	r0, 80076fc <__swbuf_r+0x90>
 80076ae:	68a3      	ldr	r3, [r4, #8]
 80076b0:	3b01      	subs	r3, #1
 80076b2:	60a3      	str	r3, [r4, #8]
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	1c5a      	adds	r2, r3, #1
 80076b8:	6022      	str	r2, [r4, #0]
 80076ba:	701e      	strb	r6, [r3, #0]
 80076bc:	6963      	ldr	r3, [r4, #20]
 80076be:	3001      	adds	r0, #1
 80076c0:	4283      	cmp	r3, r0
 80076c2:	d004      	beq.n	80076ce <__swbuf_r+0x62>
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	07db      	lsls	r3, r3, #31
 80076c8:	d506      	bpl.n	80076d8 <__swbuf_r+0x6c>
 80076ca:	2e0a      	cmp	r6, #10
 80076cc:	d104      	bne.n	80076d8 <__swbuf_r+0x6c>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4628      	mov	r0, r5
 80076d2:	f000 f911 	bl	80078f8 <_fflush_r>
 80076d6:	b988      	cbnz	r0, 80076fc <__swbuf_r+0x90>
 80076d8:	4638      	mov	r0, r7
 80076da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <__swbuf_r+0x9c>)
 80076de:	429c      	cmp	r4, r3
 80076e0:	d101      	bne.n	80076e6 <__swbuf_r+0x7a>
 80076e2:	68ac      	ldr	r4, [r5, #8]
 80076e4:	e7cf      	b.n	8007686 <__swbuf_r+0x1a>
 80076e6:	4b09      	ldr	r3, [pc, #36]	; (800770c <__swbuf_r+0xa0>)
 80076e8:	429c      	cmp	r4, r3
 80076ea:	bf08      	it	eq
 80076ec:	68ec      	ldreq	r4, [r5, #12]
 80076ee:	e7ca      	b.n	8007686 <__swbuf_r+0x1a>
 80076f0:	4621      	mov	r1, r4
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f80c 	bl	8007710 <__swsetup_r>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d0cb      	beq.n	8007694 <__swbuf_r+0x28>
 80076fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007700:	e7ea      	b.n	80076d8 <__swbuf_r+0x6c>
 8007702:	bf00      	nop
 8007704:	08008ce8 	.word	0x08008ce8
 8007708:	08008d08 	.word	0x08008d08
 800770c:	08008cc8 	.word	0x08008cc8

08007710 <__swsetup_r>:
 8007710:	4b32      	ldr	r3, [pc, #200]	; (80077dc <__swsetup_r+0xcc>)
 8007712:	b570      	push	{r4, r5, r6, lr}
 8007714:	681d      	ldr	r5, [r3, #0]
 8007716:	4606      	mov	r6, r0
 8007718:	460c      	mov	r4, r1
 800771a:	b125      	cbz	r5, 8007726 <__swsetup_r+0x16>
 800771c:	69ab      	ldr	r3, [r5, #24]
 800771e:	b913      	cbnz	r3, 8007726 <__swsetup_r+0x16>
 8007720:	4628      	mov	r0, r5
 8007722:	f000 f97d 	bl	8007a20 <__sinit>
 8007726:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <__swsetup_r+0xd0>)
 8007728:	429c      	cmp	r4, r3
 800772a:	d10f      	bne.n	800774c <__swsetup_r+0x3c>
 800772c:	686c      	ldr	r4, [r5, #4]
 800772e:	89a3      	ldrh	r3, [r4, #12]
 8007730:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007734:	0719      	lsls	r1, r3, #28
 8007736:	d42c      	bmi.n	8007792 <__swsetup_r+0x82>
 8007738:	06dd      	lsls	r5, r3, #27
 800773a:	d411      	bmi.n	8007760 <__swsetup_r+0x50>
 800773c:	2309      	movs	r3, #9
 800773e:	6033      	str	r3, [r6, #0]
 8007740:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007744:	81a3      	strh	r3, [r4, #12]
 8007746:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800774a:	e03e      	b.n	80077ca <__swsetup_r+0xba>
 800774c:	4b25      	ldr	r3, [pc, #148]	; (80077e4 <__swsetup_r+0xd4>)
 800774e:	429c      	cmp	r4, r3
 8007750:	d101      	bne.n	8007756 <__swsetup_r+0x46>
 8007752:	68ac      	ldr	r4, [r5, #8]
 8007754:	e7eb      	b.n	800772e <__swsetup_r+0x1e>
 8007756:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <__swsetup_r+0xd8>)
 8007758:	429c      	cmp	r4, r3
 800775a:	bf08      	it	eq
 800775c:	68ec      	ldreq	r4, [r5, #12]
 800775e:	e7e6      	b.n	800772e <__swsetup_r+0x1e>
 8007760:	0758      	lsls	r0, r3, #29
 8007762:	d512      	bpl.n	800778a <__swsetup_r+0x7a>
 8007764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007766:	b141      	cbz	r1, 800777a <__swsetup_r+0x6a>
 8007768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800776c:	4299      	cmp	r1, r3
 800776e:	d002      	beq.n	8007776 <__swsetup_r+0x66>
 8007770:	4630      	mov	r0, r6
 8007772:	f000 fa5b 	bl	8007c2c <_free_r>
 8007776:	2300      	movs	r3, #0
 8007778:	6363      	str	r3, [r4, #52]	; 0x34
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007780:	81a3      	strh	r3, [r4, #12]
 8007782:	2300      	movs	r3, #0
 8007784:	6063      	str	r3, [r4, #4]
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	89a3      	ldrh	r3, [r4, #12]
 800778c:	f043 0308 	orr.w	r3, r3, #8
 8007790:	81a3      	strh	r3, [r4, #12]
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	b94b      	cbnz	r3, 80077aa <__swsetup_r+0x9a>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800779c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077a0:	d003      	beq.n	80077aa <__swsetup_r+0x9a>
 80077a2:	4621      	mov	r1, r4
 80077a4:	4630      	mov	r0, r6
 80077a6:	f000 fa01 	bl	8007bac <__smakebuf_r>
 80077aa:	89a0      	ldrh	r0, [r4, #12]
 80077ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077b0:	f010 0301 	ands.w	r3, r0, #1
 80077b4:	d00a      	beq.n	80077cc <__swsetup_r+0xbc>
 80077b6:	2300      	movs	r3, #0
 80077b8:	60a3      	str	r3, [r4, #8]
 80077ba:	6963      	ldr	r3, [r4, #20]
 80077bc:	425b      	negs	r3, r3
 80077be:	61a3      	str	r3, [r4, #24]
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	b943      	cbnz	r3, 80077d6 <__swsetup_r+0xc6>
 80077c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077c8:	d1ba      	bne.n	8007740 <__swsetup_r+0x30>
 80077ca:	bd70      	pop	{r4, r5, r6, pc}
 80077cc:	0781      	lsls	r1, r0, #30
 80077ce:	bf58      	it	pl
 80077d0:	6963      	ldrpl	r3, [r4, #20]
 80077d2:	60a3      	str	r3, [r4, #8]
 80077d4:	e7f4      	b.n	80077c0 <__swsetup_r+0xb0>
 80077d6:	2000      	movs	r0, #0
 80077d8:	e7f7      	b.n	80077ca <__swsetup_r+0xba>
 80077da:	bf00      	nop
 80077dc:	20000018 	.word	0x20000018
 80077e0:	08008ce8 	.word	0x08008ce8
 80077e4:	08008d08 	.word	0x08008d08
 80077e8:	08008cc8 	.word	0x08008cc8

080077ec <__sflush_r>:
 80077ec:	898a      	ldrh	r2, [r1, #12]
 80077ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077f2:	4605      	mov	r5, r0
 80077f4:	0710      	lsls	r0, r2, #28
 80077f6:	460c      	mov	r4, r1
 80077f8:	d458      	bmi.n	80078ac <__sflush_r+0xc0>
 80077fa:	684b      	ldr	r3, [r1, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	dc05      	bgt.n	800780c <__sflush_r+0x20>
 8007800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007802:	2b00      	cmp	r3, #0
 8007804:	dc02      	bgt.n	800780c <__sflush_r+0x20>
 8007806:	2000      	movs	r0, #0
 8007808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800780c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800780e:	2e00      	cmp	r6, #0
 8007810:	d0f9      	beq.n	8007806 <__sflush_r+0x1a>
 8007812:	2300      	movs	r3, #0
 8007814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007818:	682f      	ldr	r7, [r5, #0]
 800781a:	602b      	str	r3, [r5, #0]
 800781c:	d032      	beq.n	8007884 <__sflush_r+0x98>
 800781e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007820:	89a3      	ldrh	r3, [r4, #12]
 8007822:	075a      	lsls	r2, r3, #29
 8007824:	d505      	bpl.n	8007832 <__sflush_r+0x46>
 8007826:	6863      	ldr	r3, [r4, #4]
 8007828:	1ac0      	subs	r0, r0, r3
 800782a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800782c:	b10b      	cbz	r3, 8007832 <__sflush_r+0x46>
 800782e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007830:	1ac0      	subs	r0, r0, r3
 8007832:	2300      	movs	r3, #0
 8007834:	4602      	mov	r2, r0
 8007836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007838:	6a21      	ldr	r1, [r4, #32]
 800783a:	4628      	mov	r0, r5
 800783c:	47b0      	blx	r6
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	d106      	bne.n	8007852 <__sflush_r+0x66>
 8007844:	6829      	ldr	r1, [r5, #0]
 8007846:	291d      	cmp	r1, #29
 8007848:	d82c      	bhi.n	80078a4 <__sflush_r+0xb8>
 800784a:	4a2a      	ldr	r2, [pc, #168]	; (80078f4 <__sflush_r+0x108>)
 800784c:	40ca      	lsrs	r2, r1
 800784e:	07d6      	lsls	r6, r2, #31
 8007850:	d528      	bpl.n	80078a4 <__sflush_r+0xb8>
 8007852:	2200      	movs	r2, #0
 8007854:	6062      	str	r2, [r4, #4]
 8007856:	04d9      	lsls	r1, r3, #19
 8007858:	6922      	ldr	r2, [r4, #16]
 800785a:	6022      	str	r2, [r4, #0]
 800785c:	d504      	bpl.n	8007868 <__sflush_r+0x7c>
 800785e:	1c42      	adds	r2, r0, #1
 8007860:	d101      	bne.n	8007866 <__sflush_r+0x7a>
 8007862:	682b      	ldr	r3, [r5, #0]
 8007864:	b903      	cbnz	r3, 8007868 <__sflush_r+0x7c>
 8007866:	6560      	str	r0, [r4, #84]	; 0x54
 8007868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800786a:	602f      	str	r7, [r5, #0]
 800786c:	2900      	cmp	r1, #0
 800786e:	d0ca      	beq.n	8007806 <__sflush_r+0x1a>
 8007870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007874:	4299      	cmp	r1, r3
 8007876:	d002      	beq.n	800787e <__sflush_r+0x92>
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f9d7 	bl	8007c2c <_free_r>
 800787e:	2000      	movs	r0, #0
 8007880:	6360      	str	r0, [r4, #52]	; 0x34
 8007882:	e7c1      	b.n	8007808 <__sflush_r+0x1c>
 8007884:	6a21      	ldr	r1, [r4, #32]
 8007886:	2301      	movs	r3, #1
 8007888:	4628      	mov	r0, r5
 800788a:	47b0      	blx	r6
 800788c:	1c41      	adds	r1, r0, #1
 800788e:	d1c7      	bne.n	8007820 <__sflush_r+0x34>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d0c4      	beq.n	8007820 <__sflush_r+0x34>
 8007896:	2b1d      	cmp	r3, #29
 8007898:	d001      	beq.n	800789e <__sflush_r+0xb2>
 800789a:	2b16      	cmp	r3, #22
 800789c:	d101      	bne.n	80078a2 <__sflush_r+0xb6>
 800789e:	602f      	str	r7, [r5, #0]
 80078a0:	e7b1      	b.n	8007806 <__sflush_r+0x1a>
 80078a2:	89a3      	ldrh	r3, [r4, #12]
 80078a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	e7ad      	b.n	8007808 <__sflush_r+0x1c>
 80078ac:	690f      	ldr	r7, [r1, #16]
 80078ae:	2f00      	cmp	r7, #0
 80078b0:	d0a9      	beq.n	8007806 <__sflush_r+0x1a>
 80078b2:	0793      	lsls	r3, r2, #30
 80078b4:	680e      	ldr	r6, [r1, #0]
 80078b6:	bf08      	it	eq
 80078b8:	694b      	ldreq	r3, [r1, #20]
 80078ba:	600f      	str	r7, [r1, #0]
 80078bc:	bf18      	it	ne
 80078be:	2300      	movne	r3, #0
 80078c0:	eba6 0807 	sub.w	r8, r6, r7
 80078c4:	608b      	str	r3, [r1, #8]
 80078c6:	f1b8 0f00 	cmp.w	r8, #0
 80078ca:	dd9c      	ble.n	8007806 <__sflush_r+0x1a>
 80078cc:	6a21      	ldr	r1, [r4, #32]
 80078ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078d0:	4643      	mov	r3, r8
 80078d2:	463a      	mov	r2, r7
 80078d4:	4628      	mov	r0, r5
 80078d6:	47b0      	blx	r6
 80078d8:	2800      	cmp	r0, #0
 80078da:	dc06      	bgt.n	80078ea <__sflush_r+0xfe>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e2:	81a3      	strh	r3, [r4, #12]
 80078e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078e8:	e78e      	b.n	8007808 <__sflush_r+0x1c>
 80078ea:	4407      	add	r7, r0
 80078ec:	eba8 0800 	sub.w	r8, r8, r0
 80078f0:	e7e9      	b.n	80078c6 <__sflush_r+0xda>
 80078f2:	bf00      	nop
 80078f4:	20400001 	.word	0x20400001

080078f8 <_fflush_r>:
 80078f8:	b538      	push	{r3, r4, r5, lr}
 80078fa:	690b      	ldr	r3, [r1, #16]
 80078fc:	4605      	mov	r5, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	b913      	cbnz	r3, 8007908 <_fflush_r+0x10>
 8007902:	2500      	movs	r5, #0
 8007904:	4628      	mov	r0, r5
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	b118      	cbz	r0, 8007912 <_fflush_r+0x1a>
 800790a:	6983      	ldr	r3, [r0, #24]
 800790c:	b90b      	cbnz	r3, 8007912 <_fflush_r+0x1a>
 800790e:	f000 f887 	bl	8007a20 <__sinit>
 8007912:	4b14      	ldr	r3, [pc, #80]	; (8007964 <_fflush_r+0x6c>)
 8007914:	429c      	cmp	r4, r3
 8007916:	d11b      	bne.n	8007950 <_fflush_r+0x58>
 8007918:	686c      	ldr	r4, [r5, #4]
 800791a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d0ef      	beq.n	8007902 <_fflush_r+0xa>
 8007922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007924:	07d0      	lsls	r0, r2, #31
 8007926:	d404      	bmi.n	8007932 <_fflush_r+0x3a>
 8007928:	0599      	lsls	r1, r3, #22
 800792a:	d402      	bmi.n	8007932 <_fflush_r+0x3a>
 800792c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800792e:	f000 f915 	bl	8007b5c <__retarget_lock_acquire_recursive>
 8007932:	4628      	mov	r0, r5
 8007934:	4621      	mov	r1, r4
 8007936:	f7ff ff59 	bl	80077ec <__sflush_r>
 800793a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800793c:	07da      	lsls	r2, r3, #31
 800793e:	4605      	mov	r5, r0
 8007940:	d4e0      	bmi.n	8007904 <_fflush_r+0xc>
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	059b      	lsls	r3, r3, #22
 8007946:	d4dd      	bmi.n	8007904 <_fflush_r+0xc>
 8007948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800794a:	f000 f908 	bl	8007b5e <__retarget_lock_release_recursive>
 800794e:	e7d9      	b.n	8007904 <_fflush_r+0xc>
 8007950:	4b05      	ldr	r3, [pc, #20]	; (8007968 <_fflush_r+0x70>)
 8007952:	429c      	cmp	r4, r3
 8007954:	d101      	bne.n	800795a <_fflush_r+0x62>
 8007956:	68ac      	ldr	r4, [r5, #8]
 8007958:	e7df      	b.n	800791a <_fflush_r+0x22>
 800795a:	4b04      	ldr	r3, [pc, #16]	; (800796c <_fflush_r+0x74>)
 800795c:	429c      	cmp	r4, r3
 800795e:	bf08      	it	eq
 8007960:	68ec      	ldreq	r4, [r5, #12]
 8007962:	e7da      	b.n	800791a <_fflush_r+0x22>
 8007964:	08008ce8 	.word	0x08008ce8
 8007968:	08008d08 	.word	0x08008d08
 800796c:	08008cc8 	.word	0x08008cc8

08007970 <std>:
 8007970:	2300      	movs	r3, #0
 8007972:	b510      	push	{r4, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	e9c0 3300 	strd	r3, r3, [r0]
 800797a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800797e:	6083      	str	r3, [r0, #8]
 8007980:	8181      	strh	r1, [r0, #12]
 8007982:	6643      	str	r3, [r0, #100]	; 0x64
 8007984:	81c2      	strh	r2, [r0, #14]
 8007986:	6183      	str	r3, [r0, #24]
 8007988:	4619      	mov	r1, r3
 800798a:	2208      	movs	r2, #8
 800798c:	305c      	adds	r0, #92	; 0x5c
 800798e:	f7ff fdd7 	bl	8007540 <memset>
 8007992:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <std+0x38>)
 8007994:	6263      	str	r3, [r4, #36]	; 0x24
 8007996:	4b05      	ldr	r3, [pc, #20]	; (80079ac <std+0x3c>)
 8007998:	62a3      	str	r3, [r4, #40]	; 0x28
 800799a:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <std+0x40>)
 800799c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800799e:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <std+0x44>)
 80079a0:	6224      	str	r4, [r4, #32]
 80079a2:	6323      	str	r3, [r4, #48]	; 0x30
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	bf00      	nop
 80079a8:	080083e9 	.word	0x080083e9
 80079ac:	0800840b 	.word	0x0800840b
 80079b0:	08008443 	.word	0x08008443
 80079b4:	08008467 	.word	0x08008467

080079b8 <_cleanup_r>:
 80079b8:	4901      	ldr	r1, [pc, #4]	; (80079c0 <_cleanup_r+0x8>)
 80079ba:	f000 b8af 	b.w	8007b1c <_fwalk_reent>
 80079be:	bf00      	nop
 80079c0:	080078f9 	.word	0x080078f9

080079c4 <__sfmoreglue>:
 80079c4:	b570      	push	{r4, r5, r6, lr}
 80079c6:	2268      	movs	r2, #104	; 0x68
 80079c8:	1e4d      	subs	r5, r1, #1
 80079ca:	4355      	muls	r5, r2
 80079cc:	460e      	mov	r6, r1
 80079ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079d2:	f000 f997 	bl	8007d04 <_malloc_r>
 80079d6:	4604      	mov	r4, r0
 80079d8:	b140      	cbz	r0, 80079ec <__sfmoreglue+0x28>
 80079da:	2100      	movs	r1, #0
 80079dc:	e9c0 1600 	strd	r1, r6, [r0]
 80079e0:	300c      	adds	r0, #12
 80079e2:	60a0      	str	r0, [r4, #8]
 80079e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079e8:	f7ff fdaa 	bl	8007540 <memset>
 80079ec:	4620      	mov	r0, r4
 80079ee:	bd70      	pop	{r4, r5, r6, pc}

080079f0 <__sfp_lock_acquire>:
 80079f0:	4801      	ldr	r0, [pc, #4]	; (80079f8 <__sfp_lock_acquire+0x8>)
 80079f2:	f000 b8b3 	b.w	8007b5c <__retarget_lock_acquire_recursive>
 80079f6:	bf00      	nop
 80079f8:	200003e9 	.word	0x200003e9

080079fc <__sfp_lock_release>:
 80079fc:	4801      	ldr	r0, [pc, #4]	; (8007a04 <__sfp_lock_release+0x8>)
 80079fe:	f000 b8ae 	b.w	8007b5e <__retarget_lock_release_recursive>
 8007a02:	bf00      	nop
 8007a04:	200003e9 	.word	0x200003e9

08007a08 <__sinit_lock_acquire>:
 8007a08:	4801      	ldr	r0, [pc, #4]	; (8007a10 <__sinit_lock_acquire+0x8>)
 8007a0a:	f000 b8a7 	b.w	8007b5c <__retarget_lock_acquire_recursive>
 8007a0e:	bf00      	nop
 8007a10:	200003ea 	.word	0x200003ea

08007a14 <__sinit_lock_release>:
 8007a14:	4801      	ldr	r0, [pc, #4]	; (8007a1c <__sinit_lock_release+0x8>)
 8007a16:	f000 b8a2 	b.w	8007b5e <__retarget_lock_release_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	200003ea 	.word	0x200003ea

08007a20 <__sinit>:
 8007a20:	b510      	push	{r4, lr}
 8007a22:	4604      	mov	r4, r0
 8007a24:	f7ff fff0 	bl	8007a08 <__sinit_lock_acquire>
 8007a28:	69a3      	ldr	r3, [r4, #24]
 8007a2a:	b11b      	cbz	r3, 8007a34 <__sinit+0x14>
 8007a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a30:	f7ff bff0 	b.w	8007a14 <__sinit_lock_release>
 8007a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a38:	6523      	str	r3, [r4, #80]	; 0x50
 8007a3a:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <__sinit+0x68>)
 8007a3c:	4a13      	ldr	r2, [pc, #76]	; (8007a8c <__sinit+0x6c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a42:	42a3      	cmp	r3, r4
 8007a44:	bf04      	itt	eq
 8007a46:	2301      	moveq	r3, #1
 8007a48:	61a3      	streq	r3, [r4, #24]
 8007a4a:	4620      	mov	r0, r4
 8007a4c:	f000 f820 	bl	8007a90 <__sfp>
 8007a50:	6060      	str	r0, [r4, #4]
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f81c 	bl	8007a90 <__sfp>
 8007a58:	60a0      	str	r0, [r4, #8]
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f818 	bl	8007a90 <__sfp>
 8007a60:	2200      	movs	r2, #0
 8007a62:	60e0      	str	r0, [r4, #12]
 8007a64:	2104      	movs	r1, #4
 8007a66:	6860      	ldr	r0, [r4, #4]
 8007a68:	f7ff ff82 	bl	8007970 <std>
 8007a6c:	68a0      	ldr	r0, [r4, #8]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	2109      	movs	r1, #9
 8007a72:	f7ff ff7d 	bl	8007970 <std>
 8007a76:	68e0      	ldr	r0, [r4, #12]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	2112      	movs	r1, #18
 8007a7c:	f7ff ff78 	bl	8007970 <std>
 8007a80:	2301      	movs	r3, #1
 8007a82:	61a3      	str	r3, [r4, #24]
 8007a84:	e7d2      	b.n	8007a2c <__sinit+0xc>
 8007a86:	bf00      	nop
 8007a88:	08008cc4 	.word	0x08008cc4
 8007a8c:	080079b9 	.word	0x080079b9

08007a90 <__sfp>:
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	4607      	mov	r7, r0
 8007a94:	f7ff ffac 	bl	80079f0 <__sfp_lock_acquire>
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <__sfp+0x84>)
 8007a9a:	681e      	ldr	r6, [r3, #0]
 8007a9c:	69b3      	ldr	r3, [r6, #24]
 8007a9e:	b913      	cbnz	r3, 8007aa6 <__sfp+0x16>
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f7ff ffbd 	bl	8007a20 <__sinit>
 8007aa6:	3648      	adds	r6, #72	; 0x48
 8007aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	d503      	bpl.n	8007ab8 <__sfp+0x28>
 8007ab0:	6833      	ldr	r3, [r6, #0]
 8007ab2:	b30b      	cbz	r3, 8007af8 <__sfp+0x68>
 8007ab4:	6836      	ldr	r6, [r6, #0]
 8007ab6:	e7f7      	b.n	8007aa8 <__sfp+0x18>
 8007ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007abc:	b9d5      	cbnz	r5, 8007af4 <__sfp+0x64>
 8007abe:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <__sfp+0x88>)
 8007ac0:	60e3      	str	r3, [r4, #12]
 8007ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8007ac8:	f000 f847 	bl	8007b5a <__retarget_lock_init_recursive>
 8007acc:	f7ff ff96 	bl	80079fc <__sfp_lock_release>
 8007ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ad8:	6025      	str	r5, [r4, #0]
 8007ada:	61a5      	str	r5, [r4, #24]
 8007adc:	2208      	movs	r2, #8
 8007ade:	4629      	mov	r1, r5
 8007ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ae4:	f7ff fd2c 	bl	8007540 <memset>
 8007ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007af0:	4620      	mov	r0, r4
 8007af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007af4:	3468      	adds	r4, #104	; 0x68
 8007af6:	e7d9      	b.n	8007aac <__sfp+0x1c>
 8007af8:	2104      	movs	r1, #4
 8007afa:	4638      	mov	r0, r7
 8007afc:	f7ff ff62 	bl	80079c4 <__sfmoreglue>
 8007b00:	4604      	mov	r4, r0
 8007b02:	6030      	str	r0, [r6, #0]
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d1d5      	bne.n	8007ab4 <__sfp+0x24>
 8007b08:	f7ff ff78 	bl	80079fc <__sfp_lock_release>
 8007b0c:	230c      	movs	r3, #12
 8007b0e:	603b      	str	r3, [r7, #0]
 8007b10:	e7ee      	b.n	8007af0 <__sfp+0x60>
 8007b12:	bf00      	nop
 8007b14:	08008cc4 	.word	0x08008cc4
 8007b18:	ffff0001 	.word	0xffff0001

08007b1c <_fwalk_reent>:
 8007b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b20:	4606      	mov	r6, r0
 8007b22:	4688      	mov	r8, r1
 8007b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b28:	2700      	movs	r7, #0
 8007b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8007b32:	d505      	bpl.n	8007b40 <_fwalk_reent+0x24>
 8007b34:	6824      	ldr	r4, [r4, #0]
 8007b36:	2c00      	cmp	r4, #0
 8007b38:	d1f7      	bne.n	8007b2a <_fwalk_reent+0xe>
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b40:	89ab      	ldrh	r3, [r5, #12]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d907      	bls.n	8007b56 <_fwalk_reent+0x3a>
 8007b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	d003      	beq.n	8007b56 <_fwalk_reent+0x3a>
 8007b4e:	4629      	mov	r1, r5
 8007b50:	4630      	mov	r0, r6
 8007b52:	47c0      	blx	r8
 8007b54:	4307      	orrs	r7, r0
 8007b56:	3568      	adds	r5, #104	; 0x68
 8007b58:	e7e9      	b.n	8007b2e <_fwalk_reent+0x12>

08007b5a <__retarget_lock_init_recursive>:
 8007b5a:	4770      	bx	lr

08007b5c <__retarget_lock_acquire_recursive>:
 8007b5c:	4770      	bx	lr

08007b5e <__retarget_lock_release_recursive>:
 8007b5e:	4770      	bx	lr

08007b60 <__swhatbuf_r>:
 8007b60:	b570      	push	{r4, r5, r6, lr}
 8007b62:	460e      	mov	r6, r1
 8007b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b68:	2900      	cmp	r1, #0
 8007b6a:	b096      	sub	sp, #88	; 0x58
 8007b6c:	4614      	mov	r4, r2
 8007b6e:	461d      	mov	r5, r3
 8007b70:	da08      	bge.n	8007b84 <__swhatbuf_r+0x24>
 8007b72:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	602a      	str	r2, [r5, #0]
 8007b7a:	061a      	lsls	r2, r3, #24
 8007b7c:	d410      	bmi.n	8007ba0 <__swhatbuf_r+0x40>
 8007b7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b82:	e00e      	b.n	8007ba2 <__swhatbuf_r+0x42>
 8007b84:	466a      	mov	r2, sp
 8007b86:	f000 fc95 	bl	80084b4 <_fstat_r>
 8007b8a:	2800      	cmp	r0, #0
 8007b8c:	dbf1      	blt.n	8007b72 <__swhatbuf_r+0x12>
 8007b8e:	9a01      	ldr	r2, [sp, #4]
 8007b90:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b94:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b98:	425a      	negs	r2, r3
 8007b9a:	415a      	adcs	r2, r3
 8007b9c:	602a      	str	r2, [r5, #0]
 8007b9e:	e7ee      	b.n	8007b7e <__swhatbuf_r+0x1e>
 8007ba0:	2340      	movs	r3, #64	; 0x40
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	6023      	str	r3, [r4, #0]
 8007ba6:	b016      	add	sp, #88	; 0x58
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
	...

08007bac <__smakebuf_r>:
 8007bac:	898b      	ldrh	r3, [r1, #12]
 8007bae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007bb0:	079d      	lsls	r5, r3, #30
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	d507      	bpl.n	8007bc8 <__smakebuf_r+0x1c>
 8007bb8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	6123      	str	r3, [r4, #16]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	6163      	str	r3, [r4, #20]
 8007bc4:	b002      	add	sp, #8
 8007bc6:	bd70      	pop	{r4, r5, r6, pc}
 8007bc8:	ab01      	add	r3, sp, #4
 8007bca:	466a      	mov	r2, sp
 8007bcc:	f7ff ffc8 	bl	8007b60 <__swhatbuf_r>
 8007bd0:	9900      	ldr	r1, [sp, #0]
 8007bd2:	4605      	mov	r5, r0
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	f000 f895 	bl	8007d04 <_malloc_r>
 8007bda:	b948      	cbnz	r0, 8007bf0 <__smakebuf_r+0x44>
 8007bdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007be0:	059a      	lsls	r2, r3, #22
 8007be2:	d4ef      	bmi.n	8007bc4 <__smakebuf_r+0x18>
 8007be4:	f023 0303 	bic.w	r3, r3, #3
 8007be8:	f043 0302 	orr.w	r3, r3, #2
 8007bec:	81a3      	strh	r3, [r4, #12]
 8007bee:	e7e3      	b.n	8007bb8 <__smakebuf_r+0xc>
 8007bf0:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <__smakebuf_r+0x7c>)
 8007bf2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	6020      	str	r0, [r4, #0]
 8007bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bfc:	81a3      	strh	r3, [r4, #12]
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	6163      	str	r3, [r4, #20]
 8007c02:	9b01      	ldr	r3, [sp, #4]
 8007c04:	6120      	str	r0, [r4, #16]
 8007c06:	b15b      	cbz	r3, 8007c20 <__smakebuf_r+0x74>
 8007c08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f000 fc63 	bl	80084d8 <_isatty_r>
 8007c12:	b128      	cbz	r0, 8007c20 <__smakebuf_r+0x74>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	f023 0303 	bic.w	r3, r3, #3
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	81a3      	strh	r3, [r4, #12]
 8007c20:	89a0      	ldrh	r0, [r4, #12]
 8007c22:	4305      	orrs	r5, r0
 8007c24:	81a5      	strh	r5, [r4, #12]
 8007c26:	e7cd      	b.n	8007bc4 <__smakebuf_r+0x18>
 8007c28:	080079b9 	.word	0x080079b9

08007c2c <_free_r>:
 8007c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	d044      	beq.n	8007cbc <_free_r+0x90>
 8007c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c36:	9001      	str	r0, [sp, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007c3e:	bfb8      	it	lt
 8007c40:	18e4      	addlt	r4, r4, r3
 8007c42:	f000 fc6b 	bl	800851c <__malloc_lock>
 8007c46:	4a1e      	ldr	r2, [pc, #120]	; (8007cc0 <_free_r+0x94>)
 8007c48:	9801      	ldr	r0, [sp, #4]
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	b933      	cbnz	r3, 8007c5c <_free_r+0x30>
 8007c4e:	6063      	str	r3, [r4, #4]
 8007c50:	6014      	str	r4, [r2, #0]
 8007c52:	b003      	add	sp, #12
 8007c54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c58:	f000 bc66 	b.w	8008528 <__malloc_unlock>
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	d908      	bls.n	8007c72 <_free_r+0x46>
 8007c60:	6825      	ldr	r5, [r4, #0]
 8007c62:	1961      	adds	r1, r4, r5
 8007c64:	428b      	cmp	r3, r1
 8007c66:	bf01      	itttt	eq
 8007c68:	6819      	ldreq	r1, [r3, #0]
 8007c6a:	685b      	ldreq	r3, [r3, #4]
 8007c6c:	1949      	addeq	r1, r1, r5
 8007c6e:	6021      	streq	r1, [r4, #0]
 8007c70:	e7ed      	b.n	8007c4e <_free_r+0x22>
 8007c72:	461a      	mov	r2, r3
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	b10b      	cbz	r3, 8007c7c <_free_r+0x50>
 8007c78:	42a3      	cmp	r3, r4
 8007c7a:	d9fa      	bls.n	8007c72 <_free_r+0x46>
 8007c7c:	6811      	ldr	r1, [r2, #0]
 8007c7e:	1855      	adds	r5, r2, r1
 8007c80:	42a5      	cmp	r5, r4
 8007c82:	d10b      	bne.n	8007c9c <_free_r+0x70>
 8007c84:	6824      	ldr	r4, [r4, #0]
 8007c86:	4421      	add	r1, r4
 8007c88:	1854      	adds	r4, r2, r1
 8007c8a:	42a3      	cmp	r3, r4
 8007c8c:	6011      	str	r1, [r2, #0]
 8007c8e:	d1e0      	bne.n	8007c52 <_free_r+0x26>
 8007c90:	681c      	ldr	r4, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	6053      	str	r3, [r2, #4]
 8007c96:	4421      	add	r1, r4
 8007c98:	6011      	str	r1, [r2, #0]
 8007c9a:	e7da      	b.n	8007c52 <_free_r+0x26>
 8007c9c:	d902      	bls.n	8007ca4 <_free_r+0x78>
 8007c9e:	230c      	movs	r3, #12
 8007ca0:	6003      	str	r3, [r0, #0]
 8007ca2:	e7d6      	b.n	8007c52 <_free_r+0x26>
 8007ca4:	6825      	ldr	r5, [r4, #0]
 8007ca6:	1961      	adds	r1, r4, r5
 8007ca8:	428b      	cmp	r3, r1
 8007caa:	bf04      	itt	eq
 8007cac:	6819      	ldreq	r1, [r3, #0]
 8007cae:	685b      	ldreq	r3, [r3, #4]
 8007cb0:	6063      	str	r3, [r4, #4]
 8007cb2:	bf04      	itt	eq
 8007cb4:	1949      	addeq	r1, r1, r5
 8007cb6:	6021      	streq	r1, [r4, #0]
 8007cb8:	6054      	str	r4, [r2, #4]
 8007cba:	e7ca      	b.n	8007c52 <_free_r+0x26>
 8007cbc:	b003      	add	sp, #12
 8007cbe:	bd30      	pop	{r4, r5, pc}
 8007cc0:	200003ec 	.word	0x200003ec

08007cc4 <sbrk_aligned>:
 8007cc4:	b570      	push	{r4, r5, r6, lr}
 8007cc6:	4e0e      	ldr	r6, [pc, #56]	; (8007d00 <sbrk_aligned+0x3c>)
 8007cc8:	460c      	mov	r4, r1
 8007cca:	6831      	ldr	r1, [r6, #0]
 8007ccc:	4605      	mov	r5, r0
 8007cce:	b911      	cbnz	r1, 8007cd6 <sbrk_aligned+0x12>
 8007cd0:	f000 fb7a 	bl	80083c8 <_sbrk_r>
 8007cd4:	6030      	str	r0, [r6, #0]
 8007cd6:	4621      	mov	r1, r4
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 fb75 	bl	80083c8 <_sbrk_r>
 8007cde:	1c43      	adds	r3, r0, #1
 8007ce0:	d00a      	beq.n	8007cf8 <sbrk_aligned+0x34>
 8007ce2:	1cc4      	adds	r4, r0, #3
 8007ce4:	f024 0403 	bic.w	r4, r4, #3
 8007ce8:	42a0      	cmp	r0, r4
 8007cea:	d007      	beq.n	8007cfc <sbrk_aligned+0x38>
 8007cec:	1a21      	subs	r1, r4, r0
 8007cee:	4628      	mov	r0, r5
 8007cf0:	f000 fb6a 	bl	80083c8 <_sbrk_r>
 8007cf4:	3001      	adds	r0, #1
 8007cf6:	d101      	bne.n	8007cfc <sbrk_aligned+0x38>
 8007cf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	200003f0 	.word	0x200003f0

08007d04 <_malloc_r>:
 8007d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d08:	1ccd      	adds	r5, r1, #3
 8007d0a:	f025 0503 	bic.w	r5, r5, #3
 8007d0e:	3508      	adds	r5, #8
 8007d10:	2d0c      	cmp	r5, #12
 8007d12:	bf38      	it	cc
 8007d14:	250c      	movcc	r5, #12
 8007d16:	2d00      	cmp	r5, #0
 8007d18:	4607      	mov	r7, r0
 8007d1a:	db01      	blt.n	8007d20 <_malloc_r+0x1c>
 8007d1c:	42a9      	cmp	r1, r5
 8007d1e:	d905      	bls.n	8007d2c <_malloc_r+0x28>
 8007d20:	230c      	movs	r3, #12
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	2600      	movs	r6, #0
 8007d26:	4630      	mov	r0, r6
 8007d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d2c:	4e2e      	ldr	r6, [pc, #184]	; (8007de8 <_malloc_r+0xe4>)
 8007d2e:	f000 fbf5 	bl	800851c <__malloc_lock>
 8007d32:	6833      	ldr	r3, [r6, #0]
 8007d34:	461c      	mov	r4, r3
 8007d36:	bb34      	cbnz	r4, 8007d86 <_malloc_r+0x82>
 8007d38:	4629      	mov	r1, r5
 8007d3a:	4638      	mov	r0, r7
 8007d3c:	f7ff ffc2 	bl	8007cc4 <sbrk_aligned>
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	4604      	mov	r4, r0
 8007d44:	d14d      	bne.n	8007de2 <_malloc_r+0xde>
 8007d46:	6834      	ldr	r4, [r6, #0]
 8007d48:	4626      	mov	r6, r4
 8007d4a:	2e00      	cmp	r6, #0
 8007d4c:	d140      	bne.n	8007dd0 <_malloc_r+0xcc>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	4631      	mov	r1, r6
 8007d52:	4638      	mov	r0, r7
 8007d54:	eb04 0803 	add.w	r8, r4, r3
 8007d58:	f000 fb36 	bl	80083c8 <_sbrk_r>
 8007d5c:	4580      	cmp	r8, r0
 8007d5e:	d13a      	bne.n	8007dd6 <_malloc_r+0xd2>
 8007d60:	6821      	ldr	r1, [r4, #0]
 8007d62:	3503      	adds	r5, #3
 8007d64:	1a6d      	subs	r5, r5, r1
 8007d66:	f025 0503 	bic.w	r5, r5, #3
 8007d6a:	3508      	adds	r5, #8
 8007d6c:	2d0c      	cmp	r5, #12
 8007d6e:	bf38      	it	cc
 8007d70:	250c      	movcc	r5, #12
 8007d72:	4629      	mov	r1, r5
 8007d74:	4638      	mov	r0, r7
 8007d76:	f7ff ffa5 	bl	8007cc4 <sbrk_aligned>
 8007d7a:	3001      	adds	r0, #1
 8007d7c:	d02b      	beq.n	8007dd6 <_malloc_r+0xd2>
 8007d7e:	6823      	ldr	r3, [r4, #0]
 8007d80:	442b      	add	r3, r5
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	e00e      	b.n	8007da4 <_malloc_r+0xa0>
 8007d86:	6822      	ldr	r2, [r4, #0]
 8007d88:	1b52      	subs	r2, r2, r5
 8007d8a:	d41e      	bmi.n	8007dca <_malloc_r+0xc6>
 8007d8c:	2a0b      	cmp	r2, #11
 8007d8e:	d916      	bls.n	8007dbe <_malloc_r+0xba>
 8007d90:	1961      	adds	r1, r4, r5
 8007d92:	42a3      	cmp	r3, r4
 8007d94:	6025      	str	r5, [r4, #0]
 8007d96:	bf18      	it	ne
 8007d98:	6059      	strne	r1, [r3, #4]
 8007d9a:	6863      	ldr	r3, [r4, #4]
 8007d9c:	bf08      	it	eq
 8007d9e:	6031      	streq	r1, [r6, #0]
 8007da0:	5162      	str	r2, [r4, r5]
 8007da2:	604b      	str	r3, [r1, #4]
 8007da4:	4638      	mov	r0, r7
 8007da6:	f104 060b 	add.w	r6, r4, #11
 8007daa:	f000 fbbd 	bl	8008528 <__malloc_unlock>
 8007dae:	f026 0607 	bic.w	r6, r6, #7
 8007db2:	1d23      	adds	r3, r4, #4
 8007db4:	1af2      	subs	r2, r6, r3
 8007db6:	d0b6      	beq.n	8007d26 <_malloc_r+0x22>
 8007db8:	1b9b      	subs	r3, r3, r6
 8007dba:	50a3      	str	r3, [r4, r2]
 8007dbc:	e7b3      	b.n	8007d26 <_malloc_r+0x22>
 8007dbe:	6862      	ldr	r2, [r4, #4]
 8007dc0:	42a3      	cmp	r3, r4
 8007dc2:	bf0c      	ite	eq
 8007dc4:	6032      	streq	r2, [r6, #0]
 8007dc6:	605a      	strne	r2, [r3, #4]
 8007dc8:	e7ec      	b.n	8007da4 <_malloc_r+0xa0>
 8007dca:	4623      	mov	r3, r4
 8007dcc:	6864      	ldr	r4, [r4, #4]
 8007dce:	e7b2      	b.n	8007d36 <_malloc_r+0x32>
 8007dd0:	4634      	mov	r4, r6
 8007dd2:	6876      	ldr	r6, [r6, #4]
 8007dd4:	e7b9      	b.n	8007d4a <_malloc_r+0x46>
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	603b      	str	r3, [r7, #0]
 8007dda:	4638      	mov	r0, r7
 8007ddc:	f000 fba4 	bl	8008528 <__malloc_unlock>
 8007de0:	e7a1      	b.n	8007d26 <_malloc_r+0x22>
 8007de2:	6025      	str	r5, [r4, #0]
 8007de4:	e7de      	b.n	8007da4 <_malloc_r+0xa0>
 8007de6:	bf00      	nop
 8007de8:	200003ec 	.word	0x200003ec

08007dec <__sfputc_r>:
 8007dec:	6893      	ldr	r3, [r2, #8]
 8007dee:	3b01      	subs	r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	b410      	push	{r4}
 8007df4:	6093      	str	r3, [r2, #8]
 8007df6:	da08      	bge.n	8007e0a <__sfputc_r+0x1e>
 8007df8:	6994      	ldr	r4, [r2, #24]
 8007dfa:	42a3      	cmp	r3, r4
 8007dfc:	db01      	blt.n	8007e02 <__sfputc_r+0x16>
 8007dfe:	290a      	cmp	r1, #10
 8007e00:	d103      	bne.n	8007e0a <__sfputc_r+0x1e>
 8007e02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e06:	f7ff bc31 	b.w	800766c <__swbuf_r>
 8007e0a:	6813      	ldr	r3, [r2, #0]
 8007e0c:	1c58      	adds	r0, r3, #1
 8007e0e:	6010      	str	r0, [r2, #0]
 8007e10:	7019      	strb	r1, [r3, #0]
 8007e12:	4608      	mov	r0, r1
 8007e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <__sfputs_r>:
 8007e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	460f      	mov	r7, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	18d5      	adds	r5, r2, r3
 8007e24:	42ac      	cmp	r4, r5
 8007e26:	d101      	bne.n	8007e2c <__sfputs_r+0x12>
 8007e28:	2000      	movs	r0, #0
 8007e2a:	e007      	b.n	8007e3c <__sfputs_r+0x22>
 8007e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e30:	463a      	mov	r2, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	f7ff ffda 	bl	8007dec <__sfputc_r>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d1f3      	bne.n	8007e24 <__sfputs_r+0xa>
 8007e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e40 <_vfiprintf_r>:
 8007e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e44:	460d      	mov	r5, r1
 8007e46:	b09d      	sub	sp, #116	; 0x74
 8007e48:	4614      	mov	r4, r2
 8007e4a:	4698      	mov	r8, r3
 8007e4c:	4606      	mov	r6, r0
 8007e4e:	b118      	cbz	r0, 8007e58 <_vfiprintf_r+0x18>
 8007e50:	6983      	ldr	r3, [r0, #24]
 8007e52:	b90b      	cbnz	r3, 8007e58 <_vfiprintf_r+0x18>
 8007e54:	f7ff fde4 	bl	8007a20 <__sinit>
 8007e58:	4b89      	ldr	r3, [pc, #548]	; (8008080 <_vfiprintf_r+0x240>)
 8007e5a:	429d      	cmp	r5, r3
 8007e5c:	d11b      	bne.n	8007e96 <_vfiprintf_r+0x56>
 8007e5e:	6875      	ldr	r5, [r6, #4]
 8007e60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e62:	07d9      	lsls	r1, r3, #31
 8007e64:	d405      	bmi.n	8007e72 <_vfiprintf_r+0x32>
 8007e66:	89ab      	ldrh	r3, [r5, #12]
 8007e68:	059a      	lsls	r2, r3, #22
 8007e6a:	d402      	bmi.n	8007e72 <_vfiprintf_r+0x32>
 8007e6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e6e:	f7ff fe75 	bl	8007b5c <__retarget_lock_acquire_recursive>
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	071b      	lsls	r3, r3, #28
 8007e76:	d501      	bpl.n	8007e7c <_vfiprintf_r+0x3c>
 8007e78:	692b      	ldr	r3, [r5, #16]
 8007e7a:	b9eb      	cbnz	r3, 8007eb8 <_vfiprintf_r+0x78>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4630      	mov	r0, r6
 8007e80:	f7ff fc46 	bl	8007710 <__swsetup_r>
 8007e84:	b1c0      	cbz	r0, 8007eb8 <_vfiprintf_r+0x78>
 8007e86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e88:	07dc      	lsls	r4, r3, #31
 8007e8a:	d50e      	bpl.n	8007eaa <_vfiprintf_r+0x6a>
 8007e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e90:	b01d      	add	sp, #116	; 0x74
 8007e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e96:	4b7b      	ldr	r3, [pc, #492]	; (8008084 <_vfiprintf_r+0x244>)
 8007e98:	429d      	cmp	r5, r3
 8007e9a:	d101      	bne.n	8007ea0 <_vfiprintf_r+0x60>
 8007e9c:	68b5      	ldr	r5, [r6, #8]
 8007e9e:	e7df      	b.n	8007e60 <_vfiprintf_r+0x20>
 8007ea0:	4b79      	ldr	r3, [pc, #484]	; (8008088 <_vfiprintf_r+0x248>)
 8007ea2:	429d      	cmp	r5, r3
 8007ea4:	bf08      	it	eq
 8007ea6:	68f5      	ldreq	r5, [r6, #12]
 8007ea8:	e7da      	b.n	8007e60 <_vfiprintf_r+0x20>
 8007eaa:	89ab      	ldrh	r3, [r5, #12]
 8007eac:	0598      	lsls	r0, r3, #22
 8007eae:	d4ed      	bmi.n	8007e8c <_vfiprintf_r+0x4c>
 8007eb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007eb2:	f7ff fe54 	bl	8007b5e <__retarget_lock_release_recursive>
 8007eb6:	e7e9      	b.n	8007e8c <_vfiprintf_r+0x4c>
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9309      	str	r3, [sp, #36]	; 0x24
 8007ebc:	2320      	movs	r3, #32
 8007ebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ec6:	2330      	movs	r3, #48	; 0x30
 8007ec8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800808c <_vfiprintf_r+0x24c>
 8007ecc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ed0:	f04f 0901 	mov.w	r9, #1
 8007ed4:	4623      	mov	r3, r4
 8007ed6:	469a      	mov	sl, r3
 8007ed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007edc:	b10a      	cbz	r2, 8007ee2 <_vfiprintf_r+0xa2>
 8007ede:	2a25      	cmp	r2, #37	; 0x25
 8007ee0:	d1f9      	bne.n	8007ed6 <_vfiprintf_r+0x96>
 8007ee2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ee6:	d00b      	beq.n	8007f00 <_vfiprintf_r+0xc0>
 8007ee8:	465b      	mov	r3, fp
 8007eea:	4622      	mov	r2, r4
 8007eec:	4629      	mov	r1, r5
 8007eee:	4630      	mov	r0, r6
 8007ef0:	f7ff ff93 	bl	8007e1a <__sfputs_r>
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	f000 80aa 	beq.w	800804e <_vfiprintf_r+0x20e>
 8007efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007efc:	445a      	add	r2, fp
 8007efe:	9209      	str	r2, [sp, #36]	; 0x24
 8007f00:	f89a 3000 	ldrb.w	r3, [sl]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 80a2 	beq.w	800804e <_vfiprintf_r+0x20e>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f14:	f10a 0a01 	add.w	sl, sl, #1
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	9307      	str	r3, [sp, #28]
 8007f1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f20:	931a      	str	r3, [sp, #104]	; 0x68
 8007f22:	4654      	mov	r4, sl
 8007f24:	2205      	movs	r2, #5
 8007f26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f2a:	4858      	ldr	r0, [pc, #352]	; (800808c <_vfiprintf_r+0x24c>)
 8007f2c:	f7f8 f950 	bl	80001d0 <memchr>
 8007f30:	9a04      	ldr	r2, [sp, #16]
 8007f32:	b9d8      	cbnz	r0, 8007f6c <_vfiprintf_r+0x12c>
 8007f34:	06d1      	lsls	r1, r2, #27
 8007f36:	bf44      	itt	mi
 8007f38:	2320      	movmi	r3, #32
 8007f3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f3e:	0713      	lsls	r3, r2, #28
 8007f40:	bf44      	itt	mi
 8007f42:	232b      	movmi	r3, #43	; 0x2b
 8007f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f48:	f89a 3000 	ldrb.w	r3, [sl]
 8007f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f4e:	d015      	beq.n	8007f7c <_vfiprintf_r+0x13c>
 8007f50:	9a07      	ldr	r2, [sp, #28]
 8007f52:	4654      	mov	r4, sl
 8007f54:	2000      	movs	r0, #0
 8007f56:	f04f 0c0a 	mov.w	ip, #10
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f60:	3b30      	subs	r3, #48	; 0x30
 8007f62:	2b09      	cmp	r3, #9
 8007f64:	d94e      	bls.n	8008004 <_vfiprintf_r+0x1c4>
 8007f66:	b1b0      	cbz	r0, 8007f96 <_vfiprintf_r+0x156>
 8007f68:	9207      	str	r2, [sp, #28]
 8007f6a:	e014      	b.n	8007f96 <_vfiprintf_r+0x156>
 8007f6c:	eba0 0308 	sub.w	r3, r0, r8
 8007f70:	fa09 f303 	lsl.w	r3, r9, r3
 8007f74:	4313      	orrs	r3, r2
 8007f76:	9304      	str	r3, [sp, #16]
 8007f78:	46a2      	mov	sl, r4
 8007f7a:	e7d2      	b.n	8007f22 <_vfiprintf_r+0xe2>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	1d19      	adds	r1, r3, #4
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	9103      	str	r1, [sp, #12]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bfbb      	ittet	lt
 8007f88:	425b      	neglt	r3, r3
 8007f8a:	f042 0202 	orrlt.w	r2, r2, #2
 8007f8e:	9307      	strge	r3, [sp, #28]
 8007f90:	9307      	strlt	r3, [sp, #28]
 8007f92:	bfb8      	it	lt
 8007f94:	9204      	strlt	r2, [sp, #16]
 8007f96:	7823      	ldrb	r3, [r4, #0]
 8007f98:	2b2e      	cmp	r3, #46	; 0x2e
 8007f9a:	d10c      	bne.n	8007fb6 <_vfiprintf_r+0x176>
 8007f9c:	7863      	ldrb	r3, [r4, #1]
 8007f9e:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa0:	d135      	bne.n	800800e <_vfiprintf_r+0x1ce>
 8007fa2:	9b03      	ldr	r3, [sp, #12]
 8007fa4:	1d1a      	adds	r2, r3, #4
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	9203      	str	r2, [sp, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	bfb8      	it	lt
 8007fae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007fb2:	3402      	adds	r4, #2
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800809c <_vfiprintf_r+0x25c>
 8007fba:	7821      	ldrb	r1, [r4, #0]
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	4650      	mov	r0, sl
 8007fc0:	f7f8 f906 	bl	80001d0 <memchr>
 8007fc4:	b140      	cbz	r0, 8007fd8 <_vfiprintf_r+0x198>
 8007fc6:	2340      	movs	r3, #64	; 0x40
 8007fc8:	eba0 000a 	sub.w	r0, r0, sl
 8007fcc:	fa03 f000 	lsl.w	r0, r3, r0
 8007fd0:	9b04      	ldr	r3, [sp, #16]
 8007fd2:	4303      	orrs	r3, r0
 8007fd4:	3401      	adds	r4, #1
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fdc:	482c      	ldr	r0, [pc, #176]	; (8008090 <_vfiprintf_r+0x250>)
 8007fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fe2:	2206      	movs	r2, #6
 8007fe4:	f7f8 f8f4 	bl	80001d0 <memchr>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d03f      	beq.n	800806c <_vfiprintf_r+0x22c>
 8007fec:	4b29      	ldr	r3, [pc, #164]	; (8008094 <_vfiprintf_r+0x254>)
 8007fee:	bb1b      	cbnz	r3, 8008038 <_vfiprintf_r+0x1f8>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	3307      	adds	r3, #7
 8007ff4:	f023 0307 	bic.w	r3, r3, #7
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ffe:	443b      	add	r3, r7
 8008000:	9309      	str	r3, [sp, #36]	; 0x24
 8008002:	e767      	b.n	8007ed4 <_vfiprintf_r+0x94>
 8008004:	fb0c 3202 	mla	r2, ip, r2, r3
 8008008:	460c      	mov	r4, r1
 800800a:	2001      	movs	r0, #1
 800800c:	e7a5      	b.n	8007f5a <_vfiprintf_r+0x11a>
 800800e:	2300      	movs	r3, #0
 8008010:	3401      	adds	r4, #1
 8008012:	9305      	str	r3, [sp, #20]
 8008014:	4619      	mov	r1, r3
 8008016:	f04f 0c0a 	mov.w	ip, #10
 800801a:	4620      	mov	r0, r4
 800801c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008020:	3a30      	subs	r2, #48	; 0x30
 8008022:	2a09      	cmp	r2, #9
 8008024:	d903      	bls.n	800802e <_vfiprintf_r+0x1ee>
 8008026:	2b00      	cmp	r3, #0
 8008028:	d0c5      	beq.n	8007fb6 <_vfiprintf_r+0x176>
 800802a:	9105      	str	r1, [sp, #20]
 800802c:	e7c3      	b.n	8007fb6 <_vfiprintf_r+0x176>
 800802e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008032:	4604      	mov	r4, r0
 8008034:	2301      	movs	r3, #1
 8008036:	e7f0      	b.n	800801a <_vfiprintf_r+0x1da>
 8008038:	ab03      	add	r3, sp, #12
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	462a      	mov	r2, r5
 800803e:	4b16      	ldr	r3, [pc, #88]	; (8008098 <_vfiprintf_r+0x258>)
 8008040:	a904      	add	r1, sp, #16
 8008042:	4630      	mov	r0, r6
 8008044:	f3af 8000 	nop.w
 8008048:	4607      	mov	r7, r0
 800804a:	1c78      	adds	r0, r7, #1
 800804c:	d1d6      	bne.n	8007ffc <_vfiprintf_r+0x1bc>
 800804e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008050:	07d9      	lsls	r1, r3, #31
 8008052:	d405      	bmi.n	8008060 <_vfiprintf_r+0x220>
 8008054:	89ab      	ldrh	r3, [r5, #12]
 8008056:	059a      	lsls	r2, r3, #22
 8008058:	d402      	bmi.n	8008060 <_vfiprintf_r+0x220>
 800805a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800805c:	f7ff fd7f 	bl	8007b5e <__retarget_lock_release_recursive>
 8008060:	89ab      	ldrh	r3, [r5, #12]
 8008062:	065b      	lsls	r3, r3, #25
 8008064:	f53f af12 	bmi.w	8007e8c <_vfiprintf_r+0x4c>
 8008068:	9809      	ldr	r0, [sp, #36]	; 0x24
 800806a:	e711      	b.n	8007e90 <_vfiprintf_r+0x50>
 800806c:	ab03      	add	r3, sp, #12
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	462a      	mov	r2, r5
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <_vfiprintf_r+0x258>)
 8008074:	a904      	add	r1, sp, #16
 8008076:	4630      	mov	r0, r6
 8008078:	f000 f880 	bl	800817c <_printf_i>
 800807c:	e7e4      	b.n	8008048 <_vfiprintf_r+0x208>
 800807e:	bf00      	nop
 8008080:	08008ce8 	.word	0x08008ce8
 8008084:	08008d08 	.word	0x08008d08
 8008088:	08008cc8 	.word	0x08008cc8
 800808c:	08008d28 	.word	0x08008d28
 8008090:	08008d32 	.word	0x08008d32
 8008094:	00000000 	.word	0x00000000
 8008098:	08007e1b 	.word	0x08007e1b
 800809c:	08008d2e 	.word	0x08008d2e

080080a0 <_printf_common>:
 80080a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	4616      	mov	r6, r2
 80080a6:	4699      	mov	r9, r3
 80080a8:	688a      	ldr	r2, [r1, #8]
 80080aa:	690b      	ldr	r3, [r1, #16]
 80080ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080b0:	4293      	cmp	r3, r2
 80080b2:	bfb8      	it	lt
 80080b4:	4613      	movlt	r3, r2
 80080b6:	6033      	str	r3, [r6, #0]
 80080b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80080bc:	4607      	mov	r7, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	b10a      	cbz	r2, 80080c6 <_printf_common+0x26>
 80080c2:	3301      	adds	r3, #1
 80080c4:	6033      	str	r3, [r6, #0]
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	0699      	lsls	r1, r3, #26
 80080ca:	bf42      	ittt	mi
 80080cc:	6833      	ldrmi	r3, [r6, #0]
 80080ce:	3302      	addmi	r3, #2
 80080d0:	6033      	strmi	r3, [r6, #0]
 80080d2:	6825      	ldr	r5, [r4, #0]
 80080d4:	f015 0506 	ands.w	r5, r5, #6
 80080d8:	d106      	bne.n	80080e8 <_printf_common+0x48>
 80080da:	f104 0a19 	add.w	sl, r4, #25
 80080de:	68e3      	ldr	r3, [r4, #12]
 80080e0:	6832      	ldr	r2, [r6, #0]
 80080e2:	1a9b      	subs	r3, r3, r2
 80080e4:	42ab      	cmp	r3, r5
 80080e6:	dc26      	bgt.n	8008136 <_printf_common+0x96>
 80080e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80080ec:	1e13      	subs	r3, r2, #0
 80080ee:	6822      	ldr	r2, [r4, #0]
 80080f0:	bf18      	it	ne
 80080f2:	2301      	movne	r3, #1
 80080f4:	0692      	lsls	r2, r2, #26
 80080f6:	d42b      	bmi.n	8008150 <_printf_common+0xb0>
 80080f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080fc:	4649      	mov	r1, r9
 80080fe:	4638      	mov	r0, r7
 8008100:	47c0      	blx	r8
 8008102:	3001      	adds	r0, #1
 8008104:	d01e      	beq.n	8008144 <_printf_common+0xa4>
 8008106:	6823      	ldr	r3, [r4, #0]
 8008108:	68e5      	ldr	r5, [r4, #12]
 800810a:	6832      	ldr	r2, [r6, #0]
 800810c:	f003 0306 	and.w	r3, r3, #6
 8008110:	2b04      	cmp	r3, #4
 8008112:	bf08      	it	eq
 8008114:	1aad      	subeq	r5, r5, r2
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	6922      	ldr	r2, [r4, #16]
 800811a:	bf0c      	ite	eq
 800811c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008120:	2500      	movne	r5, #0
 8008122:	4293      	cmp	r3, r2
 8008124:	bfc4      	itt	gt
 8008126:	1a9b      	subgt	r3, r3, r2
 8008128:	18ed      	addgt	r5, r5, r3
 800812a:	2600      	movs	r6, #0
 800812c:	341a      	adds	r4, #26
 800812e:	42b5      	cmp	r5, r6
 8008130:	d11a      	bne.n	8008168 <_printf_common+0xc8>
 8008132:	2000      	movs	r0, #0
 8008134:	e008      	b.n	8008148 <_printf_common+0xa8>
 8008136:	2301      	movs	r3, #1
 8008138:	4652      	mov	r2, sl
 800813a:	4649      	mov	r1, r9
 800813c:	4638      	mov	r0, r7
 800813e:	47c0      	blx	r8
 8008140:	3001      	adds	r0, #1
 8008142:	d103      	bne.n	800814c <_printf_common+0xac>
 8008144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800814c:	3501      	adds	r5, #1
 800814e:	e7c6      	b.n	80080de <_printf_common+0x3e>
 8008150:	18e1      	adds	r1, r4, r3
 8008152:	1c5a      	adds	r2, r3, #1
 8008154:	2030      	movs	r0, #48	; 0x30
 8008156:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800815a:	4422      	add	r2, r4
 800815c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008160:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008164:	3302      	adds	r3, #2
 8008166:	e7c7      	b.n	80080f8 <_printf_common+0x58>
 8008168:	2301      	movs	r3, #1
 800816a:	4622      	mov	r2, r4
 800816c:	4649      	mov	r1, r9
 800816e:	4638      	mov	r0, r7
 8008170:	47c0      	blx	r8
 8008172:	3001      	adds	r0, #1
 8008174:	d0e6      	beq.n	8008144 <_printf_common+0xa4>
 8008176:	3601      	adds	r6, #1
 8008178:	e7d9      	b.n	800812e <_printf_common+0x8e>
	...

0800817c <_printf_i>:
 800817c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	7e0f      	ldrb	r7, [r1, #24]
 8008182:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008184:	2f78      	cmp	r7, #120	; 0x78
 8008186:	4691      	mov	r9, r2
 8008188:	4680      	mov	r8, r0
 800818a:	460c      	mov	r4, r1
 800818c:	469a      	mov	sl, r3
 800818e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008192:	d807      	bhi.n	80081a4 <_printf_i+0x28>
 8008194:	2f62      	cmp	r7, #98	; 0x62
 8008196:	d80a      	bhi.n	80081ae <_printf_i+0x32>
 8008198:	2f00      	cmp	r7, #0
 800819a:	f000 80d8 	beq.w	800834e <_printf_i+0x1d2>
 800819e:	2f58      	cmp	r7, #88	; 0x58
 80081a0:	f000 80a3 	beq.w	80082ea <_printf_i+0x16e>
 80081a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081ac:	e03a      	b.n	8008224 <_printf_i+0xa8>
 80081ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081b2:	2b15      	cmp	r3, #21
 80081b4:	d8f6      	bhi.n	80081a4 <_printf_i+0x28>
 80081b6:	a101      	add	r1, pc, #4	; (adr r1, 80081bc <_printf_i+0x40>)
 80081b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80081bc:	08008215 	.word	0x08008215
 80081c0:	08008229 	.word	0x08008229
 80081c4:	080081a5 	.word	0x080081a5
 80081c8:	080081a5 	.word	0x080081a5
 80081cc:	080081a5 	.word	0x080081a5
 80081d0:	080081a5 	.word	0x080081a5
 80081d4:	08008229 	.word	0x08008229
 80081d8:	080081a5 	.word	0x080081a5
 80081dc:	080081a5 	.word	0x080081a5
 80081e0:	080081a5 	.word	0x080081a5
 80081e4:	080081a5 	.word	0x080081a5
 80081e8:	08008335 	.word	0x08008335
 80081ec:	08008259 	.word	0x08008259
 80081f0:	08008317 	.word	0x08008317
 80081f4:	080081a5 	.word	0x080081a5
 80081f8:	080081a5 	.word	0x080081a5
 80081fc:	08008357 	.word	0x08008357
 8008200:	080081a5 	.word	0x080081a5
 8008204:	08008259 	.word	0x08008259
 8008208:	080081a5 	.word	0x080081a5
 800820c:	080081a5 	.word	0x080081a5
 8008210:	0800831f 	.word	0x0800831f
 8008214:	682b      	ldr	r3, [r5, #0]
 8008216:	1d1a      	adds	r2, r3, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	602a      	str	r2, [r5, #0]
 800821c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008220:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008224:	2301      	movs	r3, #1
 8008226:	e0a3      	b.n	8008370 <_printf_i+0x1f4>
 8008228:	6820      	ldr	r0, [r4, #0]
 800822a:	6829      	ldr	r1, [r5, #0]
 800822c:	0606      	lsls	r6, r0, #24
 800822e:	f101 0304 	add.w	r3, r1, #4
 8008232:	d50a      	bpl.n	800824a <_printf_i+0xce>
 8008234:	680e      	ldr	r6, [r1, #0]
 8008236:	602b      	str	r3, [r5, #0]
 8008238:	2e00      	cmp	r6, #0
 800823a:	da03      	bge.n	8008244 <_printf_i+0xc8>
 800823c:	232d      	movs	r3, #45	; 0x2d
 800823e:	4276      	negs	r6, r6
 8008240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008244:	485e      	ldr	r0, [pc, #376]	; (80083c0 <_printf_i+0x244>)
 8008246:	230a      	movs	r3, #10
 8008248:	e019      	b.n	800827e <_printf_i+0x102>
 800824a:	680e      	ldr	r6, [r1, #0]
 800824c:	602b      	str	r3, [r5, #0]
 800824e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008252:	bf18      	it	ne
 8008254:	b236      	sxthne	r6, r6
 8008256:	e7ef      	b.n	8008238 <_printf_i+0xbc>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	6820      	ldr	r0, [r4, #0]
 800825c:	1d19      	adds	r1, r3, #4
 800825e:	6029      	str	r1, [r5, #0]
 8008260:	0601      	lsls	r1, r0, #24
 8008262:	d501      	bpl.n	8008268 <_printf_i+0xec>
 8008264:	681e      	ldr	r6, [r3, #0]
 8008266:	e002      	b.n	800826e <_printf_i+0xf2>
 8008268:	0646      	lsls	r6, r0, #25
 800826a:	d5fb      	bpl.n	8008264 <_printf_i+0xe8>
 800826c:	881e      	ldrh	r6, [r3, #0]
 800826e:	4854      	ldr	r0, [pc, #336]	; (80083c0 <_printf_i+0x244>)
 8008270:	2f6f      	cmp	r7, #111	; 0x6f
 8008272:	bf0c      	ite	eq
 8008274:	2308      	moveq	r3, #8
 8008276:	230a      	movne	r3, #10
 8008278:	2100      	movs	r1, #0
 800827a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800827e:	6865      	ldr	r5, [r4, #4]
 8008280:	60a5      	str	r5, [r4, #8]
 8008282:	2d00      	cmp	r5, #0
 8008284:	bfa2      	ittt	ge
 8008286:	6821      	ldrge	r1, [r4, #0]
 8008288:	f021 0104 	bicge.w	r1, r1, #4
 800828c:	6021      	strge	r1, [r4, #0]
 800828e:	b90e      	cbnz	r6, 8008294 <_printf_i+0x118>
 8008290:	2d00      	cmp	r5, #0
 8008292:	d04d      	beq.n	8008330 <_printf_i+0x1b4>
 8008294:	4615      	mov	r5, r2
 8008296:	fbb6 f1f3 	udiv	r1, r6, r3
 800829a:	fb03 6711 	mls	r7, r3, r1, r6
 800829e:	5dc7      	ldrb	r7, [r0, r7]
 80082a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082a4:	4637      	mov	r7, r6
 80082a6:	42bb      	cmp	r3, r7
 80082a8:	460e      	mov	r6, r1
 80082aa:	d9f4      	bls.n	8008296 <_printf_i+0x11a>
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d10b      	bne.n	80082c8 <_printf_i+0x14c>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	07de      	lsls	r6, r3, #31
 80082b4:	d508      	bpl.n	80082c8 <_printf_i+0x14c>
 80082b6:	6923      	ldr	r3, [r4, #16]
 80082b8:	6861      	ldr	r1, [r4, #4]
 80082ba:	4299      	cmp	r1, r3
 80082bc:	bfde      	ittt	le
 80082be:	2330      	movle	r3, #48	; 0x30
 80082c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80082c4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80082c8:	1b52      	subs	r2, r2, r5
 80082ca:	6122      	str	r2, [r4, #16]
 80082cc:	f8cd a000 	str.w	sl, [sp]
 80082d0:	464b      	mov	r3, r9
 80082d2:	aa03      	add	r2, sp, #12
 80082d4:	4621      	mov	r1, r4
 80082d6:	4640      	mov	r0, r8
 80082d8:	f7ff fee2 	bl	80080a0 <_printf_common>
 80082dc:	3001      	adds	r0, #1
 80082de:	d14c      	bne.n	800837a <_printf_i+0x1fe>
 80082e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e4:	b004      	add	sp, #16
 80082e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ea:	4835      	ldr	r0, [pc, #212]	; (80083c0 <_printf_i+0x244>)
 80082ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80082f0:	6829      	ldr	r1, [r5, #0]
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80082f8:	6029      	str	r1, [r5, #0]
 80082fa:	061d      	lsls	r5, r3, #24
 80082fc:	d514      	bpl.n	8008328 <_printf_i+0x1ac>
 80082fe:	07df      	lsls	r7, r3, #31
 8008300:	bf44      	itt	mi
 8008302:	f043 0320 	orrmi.w	r3, r3, #32
 8008306:	6023      	strmi	r3, [r4, #0]
 8008308:	b91e      	cbnz	r6, 8008312 <_printf_i+0x196>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	f023 0320 	bic.w	r3, r3, #32
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	2310      	movs	r3, #16
 8008314:	e7b0      	b.n	8008278 <_printf_i+0xfc>
 8008316:	6823      	ldr	r3, [r4, #0]
 8008318:	f043 0320 	orr.w	r3, r3, #32
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	2378      	movs	r3, #120	; 0x78
 8008320:	4828      	ldr	r0, [pc, #160]	; (80083c4 <_printf_i+0x248>)
 8008322:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008326:	e7e3      	b.n	80082f0 <_printf_i+0x174>
 8008328:	0659      	lsls	r1, r3, #25
 800832a:	bf48      	it	mi
 800832c:	b2b6      	uxthmi	r6, r6
 800832e:	e7e6      	b.n	80082fe <_printf_i+0x182>
 8008330:	4615      	mov	r5, r2
 8008332:	e7bb      	b.n	80082ac <_printf_i+0x130>
 8008334:	682b      	ldr	r3, [r5, #0]
 8008336:	6826      	ldr	r6, [r4, #0]
 8008338:	6961      	ldr	r1, [r4, #20]
 800833a:	1d18      	adds	r0, r3, #4
 800833c:	6028      	str	r0, [r5, #0]
 800833e:	0635      	lsls	r5, r6, #24
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	d501      	bpl.n	8008348 <_printf_i+0x1cc>
 8008344:	6019      	str	r1, [r3, #0]
 8008346:	e002      	b.n	800834e <_printf_i+0x1d2>
 8008348:	0670      	lsls	r0, r6, #25
 800834a:	d5fb      	bpl.n	8008344 <_printf_i+0x1c8>
 800834c:	8019      	strh	r1, [r3, #0]
 800834e:	2300      	movs	r3, #0
 8008350:	6123      	str	r3, [r4, #16]
 8008352:	4615      	mov	r5, r2
 8008354:	e7ba      	b.n	80082cc <_printf_i+0x150>
 8008356:	682b      	ldr	r3, [r5, #0]
 8008358:	1d1a      	adds	r2, r3, #4
 800835a:	602a      	str	r2, [r5, #0]
 800835c:	681d      	ldr	r5, [r3, #0]
 800835e:	6862      	ldr	r2, [r4, #4]
 8008360:	2100      	movs	r1, #0
 8008362:	4628      	mov	r0, r5
 8008364:	f7f7 ff34 	bl	80001d0 <memchr>
 8008368:	b108      	cbz	r0, 800836e <_printf_i+0x1f2>
 800836a:	1b40      	subs	r0, r0, r5
 800836c:	6060      	str	r0, [r4, #4]
 800836e:	6863      	ldr	r3, [r4, #4]
 8008370:	6123      	str	r3, [r4, #16]
 8008372:	2300      	movs	r3, #0
 8008374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008378:	e7a8      	b.n	80082cc <_printf_i+0x150>
 800837a:	6923      	ldr	r3, [r4, #16]
 800837c:	462a      	mov	r2, r5
 800837e:	4649      	mov	r1, r9
 8008380:	4640      	mov	r0, r8
 8008382:	47d0      	blx	sl
 8008384:	3001      	adds	r0, #1
 8008386:	d0ab      	beq.n	80082e0 <_printf_i+0x164>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	079b      	lsls	r3, r3, #30
 800838c:	d413      	bmi.n	80083b6 <_printf_i+0x23a>
 800838e:	68e0      	ldr	r0, [r4, #12]
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	4298      	cmp	r0, r3
 8008394:	bfb8      	it	lt
 8008396:	4618      	movlt	r0, r3
 8008398:	e7a4      	b.n	80082e4 <_printf_i+0x168>
 800839a:	2301      	movs	r3, #1
 800839c:	4632      	mov	r2, r6
 800839e:	4649      	mov	r1, r9
 80083a0:	4640      	mov	r0, r8
 80083a2:	47d0      	blx	sl
 80083a4:	3001      	adds	r0, #1
 80083a6:	d09b      	beq.n	80082e0 <_printf_i+0x164>
 80083a8:	3501      	adds	r5, #1
 80083aa:	68e3      	ldr	r3, [r4, #12]
 80083ac:	9903      	ldr	r1, [sp, #12]
 80083ae:	1a5b      	subs	r3, r3, r1
 80083b0:	42ab      	cmp	r3, r5
 80083b2:	dcf2      	bgt.n	800839a <_printf_i+0x21e>
 80083b4:	e7eb      	b.n	800838e <_printf_i+0x212>
 80083b6:	2500      	movs	r5, #0
 80083b8:	f104 0619 	add.w	r6, r4, #25
 80083bc:	e7f5      	b.n	80083aa <_printf_i+0x22e>
 80083be:	bf00      	nop
 80083c0:	08008d39 	.word	0x08008d39
 80083c4:	08008d4a 	.word	0x08008d4a

080083c8 <_sbrk_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d06      	ldr	r5, [pc, #24]	; (80083e4 <_sbrk_r+0x1c>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7f9 fea4 	bl	8002120 <_sbrk>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_sbrk_r+0x1a>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_sbrk_r+0x1a>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	200003f4 	.word	0x200003f4

080083e8 <__sread>:
 80083e8:	b510      	push	{r4, lr}
 80083ea:	460c      	mov	r4, r1
 80083ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083f0:	f000 f8a0 	bl	8008534 <_read_r>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	bfab      	itete	ge
 80083f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083fa:	89a3      	ldrhlt	r3, [r4, #12]
 80083fc:	181b      	addge	r3, r3, r0
 80083fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008402:	bfac      	ite	ge
 8008404:	6563      	strge	r3, [r4, #84]	; 0x54
 8008406:	81a3      	strhlt	r3, [r4, #12]
 8008408:	bd10      	pop	{r4, pc}

0800840a <__swrite>:
 800840a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	461f      	mov	r7, r3
 8008410:	898b      	ldrh	r3, [r1, #12]
 8008412:	05db      	lsls	r3, r3, #23
 8008414:	4605      	mov	r5, r0
 8008416:	460c      	mov	r4, r1
 8008418:	4616      	mov	r6, r2
 800841a:	d505      	bpl.n	8008428 <__swrite+0x1e>
 800841c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008420:	2302      	movs	r3, #2
 8008422:	2200      	movs	r2, #0
 8008424:	f000 f868 	bl	80084f8 <_lseek_r>
 8008428:	89a3      	ldrh	r3, [r4, #12]
 800842a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800842e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	4632      	mov	r2, r6
 8008436:	463b      	mov	r3, r7
 8008438:	4628      	mov	r0, r5
 800843a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800843e:	f000 b817 	b.w	8008470 <_write_r>

08008442 <__sseek>:
 8008442:	b510      	push	{r4, lr}
 8008444:	460c      	mov	r4, r1
 8008446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800844a:	f000 f855 	bl	80084f8 <_lseek_r>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	bf15      	itete	ne
 8008454:	6560      	strne	r0, [r4, #84]	; 0x54
 8008456:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800845a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800845e:	81a3      	strheq	r3, [r4, #12]
 8008460:	bf18      	it	ne
 8008462:	81a3      	strhne	r3, [r4, #12]
 8008464:	bd10      	pop	{r4, pc}

08008466 <__sclose>:
 8008466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800846a:	f000 b813 	b.w	8008494 <_close_r>
	...

08008470 <_write_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4d07      	ldr	r5, [pc, #28]	; (8008490 <_write_r+0x20>)
 8008474:	4604      	mov	r4, r0
 8008476:	4608      	mov	r0, r1
 8008478:	4611      	mov	r1, r2
 800847a:	2200      	movs	r2, #0
 800847c:	602a      	str	r2, [r5, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f7f9 fdfd 	bl	800207e <_write>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_write_r+0x1e>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_write_r+0x1e>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	200003f4 	.word	0x200003f4

08008494 <_close_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d06      	ldr	r5, [pc, #24]	; (80084b0 <_close_r+0x1c>)
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	602b      	str	r3, [r5, #0]
 80084a0:	f7f9 fe09 	bl	80020b6 <_close>
 80084a4:	1c43      	adds	r3, r0, #1
 80084a6:	d102      	bne.n	80084ae <_close_r+0x1a>
 80084a8:	682b      	ldr	r3, [r5, #0]
 80084aa:	b103      	cbz	r3, 80084ae <_close_r+0x1a>
 80084ac:	6023      	str	r3, [r4, #0]
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	200003f4 	.word	0x200003f4

080084b4 <_fstat_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d07      	ldr	r5, [pc, #28]	; (80084d4 <_fstat_r+0x20>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	4611      	mov	r1, r2
 80084c0:	602b      	str	r3, [r5, #0]
 80084c2:	f7f9 fe04 	bl	80020ce <_fstat>
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	d102      	bne.n	80084d0 <_fstat_r+0x1c>
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	b103      	cbz	r3, 80084d0 <_fstat_r+0x1c>
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	bd38      	pop	{r3, r4, r5, pc}
 80084d2:	bf00      	nop
 80084d4:	200003f4 	.word	0x200003f4

080084d8 <_isatty_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d06      	ldr	r5, [pc, #24]	; (80084f4 <_isatty_r+0x1c>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	602b      	str	r3, [r5, #0]
 80084e4:	f7f9 fe03 	bl	80020ee <_isatty>
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d102      	bne.n	80084f2 <_isatty_r+0x1a>
 80084ec:	682b      	ldr	r3, [r5, #0]
 80084ee:	b103      	cbz	r3, 80084f2 <_isatty_r+0x1a>
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	bd38      	pop	{r3, r4, r5, pc}
 80084f4:	200003f4 	.word	0x200003f4

080084f8 <_lseek_r>:
 80084f8:	b538      	push	{r3, r4, r5, lr}
 80084fa:	4d07      	ldr	r5, [pc, #28]	; (8008518 <_lseek_r+0x20>)
 80084fc:	4604      	mov	r4, r0
 80084fe:	4608      	mov	r0, r1
 8008500:	4611      	mov	r1, r2
 8008502:	2200      	movs	r2, #0
 8008504:	602a      	str	r2, [r5, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	f7f9 fdfc 	bl	8002104 <_lseek>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_lseek_r+0x1e>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b103      	cbz	r3, 8008516 <_lseek_r+0x1e>
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	200003f4 	.word	0x200003f4

0800851c <__malloc_lock>:
 800851c:	4801      	ldr	r0, [pc, #4]	; (8008524 <__malloc_lock+0x8>)
 800851e:	f7ff bb1d 	b.w	8007b5c <__retarget_lock_acquire_recursive>
 8008522:	bf00      	nop
 8008524:	200003e8 	.word	0x200003e8

08008528 <__malloc_unlock>:
 8008528:	4801      	ldr	r0, [pc, #4]	; (8008530 <__malloc_unlock+0x8>)
 800852a:	f7ff bb18 	b.w	8007b5e <__retarget_lock_release_recursive>
 800852e:	bf00      	nop
 8008530:	200003e8 	.word	0x200003e8

08008534 <_read_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4d07      	ldr	r5, [pc, #28]	; (8008554 <_read_r+0x20>)
 8008538:	4604      	mov	r4, r0
 800853a:	4608      	mov	r0, r1
 800853c:	4611      	mov	r1, r2
 800853e:	2200      	movs	r2, #0
 8008540:	602a      	str	r2, [r5, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	f7f9 fd7e 	bl	8002044 <_read>
 8008548:	1c43      	adds	r3, r0, #1
 800854a:	d102      	bne.n	8008552 <_read_r+0x1e>
 800854c:	682b      	ldr	r3, [r5, #0]
 800854e:	b103      	cbz	r3, 8008552 <_read_r+0x1e>
 8008550:	6023      	str	r3, [r4, #0]
 8008552:	bd38      	pop	{r3, r4, r5, pc}
 8008554:	200003f4 	.word	0x200003f4

08008558 <atan2>:
 8008558:	f000 b802 	b.w	8008560 <__ieee754_atan2>
 800855c:	0000      	movs	r0, r0
	...

08008560 <__ieee754_atan2>:
 8008560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008564:	ec57 6b11 	vmov	r6, r7, d1
 8008568:	4273      	negs	r3, r6
 800856a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80086f0 <__ieee754_atan2+0x190>
 800856e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8008572:	4333      	orrs	r3, r6
 8008574:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8008578:	4573      	cmp	r3, lr
 800857a:	ec51 0b10 	vmov	r0, r1, d0
 800857e:	ee11 8a10 	vmov	r8, s2
 8008582:	d80a      	bhi.n	800859a <__ieee754_atan2+0x3a>
 8008584:	4244      	negs	r4, r0
 8008586:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800858a:	4304      	orrs	r4, r0
 800858c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8008590:	4574      	cmp	r4, lr
 8008592:	ee10 9a10 	vmov	r9, s0
 8008596:	468c      	mov	ip, r1
 8008598:	d907      	bls.n	80085aa <__ieee754_atan2+0x4a>
 800859a:	4632      	mov	r2, r6
 800859c:	463b      	mov	r3, r7
 800859e:	f7f7 fe6d 	bl	800027c <__adddf3>
 80085a2:	ec41 0b10 	vmov	d0, r0, r1
 80085a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085aa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80085ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80085b2:	4334      	orrs	r4, r6
 80085b4:	d103      	bne.n	80085be <__ieee754_atan2+0x5e>
 80085b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085ba:	f000 b89d 	b.w	80086f8 <atan>
 80085be:	17bc      	asrs	r4, r7, #30
 80085c0:	f004 0402 	and.w	r4, r4, #2
 80085c4:	ea53 0909 	orrs.w	r9, r3, r9
 80085c8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80085cc:	d107      	bne.n	80085de <__ieee754_atan2+0x7e>
 80085ce:	2c02      	cmp	r4, #2
 80085d0:	d060      	beq.n	8008694 <__ieee754_atan2+0x134>
 80085d2:	2c03      	cmp	r4, #3
 80085d4:	d1e5      	bne.n	80085a2 <__ieee754_atan2+0x42>
 80085d6:	a142      	add	r1, pc, #264	; (adr r1, 80086e0 <__ieee754_atan2+0x180>)
 80085d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085dc:	e7e1      	b.n	80085a2 <__ieee754_atan2+0x42>
 80085de:	ea52 0808 	orrs.w	r8, r2, r8
 80085e2:	d106      	bne.n	80085f2 <__ieee754_atan2+0x92>
 80085e4:	f1bc 0f00 	cmp.w	ip, #0
 80085e8:	da5f      	bge.n	80086aa <__ieee754_atan2+0x14a>
 80085ea:	a13f      	add	r1, pc, #252	; (adr r1, 80086e8 <__ieee754_atan2+0x188>)
 80085ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085f0:	e7d7      	b.n	80085a2 <__ieee754_atan2+0x42>
 80085f2:	4572      	cmp	r2, lr
 80085f4:	d10f      	bne.n	8008616 <__ieee754_atan2+0xb6>
 80085f6:	4293      	cmp	r3, r2
 80085f8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80085fc:	d107      	bne.n	800860e <__ieee754_atan2+0xae>
 80085fe:	2c02      	cmp	r4, #2
 8008600:	d84c      	bhi.n	800869c <__ieee754_atan2+0x13c>
 8008602:	4b35      	ldr	r3, [pc, #212]	; (80086d8 <__ieee754_atan2+0x178>)
 8008604:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008608:	e9d4 0100 	ldrd	r0, r1, [r4]
 800860c:	e7c9      	b.n	80085a2 <__ieee754_atan2+0x42>
 800860e:	2c02      	cmp	r4, #2
 8008610:	d848      	bhi.n	80086a4 <__ieee754_atan2+0x144>
 8008612:	4b32      	ldr	r3, [pc, #200]	; (80086dc <__ieee754_atan2+0x17c>)
 8008614:	e7f6      	b.n	8008604 <__ieee754_atan2+0xa4>
 8008616:	4573      	cmp	r3, lr
 8008618:	d0e4      	beq.n	80085e4 <__ieee754_atan2+0x84>
 800861a:	1a9b      	subs	r3, r3, r2
 800861c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8008620:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008624:	da1e      	bge.n	8008664 <__ieee754_atan2+0x104>
 8008626:	2f00      	cmp	r7, #0
 8008628:	da01      	bge.n	800862e <__ieee754_atan2+0xce>
 800862a:	323c      	adds	r2, #60	; 0x3c
 800862c:	db1e      	blt.n	800866c <__ieee754_atan2+0x10c>
 800862e:	4632      	mov	r2, r6
 8008630:	463b      	mov	r3, r7
 8008632:	f7f8 f903 	bl	800083c <__aeabi_ddiv>
 8008636:	ec41 0b10 	vmov	d0, r0, r1
 800863a:	f000 f9fd 	bl	8008a38 <fabs>
 800863e:	f000 f85b 	bl	80086f8 <atan>
 8008642:	ec51 0b10 	vmov	r0, r1, d0
 8008646:	2c01      	cmp	r4, #1
 8008648:	d013      	beq.n	8008672 <__ieee754_atan2+0x112>
 800864a:	2c02      	cmp	r4, #2
 800864c:	d015      	beq.n	800867a <__ieee754_atan2+0x11a>
 800864e:	2c00      	cmp	r4, #0
 8008650:	d0a7      	beq.n	80085a2 <__ieee754_atan2+0x42>
 8008652:	a319      	add	r3, pc, #100	; (adr r3, 80086b8 <__ieee754_atan2+0x158>)
 8008654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008658:	f7f7 fe0e 	bl	8000278 <__aeabi_dsub>
 800865c:	a318      	add	r3, pc, #96	; (adr r3, 80086c0 <__ieee754_atan2+0x160>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	e014      	b.n	800868e <__ieee754_atan2+0x12e>
 8008664:	a118      	add	r1, pc, #96	; (adr r1, 80086c8 <__ieee754_atan2+0x168>)
 8008666:	e9d1 0100 	ldrd	r0, r1, [r1]
 800866a:	e7ec      	b.n	8008646 <__ieee754_atan2+0xe6>
 800866c:	2000      	movs	r0, #0
 800866e:	2100      	movs	r1, #0
 8008670:	e7e9      	b.n	8008646 <__ieee754_atan2+0xe6>
 8008672:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008676:	4619      	mov	r1, r3
 8008678:	e793      	b.n	80085a2 <__ieee754_atan2+0x42>
 800867a:	a30f      	add	r3, pc, #60	; (adr r3, 80086b8 <__ieee754_atan2+0x158>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 fdfa 	bl	8000278 <__aeabi_dsub>
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	a10d      	add	r1, pc, #52	; (adr r1, 80086c0 <__ieee754_atan2+0x160>)
 800868a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800868e:	f7f7 fdf3 	bl	8000278 <__aeabi_dsub>
 8008692:	e786      	b.n	80085a2 <__ieee754_atan2+0x42>
 8008694:	a10a      	add	r1, pc, #40	; (adr r1, 80086c0 <__ieee754_atan2+0x160>)
 8008696:	e9d1 0100 	ldrd	r0, r1, [r1]
 800869a:	e782      	b.n	80085a2 <__ieee754_atan2+0x42>
 800869c:	a10c      	add	r1, pc, #48	; (adr r1, 80086d0 <__ieee754_atan2+0x170>)
 800869e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086a2:	e77e      	b.n	80085a2 <__ieee754_atan2+0x42>
 80086a4:	2000      	movs	r0, #0
 80086a6:	2100      	movs	r1, #0
 80086a8:	e77b      	b.n	80085a2 <__ieee754_atan2+0x42>
 80086aa:	a107      	add	r1, pc, #28	; (adr r1, 80086c8 <__ieee754_atan2+0x168>)
 80086ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086b0:	e777      	b.n	80085a2 <__ieee754_atan2+0x42>
 80086b2:	bf00      	nop
 80086b4:	f3af 8000 	nop.w
 80086b8:	33145c07 	.word	0x33145c07
 80086bc:	3ca1a626 	.word	0x3ca1a626
 80086c0:	54442d18 	.word	0x54442d18
 80086c4:	400921fb 	.word	0x400921fb
 80086c8:	54442d18 	.word	0x54442d18
 80086cc:	3ff921fb 	.word	0x3ff921fb
 80086d0:	54442d18 	.word	0x54442d18
 80086d4:	3fe921fb 	.word	0x3fe921fb
 80086d8:	08008d60 	.word	0x08008d60
 80086dc:	08008d78 	.word	0x08008d78
 80086e0:	54442d18 	.word	0x54442d18
 80086e4:	c00921fb 	.word	0xc00921fb
 80086e8:	54442d18 	.word	0x54442d18
 80086ec:	bff921fb 	.word	0xbff921fb
 80086f0:	7ff00000 	.word	0x7ff00000
 80086f4:	00000000 	.word	0x00000000

080086f8 <atan>:
 80086f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	ec55 4b10 	vmov	r4, r5, d0
 8008700:	4bc3      	ldr	r3, [pc, #780]	; (8008a10 <atan+0x318>)
 8008702:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008706:	429e      	cmp	r6, r3
 8008708:	46ab      	mov	fp, r5
 800870a:	dd18      	ble.n	800873e <atan+0x46>
 800870c:	4bc1      	ldr	r3, [pc, #772]	; (8008a14 <atan+0x31c>)
 800870e:	429e      	cmp	r6, r3
 8008710:	dc01      	bgt.n	8008716 <atan+0x1e>
 8008712:	d109      	bne.n	8008728 <atan+0x30>
 8008714:	b144      	cbz	r4, 8008728 <atan+0x30>
 8008716:	4622      	mov	r2, r4
 8008718:	462b      	mov	r3, r5
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	f7f7 fdad 	bl	800027c <__adddf3>
 8008722:	4604      	mov	r4, r0
 8008724:	460d      	mov	r5, r1
 8008726:	e006      	b.n	8008736 <atan+0x3e>
 8008728:	f1bb 0f00 	cmp.w	fp, #0
 800872c:	f300 8131 	bgt.w	8008992 <atan+0x29a>
 8008730:	a59b      	add	r5, pc, #620	; (adr r5, 80089a0 <atan+0x2a8>)
 8008732:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008736:	ec45 4b10 	vmov	d0, r4, r5
 800873a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873e:	4bb6      	ldr	r3, [pc, #728]	; (8008a18 <atan+0x320>)
 8008740:	429e      	cmp	r6, r3
 8008742:	dc14      	bgt.n	800876e <atan+0x76>
 8008744:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008748:	429e      	cmp	r6, r3
 800874a:	dc0d      	bgt.n	8008768 <atan+0x70>
 800874c:	a396      	add	r3, pc, #600	; (adr r3, 80089a8 <atan+0x2b0>)
 800874e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008752:	ee10 0a10 	vmov	r0, s0
 8008756:	4629      	mov	r1, r5
 8008758:	f7f7 fd90 	bl	800027c <__adddf3>
 800875c:	4baf      	ldr	r3, [pc, #700]	; (8008a1c <atan+0x324>)
 800875e:	2200      	movs	r2, #0
 8008760:	f7f8 f9d2 	bl	8000b08 <__aeabi_dcmpgt>
 8008764:	2800      	cmp	r0, #0
 8008766:	d1e6      	bne.n	8008736 <atan+0x3e>
 8008768:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800876c:	e02b      	b.n	80087c6 <atan+0xce>
 800876e:	f000 f963 	bl	8008a38 <fabs>
 8008772:	4bab      	ldr	r3, [pc, #684]	; (8008a20 <atan+0x328>)
 8008774:	429e      	cmp	r6, r3
 8008776:	ec55 4b10 	vmov	r4, r5, d0
 800877a:	f300 80bf 	bgt.w	80088fc <atan+0x204>
 800877e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008782:	429e      	cmp	r6, r3
 8008784:	f300 80a0 	bgt.w	80088c8 <atan+0x1d0>
 8008788:	ee10 2a10 	vmov	r2, s0
 800878c:	ee10 0a10 	vmov	r0, s0
 8008790:	462b      	mov	r3, r5
 8008792:	4629      	mov	r1, r5
 8008794:	f7f7 fd72 	bl	800027c <__adddf3>
 8008798:	4ba0      	ldr	r3, [pc, #640]	; (8008a1c <atan+0x324>)
 800879a:	2200      	movs	r2, #0
 800879c:	f7f7 fd6c 	bl	8000278 <__aeabi_dsub>
 80087a0:	2200      	movs	r2, #0
 80087a2:	4606      	mov	r6, r0
 80087a4:	460f      	mov	r7, r1
 80087a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80087aa:	4620      	mov	r0, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	f7f7 fd65 	bl	800027c <__adddf3>
 80087b2:	4602      	mov	r2, r0
 80087b4:	460b      	mov	r3, r1
 80087b6:	4630      	mov	r0, r6
 80087b8:	4639      	mov	r1, r7
 80087ba:	f7f8 f83f 	bl	800083c <__aeabi_ddiv>
 80087be:	f04f 0a00 	mov.w	sl, #0
 80087c2:	4604      	mov	r4, r0
 80087c4:	460d      	mov	r5, r1
 80087c6:	4622      	mov	r2, r4
 80087c8:	462b      	mov	r3, r5
 80087ca:	4620      	mov	r0, r4
 80087cc:	4629      	mov	r1, r5
 80087ce:	f7f7 ff0b 	bl	80005e8 <__aeabi_dmul>
 80087d2:	4602      	mov	r2, r0
 80087d4:	460b      	mov	r3, r1
 80087d6:	4680      	mov	r8, r0
 80087d8:	4689      	mov	r9, r1
 80087da:	f7f7 ff05 	bl	80005e8 <__aeabi_dmul>
 80087de:	a374      	add	r3, pc, #464	; (adr r3, 80089b0 <atan+0x2b8>)
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	4606      	mov	r6, r0
 80087e6:	460f      	mov	r7, r1
 80087e8:	f7f7 fefe 	bl	80005e8 <__aeabi_dmul>
 80087ec:	a372      	add	r3, pc, #456	; (adr r3, 80089b8 <atan+0x2c0>)
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	f7f7 fd43 	bl	800027c <__adddf3>
 80087f6:	4632      	mov	r2, r6
 80087f8:	463b      	mov	r3, r7
 80087fa:	f7f7 fef5 	bl	80005e8 <__aeabi_dmul>
 80087fe:	a370      	add	r3, pc, #448	; (adr r3, 80089c0 <atan+0x2c8>)
 8008800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008804:	f7f7 fd3a 	bl	800027c <__adddf3>
 8008808:	4632      	mov	r2, r6
 800880a:	463b      	mov	r3, r7
 800880c:	f7f7 feec 	bl	80005e8 <__aeabi_dmul>
 8008810:	a36d      	add	r3, pc, #436	; (adr r3, 80089c8 <atan+0x2d0>)
 8008812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008816:	f7f7 fd31 	bl	800027c <__adddf3>
 800881a:	4632      	mov	r2, r6
 800881c:	463b      	mov	r3, r7
 800881e:	f7f7 fee3 	bl	80005e8 <__aeabi_dmul>
 8008822:	a36b      	add	r3, pc, #428	; (adr r3, 80089d0 <atan+0x2d8>)
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f7f7 fd28 	bl	800027c <__adddf3>
 800882c:	4632      	mov	r2, r6
 800882e:	463b      	mov	r3, r7
 8008830:	f7f7 feda 	bl	80005e8 <__aeabi_dmul>
 8008834:	a368      	add	r3, pc, #416	; (adr r3, 80089d8 <atan+0x2e0>)
 8008836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883a:	f7f7 fd1f 	bl	800027c <__adddf3>
 800883e:	4642      	mov	r2, r8
 8008840:	464b      	mov	r3, r9
 8008842:	f7f7 fed1 	bl	80005e8 <__aeabi_dmul>
 8008846:	a366      	add	r3, pc, #408	; (adr r3, 80089e0 <atan+0x2e8>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	4680      	mov	r8, r0
 800884e:	4689      	mov	r9, r1
 8008850:	4630      	mov	r0, r6
 8008852:	4639      	mov	r1, r7
 8008854:	f7f7 fec8 	bl	80005e8 <__aeabi_dmul>
 8008858:	a363      	add	r3, pc, #396	; (adr r3, 80089e8 <atan+0x2f0>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f7 fd0b 	bl	8000278 <__aeabi_dsub>
 8008862:	4632      	mov	r2, r6
 8008864:	463b      	mov	r3, r7
 8008866:	f7f7 febf 	bl	80005e8 <__aeabi_dmul>
 800886a:	a361      	add	r3, pc, #388	; (adr r3, 80089f0 <atan+0x2f8>)
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	f7f7 fd02 	bl	8000278 <__aeabi_dsub>
 8008874:	4632      	mov	r2, r6
 8008876:	463b      	mov	r3, r7
 8008878:	f7f7 feb6 	bl	80005e8 <__aeabi_dmul>
 800887c:	a35e      	add	r3, pc, #376	; (adr r3, 80089f8 <atan+0x300>)
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f7f7 fcf9 	bl	8000278 <__aeabi_dsub>
 8008886:	4632      	mov	r2, r6
 8008888:	463b      	mov	r3, r7
 800888a:	f7f7 fead 	bl	80005e8 <__aeabi_dmul>
 800888e:	a35c      	add	r3, pc, #368	; (adr r3, 8008a00 <atan+0x308>)
 8008890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008894:	f7f7 fcf0 	bl	8000278 <__aeabi_dsub>
 8008898:	4632      	mov	r2, r6
 800889a:	463b      	mov	r3, r7
 800889c:	f7f7 fea4 	bl	80005e8 <__aeabi_dmul>
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	4640      	mov	r0, r8
 80088a6:	4649      	mov	r1, r9
 80088a8:	f7f7 fce8 	bl	800027c <__adddf3>
 80088ac:	4622      	mov	r2, r4
 80088ae:	462b      	mov	r3, r5
 80088b0:	f7f7 fe9a 	bl	80005e8 <__aeabi_dmul>
 80088b4:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	d14b      	bne.n	8008956 <atan+0x25e>
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f7f7 fcd9 	bl	8000278 <__aeabi_dsub>
 80088c6:	e72c      	b.n	8008722 <atan+0x2a>
 80088c8:	ee10 0a10 	vmov	r0, s0
 80088cc:	4b53      	ldr	r3, [pc, #332]	; (8008a1c <atan+0x324>)
 80088ce:	2200      	movs	r2, #0
 80088d0:	4629      	mov	r1, r5
 80088d2:	f7f7 fcd1 	bl	8000278 <__aeabi_dsub>
 80088d6:	4b51      	ldr	r3, [pc, #324]	; (8008a1c <atan+0x324>)
 80088d8:	4606      	mov	r6, r0
 80088da:	460f      	mov	r7, r1
 80088dc:	2200      	movs	r2, #0
 80088de:	4620      	mov	r0, r4
 80088e0:	4629      	mov	r1, r5
 80088e2:	f7f7 fccb 	bl	800027c <__adddf3>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	4630      	mov	r0, r6
 80088ec:	4639      	mov	r1, r7
 80088ee:	f7f7 ffa5 	bl	800083c <__aeabi_ddiv>
 80088f2:	f04f 0a01 	mov.w	sl, #1
 80088f6:	4604      	mov	r4, r0
 80088f8:	460d      	mov	r5, r1
 80088fa:	e764      	b.n	80087c6 <atan+0xce>
 80088fc:	4b49      	ldr	r3, [pc, #292]	; (8008a24 <atan+0x32c>)
 80088fe:	429e      	cmp	r6, r3
 8008900:	da1d      	bge.n	800893e <atan+0x246>
 8008902:	ee10 0a10 	vmov	r0, s0
 8008906:	4b48      	ldr	r3, [pc, #288]	; (8008a28 <atan+0x330>)
 8008908:	2200      	movs	r2, #0
 800890a:	4629      	mov	r1, r5
 800890c:	f7f7 fcb4 	bl	8000278 <__aeabi_dsub>
 8008910:	4b45      	ldr	r3, [pc, #276]	; (8008a28 <atan+0x330>)
 8008912:	4606      	mov	r6, r0
 8008914:	460f      	mov	r7, r1
 8008916:	2200      	movs	r2, #0
 8008918:	4620      	mov	r0, r4
 800891a:	4629      	mov	r1, r5
 800891c:	f7f7 fe64 	bl	80005e8 <__aeabi_dmul>
 8008920:	4b3e      	ldr	r3, [pc, #248]	; (8008a1c <atan+0x324>)
 8008922:	2200      	movs	r2, #0
 8008924:	f7f7 fcaa 	bl	800027c <__adddf3>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4630      	mov	r0, r6
 800892e:	4639      	mov	r1, r7
 8008930:	f7f7 ff84 	bl	800083c <__aeabi_ddiv>
 8008934:	f04f 0a02 	mov.w	sl, #2
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	e743      	b.n	80087c6 <atan+0xce>
 800893e:	462b      	mov	r3, r5
 8008940:	ee10 2a10 	vmov	r2, s0
 8008944:	4939      	ldr	r1, [pc, #228]	; (8008a2c <atan+0x334>)
 8008946:	2000      	movs	r0, #0
 8008948:	f7f7 ff78 	bl	800083c <__aeabi_ddiv>
 800894c:	f04f 0a03 	mov.w	sl, #3
 8008950:	4604      	mov	r4, r0
 8008952:	460d      	mov	r5, r1
 8008954:	e737      	b.n	80087c6 <atan+0xce>
 8008956:	4b36      	ldr	r3, [pc, #216]	; (8008a30 <atan+0x338>)
 8008958:	4e36      	ldr	r6, [pc, #216]	; (8008a34 <atan+0x33c>)
 800895a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800895e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8008962:	e9da 2300 	ldrd	r2, r3, [sl]
 8008966:	f7f7 fc87 	bl	8000278 <__aeabi_dsub>
 800896a:	4622      	mov	r2, r4
 800896c:	462b      	mov	r3, r5
 800896e:	f7f7 fc83 	bl	8000278 <__aeabi_dsub>
 8008972:	4602      	mov	r2, r0
 8008974:	460b      	mov	r3, r1
 8008976:	e9d6 0100 	ldrd	r0, r1, [r6]
 800897a:	f7f7 fc7d 	bl	8000278 <__aeabi_dsub>
 800897e:	f1bb 0f00 	cmp.w	fp, #0
 8008982:	4604      	mov	r4, r0
 8008984:	460d      	mov	r5, r1
 8008986:	f6bf aed6 	bge.w	8008736 <atan+0x3e>
 800898a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800898e:	461d      	mov	r5, r3
 8008990:	e6d1      	b.n	8008736 <atan+0x3e>
 8008992:	a51d      	add	r5, pc, #116	; (adr r5, 8008a08 <atan+0x310>)
 8008994:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008998:	e6cd      	b.n	8008736 <atan+0x3e>
 800899a:	bf00      	nop
 800899c:	f3af 8000 	nop.w
 80089a0:	54442d18 	.word	0x54442d18
 80089a4:	bff921fb 	.word	0xbff921fb
 80089a8:	8800759c 	.word	0x8800759c
 80089ac:	7e37e43c 	.word	0x7e37e43c
 80089b0:	e322da11 	.word	0xe322da11
 80089b4:	3f90ad3a 	.word	0x3f90ad3a
 80089b8:	24760deb 	.word	0x24760deb
 80089bc:	3fa97b4b 	.word	0x3fa97b4b
 80089c0:	a0d03d51 	.word	0xa0d03d51
 80089c4:	3fb10d66 	.word	0x3fb10d66
 80089c8:	c54c206e 	.word	0xc54c206e
 80089cc:	3fb745cd 	.word	0x3fb745cd
 80089d0:	920083ff 	.word	0x920083ff
 80089d4:	3fc24924 	.word	0x3fc24924
 80089d8:	5555550d 	.word	0x5555550d
 80089dc:	3fd55555 	.word	0x3fd55555
 80089e0:	2c6a6c2f 	.word	0x2c6a6c2f
 80089e4:	bfa2b444 	.word	0xbfa2b444
 80089e8:	52defd9a 	.word	0x52defd9a
 80089ec:	3fadde2d 	.word	0x3fadde2d
 80089f0:	af749a6d 	.word	0xaf749a6d
 80089f4:	3fb3b0f2 	.word	0x3fb3b0f2
 80089f8:	fe231671 	.word	0xfe231671
 80089fc:	3fbc71c6 	.word	0x3fbc71c6
 8008a00:	9998ebc4 	.word	0x9998ebc4
 8008a04:	3fc99999 	.word	0x3fc99999
 8008a08:	54442d18 	.word	0x54442d18
 8008a0c:	3ff921fb 	.word	0x3ff921fb
 8008a10:	440fffff 	.word	0x440fffff
 8008a14:	7ff00000 	.word	0x7ff00000
 8008a18:	3fdbffff 	.word	0x3fdbffff
 8008a1c:	3ff00000 	.word	0x3ff00000
 8008a20:	3ff2ffff 	.word	0x3ff2ffff
 8008a24:	40038000 	.word	0x40038000
 8008a28:	3ff80000 	.word	0x3ff80000
 8008a2c:	bff00000 	.word	0xbff00000
 8008a30:	08008db0 	.word	0x08008db0
 8008a34:	08008d90 	.word	0x08008d90

08008a38 <fabs>:
 8008a38:	ec51 0b10 	vmov	r0, r1, d0
 8008a3c:	ee10 2a10 	vmov	r2, s0
 8008a40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a44:	ec43 2b10 	vmov	d0, r2, r3
 8008a48:	4770      	bx	lr
	...

08008a4c <_init>:
 8008a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4e:	bf00      	nop
 8008a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a52:	bc08      	pop	{r3}
 8008a54:	469e      	mov	lr, r3
 8008a56:	4770      	bx	lr

08008a58 <_fini>:
 8008a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5a:	bf00      	nop
 8008a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5e:	bc08      	pop	{r3}
 8008a60:	469e      	mov	lr, r3
 8008a62:	4770      	bx	lr
