
Shooter_Farmer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000674c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006980  08006980  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006980  08006980  00016980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006988  08006988  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006988  08006988  00016988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000042e8  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200042f8  200042f8  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1d9  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b40  00000000  00000000  0003b219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001758  00000000  00000000  0003ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015e8  00000000  00000000  000404b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f72  00000000  00000000  00041aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b858  00000000  00000000  00064a12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9ffa  00000000  00000000  0008026a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015a264  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006330  00000000  00000000  0015a2b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080068c4 	.word	0x080068c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080068c4 	.word	0x080068c4

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_ddiv>:
 8000424:	b570      	push	{r4, r5, r6, lr}
 8000426:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800042a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800042e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000432:	bf1d      	ittte	ne
 8000434:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000438:	ea94 0f0c 	teqne	r4, ip
 800043c:	ea95 0f0c 	teqne	r5, ip
 8000440:	f000 f8a7 	bleq	8000592 <__aeabi_ddiv+0x16e>
 8000444:	eba4 0405 	sub.w	r4, r4, r5
 8000448:	ea81 0e03 	eor.w	lr, r1, r3
 800044c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000450:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000454:	f000 8088 	beq.w	8000568 <__aeabi_ddiv+0x144>
 8000458:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800045c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000460:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000464:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000468:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800046c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000470:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000474:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000478:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800047c:	429d      	cmp	r5, r3
 800047e:	bf08      	it	eq
 8000480:	4296      	cmpeq	r6, r2
 8000482:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000486:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800048a:	d202      	bcs.n	8000492 <__aeabi_ddiv+0x6e>
 800048c:	085b      	lsrs	r3, r3, #1
 800048e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000492:	1ab6      	subs	r6, r6, r2
 8000494:	eb65 0503 	sbc.w	r5, r5, r3
 8000498:	085b      	lsrs	r3, r3, #1
 800049a:	ea4f 0232 	mov.w	r2, r2, rrx
 800049e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80004a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80004a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004ae:	bf22      	ittt	cs
 80004b0:	1ab6      	subcs	r6, r6, r2
 80004b2:	4675      	movcs	r5, lr
 80004b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80004b8:	085b      	lsrs	r3, r3, #1
 80004ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80004be:	ebb6 0e02 	subs.w	lr, r6, r2
 80004c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004c6:	bf22      	ittt	cs
 80004c8:	1ab6      	subcs	r6, r6, r2
 80004ca:	4675      	movcs	r5, lr
 80004cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80004d0:	085b      	lsrs	r3, r3, #1
 80004d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80004d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80004da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004de:	bf22      	ittt	cs
 80004e0:	1ab6      	subcs	r6, r6, r2
 80004e2:	4675      	movcs	r5, lr
 80004e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80004e8:	085b      	lsrs	r3, r3, #1
 80004ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80004ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80004f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80004f6:	bf22      	ittt	cs
 80004f8:	1ab6      	subcs	r6, r6, r2
 80004fa:	4675      	movcs	r5, lr
 80004fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000500:	ea55 0e06 	orrs.w	lr, r5, r6
 8000504:	d018      	beq.n	8000538 <__aeabi_ddiv+0x114>
 8000506:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800050a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800050e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000512:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000516:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800051a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800051e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000522:	d1c0      	bne.n	80004a6 <__aeabi_ddiv+0x82>
 8000524:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000528:	d10b      	bne.n	8000542 <__aeabi_ddiv+0x11e>
 800052a:	ea41 0100 	orr.w	r1, r1, r0
 800052e:	f04f 0000 	mov.w	r0, #0
 8000532:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000536:	e7b6      	b.n	80004a6 <__aeabi_ddiv+0x82>
 8000538:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800053c:	bf04      	itt	eq
 800053e:	4301      	orreq	r1, r0
 8000540:	2000      	moveq	r0, #0
 8000542:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000546:	bf88      	it	hi
 8000548:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800054c:	f63f aeaf 	bhi.w	80002ae <__aeabi_dmul+0xde>
 8000550:	ebb5 0c03 	subs.w	ip, r5, r3
 8000554:	bf04      	itt	eq
 8000556:	ebb6 0c02 	subseq.w	ip, r6, r2
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800056c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000570:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000574:	bfc2      	ittt	gt
 8000576:	ebd4 050c 	rsbsgt	r5, r4, ip
 800057a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800057e:	bd70      	popgt	{r4, r5, r6, pc}
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f04f 0e00 	mov.w	lr, #0
 8000588:	3c01      	subs	r4, #1
 800058a:	e690      	b.n	80002ae <__aeabi_dmul+0xde>
 800058c:	ea45 0e06 	orr.w	lr, r5, r6
 8000590:	e68d      	b.n	80002ae <__aeabi_dmul+0xde>
 8000592:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000596:	ea94 0f0c 	teq	r4, ip
 800059a:	bf08      	it	eq
 800059c:	ea95 0f0c 	teqeq	r5, ip
 80005a0:	f43f af3b 	beq.w	800041a <__aeabi_dmul+0x24a>
 80005a4:	ea94 0f0c 	teq	r4, ip
 80005a8:	d10a      	bne.n	80005c0 <__aeabi_ddiv+0x19c>
 80005aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005ae:	f47f af34 	bne.w	800041a <__aeabi_dmul+0x24a>
 80005b2:	ea95 0f0c 	teq	r5, ip
 80005b6:	f47f af25 	bne.w	8000404 <__aeabi_dmul+0x234>
 80005ba:	4610      	mov	r0, r2
 80005bc:	4619      	mov	r1, r3
 80005be:	e72c      	b.n	800041a <__aeabi_dmul+0x24a>
 80005c0:	ea95 0f0c 	teq	r5, ip
 80005c4:	d106      	bne.n	80005d4 <__aeabi_ddiv+0x1b0>
 80005c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80005ca:	f43f aefd 	beq.w	80003c8 <__aeabi_dmul+0x1f8>
 80005ce:	4610      	mov	r0, r2
 80005d0:	4619      	mov	r1, r3
 80005d2:	e722      	b.n	800041a <__aeabi_dmul+0x24a>
 80005d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80005d8:	bf18      	it	ne
 80005da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80005de:	f47f aec5 	bne.w	800036c <__aeabi_dmul+0x19c>
 80005e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80005e6:	f47f af0d 	bne.w	8000404 <__aeabi_dmul+0x234>
 80005ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80005ee:	f47f aeeb 	bne.w	80003c8 <__aeabi_dmul+0x1f8>
 80005f2:	e712      	b.n	800041a <__aeabi_dmul+0x24a>

080005f4 <__gedf2>:
 80005f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80005f8:	e006      	b.n	8000608 <__cmpdf2+0x4>
 80005fa:	bf00      	nop

080005fc <__ledf2>:
 80005fc:	f04f 0c01 	mov.w	ip, #1
 8000600:	e002      	b.n	8000608 <__cmpdf2+0x4>
 8000602:	bf00      	nop

08000604 <__cmpdf2>:
 8000604:	f04f 0c01 	mov.w	ip, #1
 8000608:	f84d cd04 	str.w	ip, [sp, #-4]!
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000618:	bf18      	it	ne
 800061a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800061e:	d01b      	beq.n	8000658 <__cmpdf2+0x54>
 8000620:	b001      	add	sp, #4
 8000622:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000626:	bf0c      	ite	eq
 8000628:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800062c:	ea91 0f03 	teqne	r1, r3
 8000630:	bf02      	ittt	eq
 8000632:	ea90 0f02 	teqeq	r0, r2
 8000636:	2000      	moveq	r0, #0
 8000638:	4770      	bxeq	lr
 800063a:	f110 0f00 	cmn.w	r0, #0
 800063e:	ea91 0f03 	teq	r1, r3
 8000642:	bf58      	it	pl
 8000644:	4299      	cmppl	r1, r3
 8000646:	bf08      	it	eq
 8000648:	4290      	cmpeq	r0, r2
 800064a:	bf2c      	ite	cs
 800064c:	17d8      	asrcs	r0, r3, #31
 800064e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000652:	f040 0001 	orr.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800065c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000660:	d102      	bne.n	8000668 <__cmpdf2+0x64>
 8000662:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000666:	d107      	bne.n	8000678 <__cmpdf2+0x74>
 8000668:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800066c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000670:	d1d6      	bne.n	8000620 <__cmpdf2+0x1c>
 8000672:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000676:	d0d3      	beq.n	8000620 <__cmpdf2+0x1c>
 8000678:	f85d 0b04 	ldr.w	r0, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <__aeabi_cdrcmple>:
 8000680:	4684      	mov	ip, r0
 8000682:	4610      	mov	r0, r2
 8000684:	4662      	mov	r2, ip
 8000686:	468c      	mov	ip, r1
 8000688:	4619      	mov	r1, r3
 800068a:	4663      	mov	r3, ip
 800068c:	e000      	b.n	8000690 <__aeabi_cdcmpeq>
 800068e:	bf00      	nop

08000690 <__aeabi_cdcmpeq>:
 8000690:	b501      	push	{r0, lr}
 8000692:	f7ff ffb7 	bl	8000604 <__cmpdf2>
 8000696:	2800      	cmp	r0, #0
 8000698:	bf48      	it	mi
 800069a:	f110 0f00 	cmnmi.w	r0, #0
 800069e:	bd01      	pop	{r0, pc}

080006a0 <__aeabi_dcmpeq>:
 80006a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a4:	f7ff fff4 	bl	8000690 <__aeabi_cdcmpeq>
 80006a8:	bf0c      	ite	eq
 80006aa:	2001      	moveq	r0, #1
 80006ac:	2000      	movne	r0, #0
 80006ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b2:	bf00      	nop

080006b4 <__aeabi_dcmplt>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff ffea 	bl	8000690 <__aeabi_cdcmpeq>
 80006bc:	bf34      	ite	cc
 80006be:	2001      	movcc	r0, #1
 80006c0:	2000      	movcs	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_dcmple>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffe0 	bl	8000690 <__aeabi_cdcmpeq>
 80006d0:	bf94      	ite	ls
 80006d2:	2001      	movls	r0, #1
 80006d4:	2000      	movhi	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_dcmpge>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffce 	bl	8000680 <__aeabi_cdrcmple>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_dcmpgt>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffc4 	bl	8000680 <__aeabi_cdrcmple>
 80006f8:	bf34      	ite	cc
 80006fa:	2001      	movcc	r0, #1
 80006fc:	2000      	movcs	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_d2uiz>:
 8000704:	004a      	lsls	r2, r1, #1
 8000706:	d211      	bcs.n	800072c <__aeabi_d2uiz+0x28>
 8000708:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800070c:	d211      	bcs.n	8000732 <__aeabi_d2uiz+0x2e>
 800070e:	d50d      	bpl.n	800072c <__aeabi_d2uiz+0x28>
 8000710:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000714:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000718:	d40e      	bmi.n	8000738 <__aeabi_d2uiz+0x34>
 800071a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800071e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000722:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000726:	fa23 f002 	lsr.w	r0, r3, r2
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000736:	d102      	bne.n	800073e <__aeabi_d2uiz+0x3a>
 8000738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800073c:	4770      	bx	lr
 800073e:	f04f 0000 	mov.w	r0, #0
 8000742:	4770      	bx	lr

08000744 <__aeabi_uldivmod>:
 8000744:	b953      	cbnz	r3, 800075c <__aeabi_uldivmod+0x18>
 8000746:	b94a      	cbnz	r2, 800075c <__aeabi_uldivmod+0x18>
 8000748:	2900      	cmp	r1, #0
 800074a:	bf08      	it	eq
 800074c:	2800      	cmpeq	r0, #0
 800074e:	bf1c      	itt	ne
 8000750:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000754:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000758:	f000 b974 	b.w	8000a44 <__aeabi_idiv0>
 800075c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000760:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000764:	f000 f806 	bl	8000774 <__udivmoddi4>
 8000768:	f8dd e004 	ldr.w	lr, [sp, #4]
 800076c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000770:	b004      	add	sp, #16
 8000772:	4770      	bx	lr

08000774 <__udivmoddi4>:
 8000774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000778:	9d08      	ldr	r5, [sp, #32]
 800077a:	4604      	mov	r4, r0
 800077c:	468e      	mov	lr, r1
 800077e:	2b00      	cmp	r3, #0
 8000780:	d14d      	bne.n	800081e <__udivmoddi4+0xaa>
 8000782:	428a      	cmp	r2, r1
 8000784:	4694      	mov	ip, r2
 8000786:	d969      	bls.n	800085c <__udivmoddi4+0xe8>
 8000788:	fab2 f282 	clz	r2, r2
 800078c:	b152      	cbz	r2, 80007a4 <__udivmoddi4+0x30>
 800078e:	fa01 f302 	lsl.w	r3, r1, r2
 8000792:	f1c2 0120 	rsb	r1, r2, #32
 8000796:	fa20 f101 	lsr.w	r1, r0, r1
 800079a:	fa0c fc02 	lsl.w	ip, ip, r2
 800079e:	ea41 0e03 	orr.w	lr, r1, r3
 80007a2:	4094      	lsls	r4, r2
 80007a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007a8:	0c21      	lsrs	r1, r4, #16
 80007aa:	fbbe f6f8 	udiv	r6, lr, r8
 80007ae:	fa1f f78c 	uxth.w	r7, ip
 80007b2:	fb08 e316 	mls	r3, r8, r6, lr
 80007b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80007ba:	fb06 f107 	mul.w	r1, r6, r7
 80007be:	4299      	cmp	r1, r3
 80007c0:	d90a      	bls.n	80007d8 <__udivmoddi4+0x64>
 80007c2:	eb1c 0303 	adds.w	r3, ip, r3
 80007c6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80007ca:	f080 811f 	bcs.w	8000a0c <__udivmoddi4+0x298>
 80007ce:	4299      	cmp	r1, r3
 80007d0:	f240 811c 	bls.w	8000a0c <__udivmoddi4+0x298>
 80007d4:	3e02      	subs	r6, #2
 80007d6:	4463      	add	r3, ip
 80007d8:	1a5b      	subs	r3, r3, r1
 80007da:	b2a4      	uxth	r4, r4
 80007dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e0:	fb08 3310 	mls	r3, r8, r0, r3
 80007e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007e8:	fb00 f707 	mul.w	r7, r0, r7
 80007ec:	42a7      	cmp	r7, r4
 80007ee:	d90a      	bls.n	8000806 <__udivmoddi4+0x92>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80007f8:	f080 810a 	bcs.w	8000a10 <__udivmoddi4+0x29c>
 80007fc:	42a7      	cmp	r7, r4
 80007fe:	f240 8107 	bls.w	8000a10 <__udivmoddi4+0x29c>
 8000802:	4464      	add	r4, ip
 8000804:	3802      	subs	r0, #2
 8000806:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800080a:	1be4      	subs	r4, r4, r7
 800080c:	2600      	movs	r6, #0
 800080e:	b11d      	cbz	r5, 8000818 <__udivmoddi4+0xa4>
 8000810:	40d4      	lsrs	r4, r2
 8000812:	2300      	movs	r3, #0
 8000814:	e9c5 4300 	strd	r4, r3, [r5]
 8000818:	4631      	mov	r1, r6
 800081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0xc2>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80ef 	beq.w	8000a06 <__udivmoddi4+0x292>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x160>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0xd4>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80f9 	bhi.w	8000a3a <__udivmoddi4+0x2c6>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0303 	sbc.w	r3, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	469e      	mov	lr, r3
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0e0      	beq.n	8000818 <__udivmoddi4+0xa4>
 8000856:	e9c5 4e00 	strd	r4, lr, [r5]
 800085a:	e7dd      	b.n	8000818 <__udivmoddi4+0xa4>
 800085c:	b902      	cbnz	r2, 8000860 <__udivmoddi4+0xec>
 800085e:	deff      	udf	#255	; 0xff
 8000860:	fab2 f282 	clz	r2, r2
 8000864:	2a00      	cmp	r2, #0
 8000866:	f040 8092 	bne.w	800098e <__udivmoddi4+0x21a>
 800086a:	eba1 010c 	sub.w	r1, r1, ip
 800086e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000872:	fa1f fe8c 	uxth.w	lr, ip
 8000876:	2601      	movs	r6, #1
 8000878:	0c20      	lsrs	r0, r4, #16
 800087a:	fbb1 f3f7 	udiv	r3, r1, r7
 800087e:	fb07 1113 	mls	r1, r7, r3, r1
 8000882:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000886:	fb0e f003 	mul.w	r0, lr, r3
 800088a:	4288      	cmp	r0, r1
 800088c:	d908      	bls.n	80008a0 <__udivmoddi4+0x12c>
 800088e:	eb1c 0101 	adds.w	r1, ip, r1
 8000892:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000896:	d202      	bcs.n	800089e <__udivmoddi4+0x12a>
 8000898:	4288      	cmp	r0, r1
 800089a:	f200 80cb 	bhi.w	8000a34 <__udivmoddi4+0x2c0>
 800089e:	4643      	mov	r3, r8
 80008a0:	1a09      	subs	r1, r1, r0
 80008a2:	b2a4      	uxth	r4, r4
 80008a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80008a8:	fb07 1110 	mls	r1, r7, r0, r1
 80008ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80008b0:	fb0e fe00 	mul.w	lr, lr, r0
 80008b4:	45a6      	cmp	lr, r4
 80008b6:	d908      	bls.n	80008ca <__udivmoddi4+0x156>
 80008b8:	eb1c 0404 	adds.w	r4, ip, r4
 80008bc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80008c0:	d202      	bcs.n	80008c8 <__udivmoddi4+0x154>
 80008c2:	45a6      	cmp	lr, r4
 80008c4:	f200 80bb 	bhi.w	8000a3e <__udivmoddi4+0x2ca>
 80008c8:	4608      	mov	r0, r1
 80008ca:	eba4 040e 	sub.w	r4, r4, lr
 80008ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80008d2:	e79c      	b.n	800080e <__udivmoddi4+0x9a>
 80008d4:	f1c6 0720 	rsb	r7, r6, #32
 80008d8:	40b3      	lsls	r3, r6
 80008da:	fa22 fc07 	lsr.w	ip, r2, r7
 80008de:	ea4c 0c03 	orr.w	ip, ip, r3
 80008e2:	fa20 f407 	lsr.w	r4, r0, r7
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	431c      	orrs	r4, r3
 80008ec:	40f9      	lsrs	r1, r7
 80008ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008f2:	fa00 f306 	lsl.w	r3, r0, r6
 80008f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80008fa:	0c20      	lsrs	r0, r4, #16
 80008fc:	fa1f fe8c 	uxth.w	lr, ip
 8000900:	fb09 1118 	mls	r1, r9, r8, r1
 8000904:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000908:	fb08 f00e 	mul.w	r0, r8, lr
 800090c:	4288      	cmp	r0, r1
 800090e:	fa02 f206 	lsl.w	r2, r2, r6
 8000912:	d90b      	bls.n	800092c <__udivmoddi4+0x1b8>
 8000914:	eb1c 0101 	adds.w	r1, ip, r1
 8000918:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800091c:	f080 8088 	bcs.w	8000a30 <__udivmoddi4+0x2bc>
 8000920:	4288      	cmp	r0, r1
 8000922:	f240 8085 	bls.w	8000a30 <__udivmoddi4+0x2bc>
 8000926:	f1a8 0802 	sub.w	r8, r8, #2
 800092a:	4461      	add	r1, ip
 800092c:	1a09      	subs	r1, r1, r0
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb1 f0f9 	udiv	r0, r1, r9
 8000934:	fb09 1110 	mls	r1, r9, r0, r1
 8000938:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000940:	458e      	cmp	lr, r1
 8000942:	d908      	bls.n	8000956 <__udivmoddi4+0x1e2>
 8000944:	eb1c 0101 	adds.w	r1, ip, r1
 8000948:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 800094c:	d26c      	bcs.n	8000a28 <__udivmoddi4+0x2b4>
 800094e:	458e      	cmp	lr, r1
 8000950:	d96a      	bls.n	8000a28 <__udivmoddi4+0x2b4>
 8000952:	3802      	subs	r0, #2
 8000954:	4461      	add	r1, ip
 8000956:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800095a:	fba0 9402 	umull	r9, r4, r0, r2
 800095e:	eba1 010e 	sub.w	r1, r1, lr
 8000962:	42a1      	cmp	r1, r4
 8000964:	46c8      	mov	r8, r9
 8000966:	46a6      	mov	lr, r4
 8000968:	d356      	bcc.n	8000a18 <__udivmoddi4+0x2a4>
 800096a:	d053      	beq.n	8000a14 <__udivmoddi4+0x2a0>
 800096c:	b15d      	cbz	r5, 8000986 <__udivmoddi4+0x212>
 800096e:	ebb3 0208 	subs.w	r2, r3, r8
 8000972:	eb61 010e 	sbc.w	r1, r1, lr
 8000976:	fa01 f707 	lsl.w	r7, r1, r7
 800097a:	fa22 f306 	lsr.w	r3, r2, r6
 800097e:	40f1      	lsrs	r1, r6
 8000980:	431f      	orrs	r7, r3
 8000982:	e9c5 7100 	strd	r7, r1, [r5]
 8000986:	2600      	movs	r6, #0
 8000988:	4631      	mov	r1, r6
 800098a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098e:	f1c2 0320 	rsb	r3, r2, #32
 8000992:	40d8      	lsrs	r0, r3
 8000994:	fa0c fc02 	lsl.w	ip, ip, r2
 8000998:	fa21 f303 	lsr.w	r3, r1, r3
 800099c:	4091      	lsls	r1, r2
 800099e:	4301      	orrs	r1, r0
 80009a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009a4:	fa1f fe8c 	uxth.w	lr, ip
 80009a8:	fbb3 f0f7 	udiv	r0, r3, r7
 80009ac:	fb07 3610 	mls	r6, r7, r0, r3
 80009b0:	0c0b      	lsrs	r3, r1, #16
 80009b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80009b6:	fb00 f60e 	mul.w	r6, r0, lr
 80009ba:	429e      	cmp	r6, r3
 80009bc:	fa04 f402 	lsl.w	r4, r4, r2
 80009c0:	d908      	bls.n	80009d4 <__udivmoddi4+0x260>
 80009c2:	eb1c 0303 	adds.w	r3, ip, r3
 80009c6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80009ca:	d22f      	bcs.n	8000a2c <__udivmoddi4+0x2b8>
 80009cc:	429e      	cmp	r6, r3
 80009ce:	d92d      	bls.n	8000a2c <__udivmoddi4+0x2b8>
 80009d0:	3802      	subs	r0, #2
 80009d2:	4463      	add	r3, ip
 80009d4:	1b9b      	subs	r3, r3, r6
 80009d6:	b289      	uxth	r1, r1
 80009d8:	fbb3 f6f7 	udiv	r6, r3, r7
 80009dc:	fb07 3316 	mls	r3, r7, r6, r3
 80009e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e4:	fb06 f30e 	mul.w	r3, r6, lr
 80009e8:	428b      	cmp	r3, r1
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x28a>
 80009ec:	eb1c 0101 	adds.w	r1, ip, r1
 80009f0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80009f4:	d216      	bcs.n	8000a24 <__udivmoddi4+0x2b0>
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d914      	bls.n	8000a24 <__udivmoddi4+0x2b0>
 80009fa:	3e02      	subs	r6, #2
 80009fc:	4461      	add	r1, ip
 80009fe:	1ac9      	subs	r1, r1, r3
 8000a00:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a04:	e738      	b.n	8000878 <__udivmoddi4+0x104>
 8000a06:	462e      	mov	r6, r5
 8000a08:	4628      	mov	r0, r5
 8000a0a:	e705      	b.n	8000818 <__udivmoddi4+0xa4>
 8000a0c:	4606      	mov	r6, r0
 8000a0e:	e6e3      	b.n	80007d8 <__udivmoddi4+0x64>
 8000a10:	4618      	mov	r0, r3
 8000a12:	e6f8      	b.n	8000806 <__udivmoddi4+0x92>
 8000a14:	454b      	cmp	r3, r9
 8000a16:	d2a9      	bcs.n	800096c <__udivmoddi4+0x1f8>
 8000a18:	ebb9 0802 	subs.w	r8, r9, r2
 8000a1c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a20:	3801      	subs	r0, #1
 8000a22:	e7a3      	b.n	800096c <__udivmoddi4+0x1f8>
 8000a24:	4646      	mov	r6, r8
 8000a26:	e7ea      	b.n	80009fe <__udivmoddi4+0x28a>
 8000a28:	4620      	mov	r0, r4
 8000a2a:	e794      	b.n	8000956 <__udivmoddi4+0x1e2>
 8000a2c:	4640      	mov	r0, r8
 8000a2e:	e7d1      	b.n	80009d4 <__udivmoddi4+0x260>
 8000a30:	46d0      	mov	r8, sl
 8000a32:	e77b      	b.n	800092c <__udivmoddi4+0x1b8>
 8000a34:	3b02      	subs	r3, #2
 8000a36:	4461      	add	r1, ip
 8000a38:	e732      	b.n	80008a0 <__udivmoddi4+0x12c>
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	e709      	b.n	8000852 <__udivmoddi4+0xde>
 8000a3e:	4464      	add	r4, ip
 8000a40:	3802      	subs	r0, #2
 8000a42:	e742      	b.n	80008ca <__udivmoddi4+0x156>

08000a44 <__aeabi_idiv0>:
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	; 0x28
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a50:	4a25      	ldr	r2, [pc, #148]	; (8000ae8 <MX_CAN1_Init+0xa0>)
 8000a52:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a56:	2206      	movs	r2, #6
 8000a58:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a60:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a6c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a74:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a7c:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000a9c:	f001 fa3e 	bl	8001f1c <HAL_CAN_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000aa6:	f000 fddf 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	623b      	str	r3, [r7, #32]
  	canfilterconfig.FilterBank = 0; // anything between 0 to slaveStartFilterBank (10,14)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  	canfilterconfig.FilterIdHigh = 0x0000;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
  	canfilterconfig.FilterIdLow = 0x0000;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
  	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
  	canfilterconfig.FilterMaskIdLow = 0x0000;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	61bb      	str	r3, [r7, #24]
  	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61fb      	str	r3, [r7, #28]
  	canfilterconfig.SlaveStartFilterBank = 14; // how many filter to assign to the CAN1 (master Can)(13 to 27 are assigned to slave CAN (CAN2) OR 0 to 12 are assined to CAN1
 8000ace:	230e      	movs	r3, #14
 8000ad0:	627b      	str	r3, [r7, #36]	; 0x24

  	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <MX_CAN1_Init+0x9c>)
 8000ad8:	f001 fb1c 	bl	8002114 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	3728      	adds	r7, #40	; 0x28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2000002c 	.word	0x2000002c
 8000ae8:	40006400 	.word	0x40006400

08000aec <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_CAN_MspInit+0x94>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d134      	bne.n	8000b78 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b34:	f043 0302 	orr.w	r3, r3, #2
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_CAN_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0302 	and.w	r3, r3, #2
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b58:	2309      	movs	r3, #9
 8000b5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_CAN_MspInit+0x9c>)
 8000b64:	f002 f91e 	bl	8002da4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2105      	movs	r1, #5
 8000b6c:	2014      	movs	r0, #20
 8000b6e:	f002 f8ef 	bl	8002d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b72:	2014      	movs	r0, #20
 8000b74:	f002 f908 	bl	8002d88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40006400 	.word	0x40006400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020400 	.word	0x40020400

08000b8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <vApplicationGetIdleTaskMemory+0x30>)
 8000ba2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	2000007c 	.word	0x2000007c
 8000bbc:	200000d0 	.word	0x200000d0

08000bc0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bc0:	b5b0      	push	{r4, r5, r7, lr}
 8000bc2:	b096      	sub	sp, #88	; 0x58
 8000bc4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of Stepper_Task */
  osThreadDef(Stepper_Task, Stepper_Init, osPriorityNormal, 0, 500);
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_FREERTOS_Init+0x7c>)
 8000bc8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000bcc:	461d      	mov	r5, r3
 8000bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Stepper_TaskHandle = osThreadCreate(osThread(Stepper_Task), NULL);
 8000bda:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fc18 	bl	8005416 <osThreadCreate>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <MX_FREERTOS_Init+0x80>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* definition and creation of Take_Rice_Task */
  osThreadDef(Take_Rice_Task, Take_Rice_Init, osPriorityNormal, 0, 1200);
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_FREERTOS_Init+0x84>)
 8000bee:	f107 0420 	add.w	r4, r7, #32
 8000bf2:	461d      	mov	r5, r3
 8000bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Take_Rice_TaskHandle = osThreadCreate(osThread(Take_Rice_Task), NULL);
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f004 fc05 	bl	8005416 <osThreadCreate>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <MX_FREERTOS_Init+0x88>)
 8000c10:	6013      	str	r3, [r2, #0]

  /* definition and creation of Drop_RiceTask */
  osThreadDef(Drop_RiceTask, Drop_RiceInit, osPriorityNormal, 0, 500);
 8000c12:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <MX_FREERTOS_Init+0x8c>)
 8000c14:	1d3c      	adds	r4, r7, #4
 8000c16:	461d      	mov	r5, r3
 8000c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Drop_RiceTaskHandle = osThreadCreate(osThread(Drop_RiceTask), NULL);
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f004 fbf4 	bl	8005416 <osThreadCreate>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <MX_FREERTOS_Init+0x90>)
 8000c32:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

}
 8000c34:	bf00      	nop
 8000c36:	3758      	adds	r7, #88	; 0x58
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3c:	0800690c 	.word	0x0800690c
 8000c40:	20000070 	.word	0x20000070
 8000c44:	08006928 	.word	0x08006928
 8000c48:	20000074 	.word	0x20000074
 8000c4c:	08006944 	.word	0x08006944
 8000c50:	20000078 	.word	0x20000078

08000c54 <Stepper_Init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Stepper_Init */
void Stepper_Init(void const * argument)
{
 8000c54:	b5b0      	push	{r4, r5, r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Stepper_Init */
  /* Infinite loop */
  for(;;)
  {
	  if (Stepper == 1) {
 8000c5c:	4b32      	ldr	r3, [pc, #200]	; (8000d28 <Stepper_Init+0xd4>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d106      	bne.n	8000c72 <Stepper_Init+0x1e>
			head = 5.0;
 8000c64:	4931      	ldr	r1, [pc, #196]	; (8000d2c <Stepper_Init+0xd8>)
 8000c66:	f04f 0200 	mov.w	r2, #0
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <Stepper_Init+0xdc>)
 8000c6c:	e9c1 2300 	strd	r2, r3, [r1]
 8000c70:	e011      	b.n	8000c96 <Stepper_Init+0x42>
		} else if (Stepper == 2) {
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <Stepper_Init+0xd4>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d106      	bne.n	8000c88 <Stepper_Init+0x34>
			head = -5.0;
 8000c7a:	492c      	ldr	r1, [pc, #176]	; (8000d2c <Stepper_Init+0xd8>)
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <Stepper_Init+0xe0>)
 8000c82:	e9c1 2300 	strd	r2, r3, [r1]
 8000c86:	e006      	b.n	8000c96 <Stepper_Init+0x42>
		} else {
			head = 0;
 8000c88:	4928      	ldr	r1, [pc, #160]	; (8000d2c <Stepper_Init+0xd8>)
 8000c8a:	f04f 0200 	mov.w	r2, #0
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	e9c1 2300 	strd	r2, r3, [r1]
		}
		if (head >= 0) {
 8000c96:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <Stepper_Init+0xd8>)
 8000c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	f04f 0300 	mov.w	r3, #0
 8000ca4:	f7ff fd1a 	bl	80006dc <__aeabi_dcmpge>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d013      	beq.n	8000cd6 <Stepper_Init+0x82>
			HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb4:	4820      	ldr	r0, [pc, #128]	; (8000d38 <Stepper_Init+0xe4>)
 8000cb6:	f002 fa11 	bl	80030dc <HAL_GPIO_WritePin>
			omega = head * gear_stepper;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <Stepper_Init+0xd8>)
 8000cbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cc0:	f04f 0200 	mov.w	r2, #0
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <Stepper_Init+0xe8>)
 8000cc6:	f7ff fa83 	bl	80001d0 <__aeabi_dmul>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	460b      	mov	r3, r1
 8000cce:	491c      	ldr	r1, [pc, #112]	; (8000d40 <Stepper_Init+0xec>)
 8000cd0:	e9c1 2300 	strd	r2, r3, [r1]
 8000cd4:	e023      	b.n	8000d1e <Stepper_Init+0xca>

		} else if (head < 0) {
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <Stepper_Init+0xd8>)
 8000cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cdc:	f04f 0200 	mov.w	r2, #0
 8000ce0:	f04f 0300 	mov.w	r3, #0
 8000ce4:	f7ff fce6 	bl	80006b4 <__aeabi_dcmplt>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d017      	beq.n	8000d1e <Stepper_Init+0xca>
			HAL_GPIO_WritePin(GPIOB, DIR_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cf4:	4810      	ldr	r0, [pc, #64]	; (8000d38 <Stepper_Init+0xe4>)
 8000cf6:	f002 f9f1 	bl	80030dc <HAL_GPIO_WritePin>
			omega = -1 * head * gear_stepper;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <Stepper_Init+0xd8>)
 8000cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d00:	4614      	mov	r4, r2
 8000d02:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8000d06:	f04f 0200 	mov.w	r2, #0
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <Stepper_Init+0xe8>)
 8000d0c:	4620      	mov	r0, r4
 8000d0e:	4629      	mov	r1, r5
 8000d10:	f7ff fa5e 	bl	80001d0 <__aeabi_dmul>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	4909      	ldr	r1, [pc, #36]	; (8000d40 <Stepper_Init+0xec>)
 8000d1a:	e9c1 2300 	strd	r2, r3, [r1]
		}

    osDelay(10);
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f004 fbc5 	bl	80054ae <osDelay>
	  if (Stepper == 1) {
 8000d24:	e79a      	b.n	8000c5c <Stepper_Init+0x8>
 8000d26:	bf00      	nop
 8000d28:	20000392 	.word	0x20000392
 8000d2c:	20000058 	.word	0x20000058
 8000d30:	40140000 	.word	0x40140000
 8000d34:	c0140000 	.word	0xc0140000
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40330000 	.word	0x40330000
 8000d40:	20000060 	.word	0x20000060

08000d44 <Take_Rice_Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Take_Rice_Init */
void Take_Rice_Init(void const * argument)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {


	if (((Position == 1 && StateP == 2) ||  (Position == 2 && StateP == 3) || (Position == 3 && StateP == 4)) && state == 0)
 8000d4c:	4b39      	ldr	r3, [pc, #228]	; (8000e34 <Take_Rice_Init+0xf0>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d103      	bne.n	8000d5c <Take_Rice_Init+0x18>
 8000d54:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <Take_Rice_Init+0xf4>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d00f      	beq.n	8000d7c <Take_Rice_Init+0x38>
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <Take_Rice_Init+0xf0>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d103      	bne.n	8000d6c <Take_Rice_Init+0x28>
 8000d64:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <Take_Rice_Init+0xf4>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d007      	beq.n	8000d7c <Take_Rice_Init+0x38>
 8000d6c:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <Take_Rice_Init+0xf0>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d115      	bne.n	8000da0 <Take_Rice_Init+0x5c>
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <Take_Rice_Init+0xf4>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d111      	bne.n	8000da0 <Take_Rice_Init+0x5c>
 8000d7c:	4b2f      	ldr	r3, [pc, #188]	; (8000e3c <Take_Rice_Init+0xf8>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d10d      	bne.n	8000da0 <Take_Rice_Init+0x5c>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //release
 8000d84:	2201      	movs	r2, #1
 8000d86:	2101      	movs	r1, #1
 8000d88:	482d      	ldr	r0, [pc, #180]	; (8000e40 <Take_Rice_Init+0xfc>)
 8000d8a:	f002 f9a7 	bl	80030dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); //Down
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2102      	movs	r1, #2
 8000d92:	482b      	ldr	r0, [pc, #172]	; (8000e40 <Take_Rice_Init+0xfc>)
 8000d94:	f002 f9a2 	bl	80030dc <HAL_GPIO_WritePin>
		state = 1;
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <Take_Rice_Init+0xf8>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e044      	b.n	8000e2a <Take_Rice_Init+0xe6>
	}
	else if (state == 1 && Catch ==1)
 8000da0:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <Take_Rice_Init+0xf8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d115      	bne.n	8000dd4 <Take_Rice_Init+0x90>
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <Take_Rice_Init+0x100>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d111      	bne.n	8000dd4 <Take_Rice_Init+0x90>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //catch
 8000db0:	2200      	movs	r2, #0
 8000db2:	2101      	movs	r1, #1
 8000db4:	4822      	ldr	r0, [pc, #136]	; (8000e40 <Take_Rice_Init+0xfc>)
 8000db6:	f002 f991 	bl	80030dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); // Down
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4820      	ldr	r0, [pc, #128]	; (8000e40 <Take_Rice_Init+0xfc>)
 8000dc0:	f002 f98c 	bl	80030dc <HAL_GPIO_WritePin>
		osDelay(1000);
 8000dc4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc8:	f004 fb71 	bl	80054ae <osDelay>
		state = 2;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <Take_Rice_Init+0xf8>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	e02a      	b.n	8000e2a <Take_Rice_Init+0xe6>
	}
	else if (state == 2)
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <Take_Rice_Init+0xf8>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d111      	bne.n	8000e00 <Take_Rice_Init+0xbc>
	{
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //cath
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <Take_Rice_Init+0xfc>)
 8000de2:	f002 f97b 	bl	80030dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); // up
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	4815      	ldr	r0, [pc, #84]	; (8000e40 <Take_Rice_Init+0xfc>)
 8000dec:	f002 f976 	bl	80030dc <HAL_GPIO_WritePin>
		osDelay(3000);
 8000df0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000df4:	f004 fb5b 	bl	80054ae <osDelay>
		state = 3;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <Take_Rice_Init+0xf8>)
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	e014      	b.n	8000e2a <Take_Rice_Init+0xe6>

	}
	else if (state == 3 )
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <Take_Rice_Init+0xf8>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d110      	bne.n	8000e2a <Take_Rice_Init+0xe6>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1); //release grip
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <Take_Rice_Init+0xfc>)
 8000e0e:	f002 f965 	bl	80030dc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //Up
 8000e12:	2200      	movs	r2, #0
 8000e14:	2102      	movs	r1, #2
 8000e16:	480a      	ldr	r0, [pc, #40]	; (8000e40 <Take_Rice_Init+0xfc>)
 8000e18:	f002 f960 	bl	80030dc <HAL_GPIO_WritePin>
			osDelay(2000);
 8000e1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e20:	f004 fb45 	bl	80054ae <osDelay>
			state = 0;
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <Take_Rice_Init+0xf8>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
		}



    osDelay(10);
 8000e2a:	200a      	movs	r0, #10
 8000e2c:	f004 fb3f 	bl	80054ae <osDelay>
	if (((Position == 1 && StateP == 2) ||  (Position == 2 && StateP == 3) || (Position == 3 && StateP == 4)) && state == 0)
 8000e30:	e78c      	b.n	8000d4c <Take_Rice_Init+0x8>
 8000e32:	bf00      	nop
 8000e34:	2000038d 	.word	0x2000038d
 8000e38:	20000398 	.word	0x20000398
 8000e3c:	20000068 	.word	0x20000068
 8000e40:	40020400 	.word	0x40020400
 8000e44:	2000038e 	.word	0x2000038e

08000e48 <Drop_RiceInit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Drop_RiceInit */
void Drop_RiceInit(void const * argument)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Drop_RiceInit */

  /* Infinite loop */
  for(;;)
  {
	  if (Drop == 1) {
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <Drop_RiceInit+0x50>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d102      	bne.n	8000e5e <Drop_RiceInit+0x16>

//	  	  			X_end = 0.1;
	  	  			state2 = 1;
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <Drop_RiceInit+0x54>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
	  }
//	  	  		} else if (Drop == 0 && Position>=4) {
//	  	  			X_end = 0.0;
//	  	  		}
	  if (state2 == 1){
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <Drop_RiceInit+0x54>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d114      	bne.n	8000e90 <Drop_RiceInit+0x48>
			osDelay(1500);
 8000e66:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e6a:	f004 fb20 	bl	80054ae <osDelay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 1); //Push
 8000e6e:	2201      	movs	r2, #1
 8000e70:	2101      	movs	r1, #1
 8000e72:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <Drop_RiceInit+0x58>)
 8000e74:	f002 f932 	bl	80030dc <HAL_GPIO_WritePin>
			osDelay(2000);
 8000e78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e7c:	f004 fb17 	bl	80054ae <osDelay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2101      	movs	r1, #1
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <Drop_RiceInit+0x58>)
 8000e86:	f002 f929 	bl	80030dc <HAL_GPIO_WritePin>
			state2 = 0;
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <Drop_RiceInit+0x54>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
		}

    osDelay(10);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f004 fb0c 	bl	80054ae <osDelay>
	  if (Drop == 1) {
 8000e96:	e7db      	b.n	8000e50 <Drop_RiceInit+0x8>
 8000e98:	20000393 	.word	0x20000393
 8000e9c:	20000069 	.word	0x20000069
 8000ea0:	40020800 	.word	0x40020800

08000ea4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a30      	ldr	r2, [pc, #192]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000ee0:	f043 0304 	orr.w	r3, r3, #4
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0304 	and.w	r3, r3, #4
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a22      	ldr	r2, [pc, #136]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b1c      	ldr	r3, [pc, #112]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b19      	ldr	r3, [pc, #100]	; (8000f84 <MX_GPIO_Init+0xe0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Drop_GPIO_Port, Drop_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4816      	ldr	r0, [pc, #88]	; (8000f88 <MX_GPIO_Init+0xe4>)
 8000f30:	f002 f8d4 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, grip_Pin|UpDown_Pin|DIR_Pin|STEP_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f24c 0103 	movw	r1, #49155	; 0xc003
 8000f3a:	4814      	ldr	r0, [pc, #80]	; (8000f8c <MX_GPIO_Init+0xe8>)
 8000f3c:	f002 f8ce 	bl	80030dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Drop_Pin;
 8000f40:	2301      	movs	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Drop_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_GPIO_Init+0xe4>)
 8000f58:	f001 ff24 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = grip_Pin|UpDown_Pin|DIR_Pin|STEP_Pin;
 8000f5c:	f24c 0303 	movw	r3, #49155	; 0xc003
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 0314 	add.w	r3, r7, #20
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_GPIO_Init+0xe8>)
 8000f76:	f001 ff15 	bl	8002da4 <HAL_GPIO_Init>

}
 8000f7a:	bf00      	nop
 8000f7c:	3728      	adds	r7, #40	; 0x28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020400 	.word	0x40020400

08000f90 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000f96:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_I2C1_Init+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <MX_I2C1_Init+0x58>)
 8000f9e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_I2C1_Init+0x50>)
 8000fce:	f002 f8b9 	bl	8003144 <HAL_I2C_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd8:	f000 fb46 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200002d0 	.word	0x200002d0
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	00061a80 	.word	0x00061a80

08000fec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a19      	ldr	r2, [pc, #100]	; (8001070 <HAL_I2C_MspInit+0x84>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d12b      	bne.n	8001066 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800102a:	23c0      	movs	r3, #192	; 0xc0
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102e:	2312      	movs	r3, #18
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800103a:	2304      	movs	r3, #4
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <HAL_I2C_MspInit+0x8c>)
 8001046:	f001 fead 	bl	8002da4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_I2C_MspInit+0x88>)
 8001054:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_I2C_MspInit+0x88>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40005400 	.word	0x40005400
 8001074:	40023800 	.word	0x40023800
 8001078:	40020400 	.word	0x40020400

0800107c <map>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
float map(float Input, float Min_Input, float Max_Input, float Min_Output,
		float Max_Output) {
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	ed87 0a05 	vstr	s0, [r7, #20]
 8001086:	edc7 0a04 	vstr	s1, [r7, #16]
 800108a:	ed87 1a03 	vstr	s2, [r7, #12]
 800108e:	edc7 1a02 	vstr	s3, [r7, #8]
 8001092:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output)
 8001096:	ed97 7a05 	vldr	s14, [r7, #20]
 800109a:	edd7 7a04 	vldr	s15, [r7, #16]
 800109e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80010a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010ae:	ee67 6a27 	vmul.f32	s13, s14, s15
			/ (Max_Input - Min_Input) + Min_Output);
 80010b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80010b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	return (float) ((Input - Min_Input) * (Max_Output - Min_Output)
 80010c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80010ca:	eeb0 0a67 	vmov.f32	s0, s15
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80010e0:	4b48      	ldr	r3, [pc, #288]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80010e2:	4a49      	ldr	r2, [pc, #292]	; (8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 80010e4:	2100      	movs	r1, #0
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f001 fa13 	bl	8002512 <HAL_CAN_GetRxMessage>
		cntt++;
 80010ec:	4b47      	ldr	r3, [pc, #284]	; (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	3301      	adds	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80010f6:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 80010f8:	e002      	b.n	8001100 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
			//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
			cntt = 0;
 80010fa:	4b44      	ldr	r3, [pc, #272]	; (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
		while (cntt - 100 > 0) {
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b64      	cmp	r3, #100	; 0x64
 8001106:	d8f8      	bhi.n	80010fa <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		}


	if (RxHeader.StdId == 0x401)
 8001108:	4b3f      	ldr	r3, [pc, #252]	; (8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f240 4201 	movw	r2, #1025	; 0x401
 8001110:	4293      	cmp	r3, r2
 8001112:	d168      	bne.n	80011e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
	{
		Vx = map(RxData[0], 0, 255, -3.0 , 3.0);
 8001114:	4b3b      	ldr	r3, [pc, #236]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	ee07 3a90 	vmov	s15, r3
 800111c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001120:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 8001124:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 8001128:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 800112c:	eddf 0a39 	vldr	s1, [pc, #228]	; 8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 8001130:	eeb0 0a67 	vmov.f32	s0, s15
 8001134:	f7ff ffa2 	bl	800107c <map>
 8001138:	eef0 7a40 	vmov.f32	s15, s0
 800113c:	4b36      	ldr	r3, [pc, #216]	; (8001218 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 800113e:	edc3 7a00 	vstr	s15, [r3]
		Vy = map(RxData[1], 0, 255, -3.0 , 3.0);
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8001144:	785b      	ldrb	r3, [r3, #1]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800114e:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 8001152:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 8001156:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 800115a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 800115e:	eeb0 0a67 	vmov.f32	s0, s15
 8001162:	f7ff ff8b 	bl	800107c <map>
 8001166:	eef0 7a40 	vmov.f32	s15, s0
 800116a:	4b2c      	ldr	r3, [pc, #176]	; (800121c <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 800116c:	edc3 7a00 	vstr	s15, [r3]
		Omega = map(RxData[2], 0, 255, -3.0 , 3.0);
 8001170:	4b24      	ldr	r3, [pc, #144]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8001172:	789b      	ldrb	r3, [r3, #2]
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800117c:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
 8001180:	eef8 1a08 	vmov.f32	s3, #136	; 0xc0400000 -3.0
 8001184:	ed9f 1a22 	vldr	s2, [pc, #136]	; 8001210 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>
 8001188:	eddf 0a22 	vldr	s1, [pc, #136]	; 8001214 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>
 800118c:	eeb0 0a67 	vmov.f32	s0, s15
 8001190:	f7ff ff74 	bl	800107c <map>
 8001194:	eef0 7a40 	vmov.f32	s15, s0
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 800119a:	edc3 7a00 	vstr	s15, [r3]
		Mode = RxData[3];
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80011a0:	78da      	ldrb	r2, [r3, #3]
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 80011a4:	701a      	strb	r2, [r3, #0]
		Position = RxData[4];
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80011a8:	791a      	ldrb	r2, [r3, #4]
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 80011ac:	701a      	strb	r2, [r3, #0]
		Catch = RxData[5];
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80011b0:	795a      	ldrb	r2, [r3, #5]
 80011b2:	4b1e      	ldr	r3, [pc, #120]	; (800122c <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 80011b4:	701a      	strb	r2, [r3, #0]
		Push = RxData[6];
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80011b8:	799a      	ldrb	r2, [r3, #6]
 80011ba:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 80011bc:	701a      	strb	r2, [r3, #0]
		Drop = RxData[7];
 80011be:	4b11      	ldr	r3, [pc, #68]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80011c0:	79da      	ldrb	r2, [r3, #7]
 80011c2:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>)
 80011c4:	701a      	strb	r2, [r3, #0]

		if (Position == 11)
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b0b      	cmp	r3, #11
 80011cc:	d107      	bne.n	80011de <HAL_CAN_RxFifo0MsgPendingCallback+0x106>
		{
			Stepper = RxData[6];
 80011ce:	4b0d      	ldr	r3, [pc, #52]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80011d0:	799a      	ldrb	r2, [r3, #6]
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>)
 80011d4:	701a      	strb	r2, [r3, #0]
			Shotter = RxData[7];
 80011d6:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80011d8:	79da      	ldrb	r2, [r3, #7]
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>)
 80011dc:	701a      	strb	r2, [r3, #0]
		}

		datacheck = 1;
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <HAL_CAN_RxFifo0MsgPendingCallback+0x168>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]
	}
	else if (RxHeader.StdId == 0x407) {
		StateP = RxData[6];

	}
}
 80011e4:	e009      	b.n	80011fa <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
	else if (RxHeader.StdId == 0x407) {
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f240 4207 	movw	r2, #1031	; 0x407
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d103      	bne.n	80011fa <HAL_CAN_RxFifo0MsgPendingCallback+0x122>
		StateP = RxData[6];
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80011f4:	799a      	ldrb	r2, [r3, #6]
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>)
 80011f8:	701a      	strb	r2, [r3, #0]
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000035c 	.word	0x2000035c
 8001208:	20000324 	.word	0x20000324
 800120c:	20000374 	.word	0x20000374
 8001210:	437f0000 	.word	0x437f0000
 8001214:	00000000 	.word	0x00000000
 8001218:	20000380 	.word	0x20000380
 800121c:	20000384 	.word	0x20000384
 8001220:	20000388 	.word	0x20000388
 8001224:	2000038c 	.word	0x2000038c
 8001228:	2000038d 	.word	0x2000038d
 800122c:	2000038e 	.word	0x2000038e
 8001230:	20000391 	.word	0x20000391
 8001234:	20000393 	.word	0x20000393
 8001238:	20000392 	.word	0x20000392
 800123c:	2000038f 	.word	0x2000038f
 8001240:	20000370 	.word	0x20000370
 8001244:	20000398 	.word	0x20000398

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f000 fe24 	bl	8001e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f848 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f7ff fe26 	bl	8000ea4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001258:	f7ff fbf6 	bl	8000a48 <MX_CAN1_Init>
  MX_I2C1_Init();
 800125c:	f7ff fe98 	bl	8000f90 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001260:	f000 fbd4 	bl	8001a0c <MX_TIM3_Init>
  MX_SPI1_Init();
 8001264:	f000 fa06 	bl	8001674 <MX_SPI1_Init>
  MX_TIM12_Init();
 8001268:	f000 fc82 	bl	8001b70 <MX_TIM12_Init>
  MX_TIM2_Init();
 800126c:	f000 fb82 	bl	8001974 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001270:	f000 fd76 	bl	8001d60 <MX_USART3_UART_Init>
  MX_TIM5_Init();
 8001274:	f000 fc2e 	bl	8001ad4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  /*** Configure TIMER ***/
  HAL_TIM_Base_Start_IT(&htim5);
 8001278:	4814      	ldr	r0, [pc, #80]	; (80012cc <main+0x84>)
 800127a:	f002 fe09 	bl	8003e90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 800127e:	4814      	ldr	r0, [pc, #80]	; (80012d0 <main+0x88>)
 8001280:	f002 fe06 	bl	8003e90 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim12);
 8001284:	4813      	ldr	r0, [pc, #76]	; (80012d4 <main+0x8c>)
 8001286:	f002 fe03 	bl	8003e90 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800128a:	2100      	movs	r1, #0
 800128c:	4812      	ldr	r0, [pc, #72]	; (80012d8 <main+0x90>)
 800128e:	f002 febf 	bl	8004010 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001292:	2104      	movs	r1, #4
 8001294:	4810      	ldr	r0, [pc, #64]	; (80012d8 <main+0x90>)
 8001296:	f002 febb 	bl	8004010 <HAL_TIM_PWM_Start>

  /*** Configure CAN ***/
  HAL_CAN_Start(&hcan1);
 800129a:	4810      	ldr	r0, [pc, #64]	; (80012dc <main+0x94>)
 800129c:	f001 f81a 	bl	80022d4 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012a0:	2102      	movs	r1, #2
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <main+0x94>)
 80012a4:	f001 fa47 	bl	8002736 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 8;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <main+0x98>)
 80012aa:	2208      	movs	r2, #8
 80012ac:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <main+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <main+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x409;
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <main+0x98>)
 80012bc:	f240 4209 	movw	r2, #1033	; 0x409
 80012c0:	601a      	str	r2, [r3, #0]

  /** Configure ADC ***/
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80012c2:	f7ff fc7d 	bl	8000bc0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012c6:	f004 f89f 	bl	8005408 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <main+0x82>
 80012cc:	200004cc 	.word	0x200004cc
 80012d0:	2000043c 	.word	0x2000043c
 80012d4:	20000514 	.word	0x20000514
 80012d8:	20000484 	.word	0x20000484
 80012dc:	2000002c 	.word	0x2000002c
 80012e0:	20000340 	.word	0x20000340

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2230      	movs	r2, #48	; 0x30
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f005 fade 	bl	80068b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 030c 	add.w	r3, r7, #12
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	4b28      	ldr	r3, [pc, #160]	; (80013b0 <SystemClock_Config+0xcc>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001310:	4a27      	ldr	r2, [pc, #156]	; (80013b0 <SystemClock_Config+0xcc>)
 8001312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001316:	6413      	str	r3, [r2, #64]	; 0x40
 8001318:	4b25      	ldr	r3, [pc, #148]	; (80013b0 <SystemClock_Config+0xcc>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001320:	60bb      	str	r3, [r7, #8]
 8001322:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <SystemClock_Config+0xd0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <SystemClock_Config+0xd0>)
 800132e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001354:	2308      	movs	r3, #8
 8001356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001358:	23a8      	movs	r3, #168	; 0xa8
 800135a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001360:	2304      	movs	r3, #4
 8001362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f002 f82f 	bl	80033cc <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001374:	f000 f978 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
 800137a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001384:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2105      	movs	r1, #5
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fa90 	bl	80038bc <HAL_RCC_ClockConfig>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013a2:	f000 f961 	bl	8001668 <Error_Handler>
  }
}
 80013a6:	bf00      	nop
 80013a8:	3750      	adds	r7, #80	; 0x50
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM12){
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a8a      	ldr	r2, [pc, #552]	; (80015f0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	f040 80a7 	bne.w	800151a <HAL_TIM_PeriodElapsedCallback+0x162>
//
		if (SpeedShooter >= 1)
 80013cc:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_TIM_PeriodElapsedCallback+0x24>
		{
			pwm1 = 700;
 80013d4:	4b88      	ldr	r3, [pc, #544]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80013d6:	4a89      	ldr	r2, [pc, #548]	; (80015fc <HAL_TIM_PeriodElapsedCallback+0x244>)
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	e007      	b.n	80013ec <HAL_TIM_PeriodElapsedCallback+0x34>
		}
		else if (SpeedShooter < 1)
 80013dc:	4b85      	ldr	r3, [pc, #532]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d103      	bne.n	80013ec <HAL_TIM_PeriodElapsedCallback+0x34>
		{
			pwm1 = 0;
 80013e4:	4b84      	ldr	r3, [pc, #528]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
		}
		// Control Motor
		if (pwm1 > 10) {
 80013ec:	4b82      	ldr	r3, [pc, #520]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80013ee:	edd3 7a00 	vldr	s15, [r3]
 80013f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fe:	dd0c      	ble.n	800141a <HAL_TIM_PeriodElapsedCallback+0x62>
			TIM3->CCR1 = 0;
 8001400:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001402:	2200      	movs	r2, #0
 8001404:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = pwm1;
 8001406:	4b7c      	ldr	r3, [pc, #496]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800140e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
 8001418:	e01e      	b.n	8001458 <HAL_TIM_PeriodElapsedCallback+0xa0>
		} else if (pwm1 < -10) {
 800141a:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800141c:	edd3 7a00 	vldr	s15, [r3]
 8001420:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8001424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142c:	d50e      	bpl.n	800144c <HAL_TIM_PeriodElapsedCallback+0x94>
			TIM3->CCR1 = -1 * pwm1;
 800142e:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001430:	edd3 7a00 	vldr	s15, [r3]
 8001434:	eef1 7a67 	vneg.f32	s15, s15
 8001438:	4b71      	ldr	r3, [pc, #452]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800143a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800143e:	ee17 2a90 	vmov	r2, s15
 8001442:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 8001444:	4b6e      	ldr	r3, [pc, #440]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001446:	2200      	movs	r2, #0
 8001448:	639a      	str	r2, [r3, #56]	; 0x38
 800144a:	e005      	b.n	8001458 <HAL_TIM_PeriodElapsedCallback+0xa0>
		} else {
			TIM3->CCR1 = 0;
 800144c:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800144e:	2200      	movs	r2, #0
 8001450:	635a      	str	r2, [r3, #52]	; 0x34
			TIM3->CCR2 = 0;
 8001452:	4b6b      	ldr	r3, [pc, #428]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001454:	2200      	movs	r2, #0
 8001456:	639a      	str	r2, [r3, #56]	; 0x38
		}
		V1_out = map(X_end*10, -100.0, 100.0, 0, 65535);
 8001458:	4b6a      	ldr	r3, [pc, #424]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001466:	ed9f 2a68 	vldr	s4, [pc, #416]	; 8001608 <HAL_TIM_PeriodElapsedCallback+0x250>
 800146a:	eddf 1a68 	vldr	s3, [pc, #416]	; 800160c <HAL_TIM_PeriodElapsedCallback+0x254>
 800146e:	ed9f 1a68 	vldr	s2, [pc, #416]	; 8001610 <HAL_TIM_PeriodElapsedCallback+0x258>
 8001472:	eddf 0a68 	vldr	s1, [pc, #416]	; 8001614 <HAL_TIM_PeriodElapsedCallback+0x25c>
 8001476:	eeb0 0a67 	vmov.f32	s0, s15
 800147a:	f7ff fdff 	bl	800107c <map>
 800147e:	eef0 7a40 	vmov.f32	s15, s0
 8001482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001486:	ee17 3a90 	vmov	r3, s15
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b62      	ldr	r3, [pc, #392]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800148e:	801a      	strh	r2, [r3, #0]
		V2_out = map(SpeedShooter*100, 0.0, 1000.0, 0, 65535);
 8001490:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	2364      	movs	r3, #100	; 0x64
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	ee07 3a90 	vmov	s15, r3
 80014a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014a4:	ed9f 2a58 	vldr	s4, [pc, #352]	; 8001608 <HAL_TIM_PeriodElapsedCallback+0x250>
 80014a8:	eddf 1a58 	vldr	s3, [pc, #352]	; 800160c <HAL_TIM_PeriodElapsedCallback+0x254>
 80014ac:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800161c <HAL_TIM_PeriodElapsedCallback+0x264>
 80014b0:	eddf 0a56 	vldr	s1, [pc, #344]	; 800160c <HAL_TIM_PeriodElapsedCallback+0x254>
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	f7ff fde0 	bl	800107c <map>
 80014bc:	eef0 7a40 	vmov.f32	s15, s0
 80014c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c4:	ee17 3a90 	vmov	r3, s15
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b55      	ldr	r3, [pc, #340]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014cc:	801a      	strh	r2, [r3, #0]
		TxData[0] = ((V1_out & 0xFF00) >> 8);
 80014ce:	4b52      	ldr	r3, [pc, #328]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	0a1b      	lsrs	r3, r3, #8
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b52      	ldr	r3, [pc, #328]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80014da:	701a      	strb	r2, [r3, #0]
		TxData[1] = (V1_out & 0x00FF);
 80014dc:	4b4e      	ldr	r3, [pc, #312]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b50      	ldr	r3, [pc, #320]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80014e4:	705a      	strb	r2, [r3, #1]
		TxData[2] = ((V2_out & 0xFF00) >> 8);
 80014e6:	4b4e      	ldr	r3, [pc, #312]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80014f2:	709a      	strb	r2, [r3, #2]
		TxData[3] = (V2_out & 0x00FF);
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x268>)
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b4a      	ldr	r3, [pc, #296]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80014fc:	70da      	strb	r2, [r3, #3]
		TxData[4] = Push;
 80014fe:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	4b48      	ldr	r3, [pc, #288]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001504:	711a      	strb	r2, [r3, #4]
		TxData[5] = Drop;
 8001506:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001508:	781a      	ldrb	r2, [r3, #0]
 800150a:	4b46      	ldr	r3, [pc, #280]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800150c:	715a      	strb	r2, [r3, #5]
//		TxData[6] = TakeRice;
//		TxData[7] = push2;
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800150e:	4b48      	ldr	r3, [pc, #288]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001510:	4a44      	ldr	r2, [pc, #272]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001512:	4948      	ldr	r1, [pc, #288]	; (8001634 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001514:	4848      	ldr	r0, [pc, #288]	; (8001638 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001516:	f000 ff21 	bl	800235c <HAL_CAN_AddTxMessage>

	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d101      	bne.n	8001528 <HAL_TIM_PeriodElapsedCallback+0x170>
    HAL_IncTick();
 8001524:	f000 fcda 	bl	8001edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {  //stepper1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001530:	d12d      	bne.n	800158e <HAL_TIM_PeriodElapsedCallback+0x1d6>

		if (omega != 0) {
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001534:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	f7ff f8ae 	bl	80006a0 <__aeabi_dcmpeq>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d11c      	bne.n	8001584 <HAL_TIM_PeriodElapsedCallback+0x1cc>
			stepDelay = (Alpha * TIM_FREQ) / (omega);
 800154a:	4b3d      	ldr	r3, [pc, #244]	; (8001640 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	a125      	add	r1, pc, #148	; (adr r1, 80015e8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001552:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001556:	f7fe ff65 	bl	8000424 <__aeabi_ddiv>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	f7ff f8cf 	bl	8000704 <__aeabi_d2uiz>
 8001566:	4603      	mov	r3, r0
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b36      	ldr	r3, [pc, #216]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800156c:	801a      	strh	r2, [r3, #0]
			TIM2->ARR = stepDelay;
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8001578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157c:	4832      	ldr	r0, [pc, #200]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800157e:	f001 fdc6 	bl	800310e <HAL_GPIO_TogglePin>
 8001582:	e004      	b.n	800158e <HAL_TIM_PeriodElapsedCallback+0x1d6>

		} else {
			TIM2->ARR = 10000;
 8001584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001588:	f242 7210 	movw	r2, #10000	; 0x2710
 800158c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
  if (htim->Instance == TIM5)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a2e      	ldr	r2, [pc, #184]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d123      	bne.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x228>
  {
		if (Position == 1  ) {
 8001598:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d103      	bne.n	80015a8 <HAL_TIM_PeriodElapsedCallback+0x1f0>
			X_end = 0.45; // store 2 rice
 80015a0:	4b18      	ldr	r3, [pc, #96]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015a2:	4a2c      	ldr	r2, [pc, #176]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	e016      	b.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x21e>
//			X_end = -0.66;
		} else if (Position == 2  ) {
 80015a8:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d103      	bne.n	80015b8 <HAL_TIM_PeriodElapsedCallback+0x200>
			X_end = 0.28; // store 4 rice
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015b2:	4a29      	ldr	r2, [pc, #164]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	e00e      	b.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x21e>
//			X_end = -0.44;
		} else if (Position == 3 ) {
 80015b8:	4b25      	ldr	r3, [pc, #148]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b03      	cmp	r3, #3
 80015be:	d103      	bne.n	80015c8 <HAL_TIM_PeriodElapsedCallback+0x210>
			X_end = 0.09; // store 6 rice
 80015c0:	4b10      	ldr	r3, [pc, #64]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015c2:	4a26      	ldr	r2, [pc, #152]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e006      	b.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x21e>
//			X_end = -0.38;
		}
		else if (Position >=4)
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0x298>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d902      	bls.n	80015d6 <HAL_TIM_PeriodElapsedCallback+0x21e>
		{
			X_end = 0.1;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80015d4:	601a      	str	r2, [r3, #0]
		}
//		if (Push == 1) {
//			X_end = X_goal;
//		}
		j++;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	3301      	adds	r3, #1
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80015de:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	99999999 	.word	0x99999999
 80015ec:	40beadf9 	.word	0x40beadf9
 80015f0:	40001800 	.word	0x40001800
 80015f4:	20000390 	.word	0x20000390
 80015f8:	20000378 	.word	0x20000378
 80015fc:	442f0000 	.word	0x442f0000
 8001600:	40000400 	.word	0x40000400
 8001604:	2000006c 	.word	0x2000006c
 8001608:	477fff00 	.word	0x477fff00
 800160c:	00000000 	.word	0x00000000
 8001610:	42c80000 	.word	0x42c80000
 8001614:	c2c80000 	.word	0xc2c80000
 8001618:	2000037c 	.word	0x2000037c
 800161c:	447a0000 	.word	0x447a0000
 8001620:	2000037e 	.word	0x2000037e
 8001624:	20000364 	.word	0x20000364
 8001628:	20000391 	.word	0x20000391
 800162c:	20000393 	.word	0x20000393
 8001630:	2000036c 	.word	0x2000036c
 8001634:	20000340 	.word	0x20000340
 8001638:	2000002c 	.word	0x2000002c
 800163c:	40001000 	.word	0x40001000
 8001640:	20000060 	.word	0x20000060
 8001644:	20000358 	.word	0x20000358
 8001648:	40020400 	.word	0x40020400
 800164c:	40000c00 	.word	0x40000c00
 8001650:	2000038d 	.word	0x2000038d
 8001654:	3ee66666 	.word	0x3ee66666
 8001658:	3e8f5c29 	.word	0x3e8f5c29
 800165c:	3db851ec 	.word	0x3db851ec
 8001660:	3dcccccd 	.word	0x3dcccccd
 8001664:	20000394 	.word	0x20000394

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_SPI1_Init+0x64>)
 800167a:	4a18      	ldr	r2, [pc, #96]	; (80016dc <MX_SPI1_Init+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <MX_SPI1_Init+0x64>)
 8001680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001698:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <MX_SPI1_Init+0x64>)
 80016a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <MX_SPI1_Init+0x64>)
 80016a8:	2220      	movs	r2, #32
 80016aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <MX_SPI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <MX_SPI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <MX_SPI1_Init+0x64>)
 80016c0:	220a      	movs	r2, #10
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	; (80016d8 <MX_SPI1_Init+0x64>)
 80016c6:	f002 fb0b 	bl	8003ce0 <HAL_SPI_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d0:	f7ff ffca 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000039c 	.word	0x2000039c
 80016dc:	40013000 	.word	0x40013000

080016e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	; (8001764 <HAL_SPI_MspInit+0x84>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d12b      	bne.n	800175a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a17      	ldr	r2, [pc, #92]	; (8001768 <HAL_SPI_MspInit+0x88>)
 800170c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b11      	ldr	r3, [pc, #68]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a10      	ldr	r2, [pc, #64]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_SPI_MspInit+0x88>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800173a:	23e0      	movs	r3, #224	; 0xe0
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001746:	2303      	movs	r3, #3
 8001748:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174a:	2305      	movs	r3, #5
 800174c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	; (800176c <HAL_SPI_MspInit+0x8c>)
 8001756:	f001 fb25 	bl	8002da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	; 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40013000 	.word	0x40013000
 8001768:	40023800 	.word	0x40023800
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_MspInit+0x54>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <HAL_MspInit+0x54>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001784:	6453      	str	r3, [r2, #68]	; 0x44
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <HAL_MspInit+0x54>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_MspInit+0x54>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a0a      	ldr	r2, [pc, #40]	; (80017c4 <HAL_MspInit+0x54>)
 800179c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_MspInit+0x54>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017aa:	603b      	str	r3, [r7, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	210f      	movs	r1, #15
 80017b2:	f06f 0001 	mvn.w	r0, #1
 80017b6:	f001 facb 	bl	8002d50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08e      	sub	sp, #56	; 0x38
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_InitTick+0xe4>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a32      	ldr	r2, [pc, #200]	; (80018ac <HAL_InitTick+0xe4>)
 80017e2:	f043 0310 	orr.w	r3, r3, #16
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_InitTick+0xe4>)
 80017ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ec:	f003 0310 	and.w	r3, r3, #16
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017f4:	f107 0210 	add.w	r2, r7, #16
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 fa3c 	bl	8003c7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001804:	6a3b      	ldr	r3, [r7, #32]
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180a:	2b00      	cmp	r3, #0
 800180c:	d103      	bne.n	8001816 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800180e:	f002 fa0d 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8001812:	6378      	str	r0, [r7, #52]	; 0x34
 8001814:	e004      	b.n	8001820 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001816:	f002 fa09 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 800181a:	4603      	mov	r3, r0
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001822:	4a23      	ldr	r2, [pc, #140]	; (80018b0 <HAL_InitTick+0xe8>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	0c9b      	lsrs	r3, r3, #18
 800182a:	3b01      	subs	r3, #1
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_InitTick+0xec>)
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <HAL_InitTick+0xf0>)
 8001832:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_InitTick+0xec>)
 8001836:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800183c:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <HAL_InitTick+0xec>)
 800183e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001840:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_InitTick+0xec>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <HAL_InitTick+0xec>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_InitTick+0xec>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001854:	4817      	ldr	r0, [pc, #92]	; (80018b4 <HAL_InitTick+0xec>)
 8001856:	f002 facc 	bl	8003df2 <HAL_TIM_Base_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001860:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001868:	4812      	ldr	r0, [pc, #72]	; (80018b4 <HAL_InitTick+0xec>)
 800186a:	f002 fb11 	bl	8003e90 <HAL_TIM_Base_Start_IT>
 800186e:	4603      	mov	r3, r0
 8001870:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001874:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001878:	2b00      	cmp	r3, #0
 800187a:	d111      	bne.n	80018a0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800187c:	2036      	movs	r0, #54	; 0x36
 800187e:	f001 fa83 	bl	8002d88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b0f      	cmp	r3, #15
 8001886:	d808      	bhi.n	800189a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001888:	2200      	movs	r2, #0
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	2036      	movs	r0, #54	; 0x36
 800188e:	f001 fa5f 	bl	8002d50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001892:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_InitTick+0xf4>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	e002      	b.n	80018a0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3738      	adds	r7, #56	; 0x38
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	200003f4 	.word	0x200003f4
 80018b8:	40001000 	.word	0x40001000
 80018bc:	20000004 	.word	0x20000004

080018c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018c4:	e7fe      	b.n	80018c4 <NMI_Handler+0x4>

080018c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c6:	b480      	push	{r7}
 80018c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ca:	e7fe      	b.n	80018ca <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <MemManage_Handler+0x4>

080018d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d2:	b480      	push	{r7}
 80018d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <BusFault_Handler+0x4>

080018d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <UsageFault_Handler+0x4>

080018de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018f0:	4802      	ldr	r0, [pc, #8]	; (80018fc <CAN1_RX0_IRQHandler+0x10>)
 80018f2:	f000 ff46 	bl	8002782 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000002c 	.word	0x2000002c

08001900 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <TIM2_IRQHandler+0x10>)
 8001906:	f002 fc4b 	bl	80041a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000043c 	.word	0x2000043c

08001914 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800191a:	f002 fc41 	bl	80041a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000514 	.word	0x20000514

08001928 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <TIM5_IRQHandler+0x10>)
 800192e:	f002 fc37 	bl	80041a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200004cc 	.word	0x200004cc

0800193c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001940:	4802      	ldr	r0, [pc, #8]	; (800194c <TIM6_DAC_IRQHandler+0x10>)
 8001942:	f002 fc2d 	bl	80041a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200003f4 	.word	0x200003f4

08001950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <SystemInit+0x20>)
 8001956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195a:	4a05      	ldr	r2, [pc, #20]	; (8001970 <SystemInit+0x20>)
 800195c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197a:	f107 0308 	add.w	r3, r7, #8
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001988:	463b      	mov	r3, r7
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <MX_TIM2_Init+0x94>)
 8001992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <MX_TIM2_Init+0x94>)
 800199a:	2253      	movs	r2, #83	; 0x53
 800199c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199e:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <MX_TIM2_Init+0x94>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <MX_TIM2_Init+0x94>)
 80019a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <MX_TIM2_Init+0x94>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b2:	4b15      	ldr	r3, [pc, #84]	; (8001a08 <MX_TIM2_Init+0x94>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019b8:	4813      	ldr	r0, [pc, #76]	; (8001a08 <MX_TIM2_Init+0x94>)
 80019ba:	f002 fa1a 	bl	8003df2 <HAL_TIM_Base_Init>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019c4:	f7ff fe50 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4619      	mov	r1, r3
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_TIM2_Init+0x94>)
 80019d6:	f002 fdad 	bl	8004534 <HAL_TIM_ConfigClockSource>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019e0:	f7ff fe42 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	4619      	mov	r1, r3
 80019f0:	4805      	ldr	r0, [pc, #20]	; (8001a08 <MX_TIM2_Init+0x94>)
 80019f2:	f003 f99f 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019fc:	f7ff fe34 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	3718      	adds	r7, #24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000043c 	.word	0x2000043c

08001a0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a12:	f107 0320 	add.w	r3, r7, #32
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1c:	1d3b      	adds	r3, r7, #4
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	615a      	str	r2, [r3, #20]
 8001a2c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a30:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <MX_TIM3_Init+0xc4>)
 8001a32:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 13;
 8001a34:	4b25      	ldr	r3, [pc, #148]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a36:	220d      	movs	r2, #13
 8001a38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001a40:	4b22      	ldr	r3, [pc, #136]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b20      	ldr	r3, [pc, #128]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a4e:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a54:	481d      	ldr	r0, [pc, #116]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a56:	f002 fa8b 	bl	8003f70 <HAL_TIM_PWM_Init>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a60:	f7ff fe02 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	4619      	mov	r1, r3
 8001a72:	4816      	ldr	r0, [pc, #88]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a74:	f003 f95e 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a7e:	f7ff fdf3 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a82:	2360      	movs	r3, #96	; 0x60
 8001a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a92:	1d3b      	adds	r3, r7, #4
 8001a94:	2200      	movs	r2, #0
 8001a96:	4619      	mov	r1, r3
 8001a98:	480c      	ldr	r0, [pc, #48]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001a9a:	f002 fc89 	bl	80043b0 <HAL_TIM_PWM_ConfigChannel>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001aa4:	f7ff fde0 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	2204      	movs	r2, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4807      	ldr	r0, [pc, #28]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001ab0:	f002 fc7e 	bl	80043b0 <HAL_TIM_PWM_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001aba:	f7ff fdd5 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001abe:	4803      	ldr	r0, [pc, #12]	; (8001acc <MX_TIM3_Init+0xc0>)
 8001ac0:	f000 f914 	bl	8001cec <HAL_TIM_MspPostInit>

}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000484 	.word	0x20000484
 8001ad0:	40000400 	.word	0x40000400

08001ad4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ada:	f107 0308 	add.w	r3, r7, #8
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	605a      	str	r2, [r3, #4]
 8001ae4:	609a      	str	r2, [r3, #8]
 8001ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001af2:	4a1e      	ldr	r2, [pc, #120]	; (8001b6c <MX_TIM5_Init+0x98>)
 8001af4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 167;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001af8:	22a7      	movs	r2, #167	; 0xa7
 8001afa:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 9999;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001b04:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b08:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0a:	4b17      	ldr	r3, [pc, #92]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b16:	4814      	ldr	r0, [pc, #80]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001b18:	f002 f96b 	bl	8003df2 <HAL_TIM_Base_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001b22:	f7ff fda1 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001b2c:	f107 0308 	add.w	r3, r7, #8
 8001b30:	4619      	mov	r1, r3
 8001b32:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001b34:	f002 fcfe 	bl	8004534 <HAL_TIM_ConfigClockSource>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001b3e:	f7ff fd93 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <MX_TIM5_Init+0x94>)
 8001b50:	f003 f8f0 	bl	8004d34 <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001b5a:	f7ff fd85 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b5e:	bf00      	nop
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200004cc 	.word	0x200004cc
 8001b6c:	40000c00 	.word	0x40000c00

08001b70 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b76:	463b      	mov	r3, r7
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <MX_TIM12_Init+0x6c>)
 8001b84:	4a16      	ldr	r2, [pc, #88]	; (8001be0 <MX_TIM12_Init+0x70>)
 8001b86:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 167;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_TIM12_Init+0x6c>)
 8001b8a:	22a7      	movs	r2, #167	; 0xa7
 8001b8c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_TIM12_Init+0x6c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_TIM12_Init+0x6c>)
 8001b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b9a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_TIM12_Init+0x6c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_TIM12_Init+0x6c>)
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <MX_TIM12_Init+0x6c>)
 8001baa:	f002 f922 	bl	8003df2 <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001bb4:	f7ff fd58 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <MX_TIM12_Init+0x6c>)
 8001bc4:	f002 fcb6 	bl	8004534 <HAL_TIM_ConfigClockSource>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001bce:	f7ff fd4b 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000514 	.word	0x20000514
 8001be0:	40001800 	.word	0x40001800

08001be4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d116      	bne.n	8001c24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a27      	ldr	r2, [pc, #156]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	201c      	movs	r0, #28
 8001c18:	f001 f89a 	bl	8002d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c1c:	201c      	movs	r0, #28
 8001c1e:	f001 f8b3 	bl	8002d88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001c22:	e036      	b.n	8001c92 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM5)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <HAL_TIM_Base_MspInit+0xbc>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d116      	bne.n	8001c5c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2105      	movs	r1, #5
 8001c4e:	2032      	movs	r0, #50	; 0x32
 8001c50:	f001 f87e 	bl	8002d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001c54:	2032      	movs	r0, #50	; 0x32
 8001c56:	f001 f897 	bl	8002d88 <HAL_NVIC_EnableIRQ>
}
 8001c5a:	e01a      	b.n	8001c92 <HAL_TIM_Base_MspInit+0xae>
  else if(tim_baseHandle->Instance==TIM12)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a10      	ldr	r2, [pc, #64]	; (8001ca4 <HAL_TIM_Base_MspInit+0xc0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d115      	bne.n	8001c92 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_TIM_Base_MspInit+0xb8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 5, 0);
 8001c82:	2200      	movs	r2, #0
 8001c84:	2105      	movs	r1, #5
 8001c86:	202b      	movs	r0, #43	; 0x2b
 8001c88:	f001 f862 	bl	8002d50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001c8c:	202b      	movs	r0, #43	; 0x2b
 8001c8e:	f001 f87b 	bl	8002d88 <HAL_NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40000c00 	.word	0x40000c00
 8001ca4:	40001800 	.word	0x40001800

08001ca8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <HAL_TIM_PWM_MspInit+0x3c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d10d      	bne.n	8001cd6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_TIM_PWM_MspInit+0x40>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a09      	ldr	r2, [pc, #36]	; (8001ce8 <HAL_TIM_PWM_MspInit+0x40>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <HAL_TIM_PWM_MspInit+0x40>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3714      	adds	r7, #20
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40023800 	.word	0x40023800

08001cec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a12      	ldr	r2, [pc, #72]	; (8001d54 <HAL_TIM_MspPostInit+0x68>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d11d      	bne.n	8001d4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_TIM_MspPostInit+0x6c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_TIM_MspPostInit+0x6c>)
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_TIM_MspPostInit+0x6c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d2a:	2330      	movs	r3, #48	; 0x30
 8001d2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <HAL_TIM_MspPostInit+0x70>)
 8001d46:	f001 f82d 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020400 	.word	0x40020400

08001d60 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d64:	4b11      	ldr	r3, [pc, #68]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d66:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <MX_USART3_UART_Init+0x50>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d6a:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b08      	ldr	r3, [pc, #32]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <MX_USART3_UART_Init+0x4c>)
 8001d98:	f003 f85c 	bl	8004e54 <HAL_UART_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001da2:	f7ff fc61 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000055c 	.word	0x2000055c
 8001db0:	40004800 	.word	0x40004800

08001db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	; 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a19      	ldr	r2, [pc, #100]	; (8001e38 <HAL_UART_MspInit+0x84>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d12c      	bne.n	8001e30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b18      	ldr	r3, [pc, #96]	; (8001e3c <HAL_UART_MspInit+0x88>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <HAL_UART_MspInit+0x88>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6413      	str	r3, [r2, #64]	; 0x40
 8001de6:	4b15      	ldr	r3, [pc, #84]	; (8001e3c <HAL_UART_MspInit+0x88>)
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b11      	ldr	r3, [pc, #68]	; (8001e3c <HAL_UART_MspInit+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	4a10      	ldr	r2, [pc, #64]	; (8001e3c <HAL_UART_MspInit+0x88>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6313      	str	r3, [r2, #48]	; 0x30
 8001e02:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_UART_MspInit+0x88>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e0e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e14:	2302      	movs	r3, #2
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e20:	2307      	movs	r3, #7
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_UART_MspInit+0x8c>)
 8001e2c:	f000 ffba 	bl	8002da4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e30:	bf00      	nop
 8001e32:	3728      	adds	r7, #40	; 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40004800 	.word	0x40004800
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020800 	.word	0x40020800

08001e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e48:	480d      	ldr	r0, [pc, #52]	; (8001e80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e4a:	490e      	ldr	r1, [pc, #56]	; (8001e84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e50:	e002      	b.n	8001e58 <LoopCopyDataInit>

08001e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e56:	3304      	adds	r3, #4

08001e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e5c:	d3f9      	bcc.n	8001e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5e:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e60:	4c0b      	ldr	r4, [pc, #44]	; (8001e90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e64:	e001      	b.n	8001e6a <LoopFillZerobss>

08001e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e68:	3204      	adds	r2, #4

08001e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e6c:	d3fb      	bcc.n	8001e66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e6e:	f7ff fd6f 	bl	8001950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e72:	f004 fcfb 	bl	800686c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e76:	f7ff f9e7 	bl	8001248 <main>
  bx  lr    
 8001e7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001e88:	08006990 	.word	0x08006990
  ldr r2, =_sbss
 8001e8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001e90:	200042f8 	.word	0x200042f8

08001e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e94:	e7fe      	b.n	8001e94 <ADC_IRQHandler>
	...

08001e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <HAL_Init+0x40>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <HAL_Init+0x40>)
 8001ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_Init+0x40>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_Init+0x40>)
 8001eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001eb4:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <HAL_Init+0x40>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a07      	ldr	r2, [pc, #28]	; (8001ed8 <HAL_Init+0x40>)
 8001eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f000 ff3a 	bl	8002d3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ec6:	200f      	movs	r0, #15
 8001ec8:	f7ff fc7e 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ecc:	f7ff fc50 	bl	8001770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40023c00 	.word	0x40023c00

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x20>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <HAL_IncTick+0x24>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4413      	add	r3, r2
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_IncTick+0x24>)
 8001eee:	6013      	str	r3, [r2, #0]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000008 	.word	0x20000008
 8001f00:	200005a0 	.word	0x200005a0

08001f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_GetTick+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	200005a0 	.word	0x200005a0

08001f1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0ed      	b.n	800210a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d102      	bne.n	8001f40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7fe fdd6 	bl	8000aec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f042 0201 	orr.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f50:	f7ff ffd8 	bl	8001f04 <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f56:	e012      	b.n	8001f7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f58:	f7ff ffd4 	bl	8001f04 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b0a      	cmp	r3, #10
 8001f64:	d90b      	bls.n	8001f7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2205      	movs	r2, #5
 8001f76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0c5      	b.n	800210a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0e5      	beq.n	8001f58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0202 	bic.w	r2, r2, #2
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f9c:	f7ff ffb2 	bl	8001f04 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fa2:	e012      	b.n	8001fca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fa4:	f7ff ffae 	bl	8001f04 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b0a      	cmp	r3, #10
 8001fb0:	d90b      	bls.n	8001fca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2205      	movs	r2, #5
 8001fc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e09f      	b.n	800210a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e5      	bne.n	8001fa4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	7e1b      	ldrb	r3, [r3, #24]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	e007      	b.n	8002002 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7e5b      	ldrb	r3, [r3, #25]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d108      	bne.n	800201c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	e007      	b.n	800202c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800202a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	7e9b      	ldrb	r3, [r3, #26]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d108      	bne.n	8002046 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0220 	orr.w	r2, r2, #32
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	e007      	b.n	8002056 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0220 	bic.w	r2, r2, #32
 8002054:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	7edb      	ldrb	r3, [r3, #27]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d108      	bne.n	8002070 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0210 	bic.w	r2, r2, #16
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e007      	b.n	8002080 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 0210 	orr.w	r2, r2, #16
 800207e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	7f1b      	ldrb	r3, [r3, #28]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d108      	bne.n	800209a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f042 0208 	orr.w	r2, r2, #8
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	e007      	b.n	80020aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f022 0208 	bic.w	r2, r2, #8
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7f5b      	ldrb	r3, [r3, #29]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f042 0204 	orr.w	r2, r2, #4
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	e007      	b.n	80020d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0204 	bic.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	ea42 0103 	orr.w	r1, r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002114:	b480      	push	{r7}
 8002116:	b087      	sub	sp, #28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800212a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d003      	beq.n	800213a <HAL_CAN_ConfigFilter+0x26>
 8002132:	7cfb      	ldrb	r3, [r7, #19]
 8002134:	2b02      	cmp	r3, #2
 8002136:	f040 80be 	bne.w	80022b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800213a:	4b65      	ldr	r3, [pc, #404]	; (80022d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800213c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002154:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	431a      	orrs	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	f003 031f 	and.w	r3, r3, #31
 800217a:	2201      	movs	r2, #1
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	43db      	mvns	r3, r3
 800218c:	401a      	ands	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d123      	bne.n	80021e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80021be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	3248      	adds	r2, #72	; 0x48
 80021c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80021d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80021da:	6979      	ldr	r1, [r7, #20]
 80021dc:	3348      	adds	r3, #72	; 0x48
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	440b      	add	r3, r1
 80021e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d122      	bne.n	8002232 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800220c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3248      	adds	r2, #72	; 0x48
 8002212:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002226:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002228:	6979      	ldr	r1, [r7, #20]
 800222a:	3348      	adds	r3, #72	; 0x48
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	43db      	mvns	r3, r3
 8002244:	401a      	ands	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800224c:	e007      	b.n	800225e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	431a      	orrs	r2, r3
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	43db      	mvns	r3, r3
 8002270:	401a      	ands	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002278:	e007      	b.n	800228a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	431a      	orrs	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d107      	bne.n	80022a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	431a      	orrs	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022a8:	f023 0201 	bic.w	r2, r3, #1
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e006      	b.n	80022c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
  }
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	371c      	adds	r7, #28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40006400 	.word	0x40006400

080022d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d12e      	bne.n	8002346 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f022 0201 	bic.w	r2, r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002300:	f7ff fe00 	bl	8001f04 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002306:	e012      	b.n	800232e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002308:	f7ff fdfc 	bl	8001f04 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b0a      	cmp	r3, #10
 8002314:	d90b      	bls.n	800232e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2205      	movs	r2, #5
 8002326:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e012      	b.n	8002354 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1e5      	bne.n	8002308 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e006      	b.n	8002354 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
  }
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	; 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
 8002368:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002370:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800237a:	7ffb      	ldrb	r3, [r7, #31]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d003      	beq.n	8002388 <HAL_CAN_AddTxMessage+0x2c>
 8002380:	7ffb      	ldrb	r3, [r7, #31]
 8002382:	2b02      	cmp	r3, #2
 8002384:	f040 80b8 	bne.w	80024f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002398:	2b00      	cmp	r3, #0
 800239a:	d105      	bne.n	80023a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	f000 80a0 	beq.w	80024e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	0e1b      	lsrs	r3, r3, #24
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d907      	bls.n	80023c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e09e      	b.n	8002506 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80023c8:	2201      	movs	r2, #1
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	409a      	lsls	r2, r3
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	6809      	ldr	r1, [r1, #0]
 80023e8:	431a      	orrs	r2, r3
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3318      	adds	r3, #24
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	440b      	add	r3, r1
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	e00f      	b.n	8002416 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002400:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002406:	68f9      	ldr	r1, [r7, #12]
 8002408:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800240a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3318      	adds	r3, #24
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	440b      	add	r3, r1
 8002414:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6819      	ldr	r1, [r3, #0]
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	691a      	ldr	r2, [r3, #16]
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3318      	adds	r3, #24
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	440b      	add	r3, r1
 8002426:	3304      	adds	r3, #4
 8002428:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	7d1b      	ldrb	r3, [r3, #20]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d111      	bne.n	8002456 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3318      	adds	r3, #24
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4413      	add	r3, r2
 800243e:	3304      	adds	r3, #4
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	6811      	ldr	r1, [r2, #0]
 8002446:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3318      	adds	r3, #24
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	440b      	add	r3, r1
 8002452:	3304      	adds	r3, #4
 8002454:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3307      	adds	r3, #7
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	061a      	lsls	r2, r3, #24
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3306      	adds	r3, #6
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3305      	adds	r3, #5
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	4313      	orrs	r3, r2
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	3204      	adds	r2, #4
 8002476:	7812      	ldrb	r2, [r2, #0]
 8002478:	4610      	mov	r0, r2
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	6811      	ldr	r1, [r2, #0]
 800247e:	ea43 0200 	orr.w	r2, r3, r0
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	440b      	add	r3, r1
 8002488:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800248c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3303      	adds	r3, #3
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	061a      	lsls	r2, r3, #24
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3302      	adds	r3, #2
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3301      	adds	r3, #1
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	021b      	lsls	r3, r3, #8
 80024a8:	4313      	orrs	r3, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	7812      	ldrb	r2, [r2, #0]
 80024ae:	4610      	mov	r0, r2
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	6811      	ldr	r1, [r2, #0]
 80024b4:	ea43 0200 	orr.w	r2, r3, r0
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	440b      	add	r3, r1
 80024be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80024c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	3318      	adds	r3, #24
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	4413      	add	r3, r2
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	6811      	ldr	r1, [r2, #0]
 80024d6:	f043 0201 	orr.w	r2, r3, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3318      	adds	r3, #24
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	440b      	add	r3, r1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e00e      	b.n	8002506 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e006      	b.n	8002506 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
  }
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002512:	b480      	push	{r7}
 8002514:	b087      	sub	sp, #28
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002526:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002528:	7dfb      	ldrb	r3, [r7, #23]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d003      	beq.n	8002536 <HAL_CAN_GetRxMessage+0x24>
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	2b02      	cmp	r3, #2
 8002532:	f040 80f3 	bne.w	800271c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10e      	bne.n	800255a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d116      	bne.n	8002578 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e0e7      	b.n	800272a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0303 	and.w	r3, r3, #3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d107      	bne.n	8002578 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e0d8      	b.n	800272a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	331b      	adds	r3, #27
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0204 	and.w	r2, r3, #4
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	331b      	adds	r3, #27
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	4413      	add	r3, r2
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	0d5b      	lsrs	r3, r3, #21
 80025a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e00b      	b.n	80025c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	331b      	adds	r3, #27
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	4413      	add	r3, r2
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	331b      	adds	r3, #27
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	4413      	add	r3, r2
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0202 	and.w	r2, r3, #2
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	331b      	adds	r3, #27
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	4413      	add	r3, r2
 80025ea:	3304      	adds	r3, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 020f 	and.w	r2, r3, #15
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	331b      	adds	r3, #27
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	4413      	add	r3, r2
 8002602:	3304      	adds	r3, #4
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b2da      	uxtb	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	331b      	adds	r3, #27
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	4413      	add	r3, r2
 800261a:	3304      	adds	r3, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	b29a      	uxth	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	4413      	add	r3, r2
 8002630:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	4413      	add	r3, r2
 8002646:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0a1a      	lsrs	r2, r3, #8
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	4413      	add	r3, r2
 8002660:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	0c1a      	lsrs	r2, r3, #16
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	3302      	adds	r3, #2
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	4413      	add	r3, r2
 800267a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	0e1a      	lsrs	r2, r3, #24
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	3303      	adds	r3, #3
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4413      	add	r3, r2
 8002694:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	3304      	adds	r3, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0a1a      	lsrs	r2, r3, #8
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	3305      	adds	r3, #5
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	0c1a      	lsrs	r2, r3, #16
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	3306      	adds	r3, #6
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	4413      	add	r3, r2
 80026e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	0e1a      	lsrs	r2, r3, #24
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	3307      	adds	r3, #7
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d108      	bne.n	8002708 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	60da      	str	r2, [r3, #12]
 8002706:	e007      	b.n	8002718 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0220 	orr.w	r2, r2, #32
 8002716:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	e006      	b.n	800272a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002720:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
  }
}
 800272a:	4618      	mov	r0, r3
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002746:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d002      	beq.n	8002754 <HAL_CAN_ActivateNotification+0x1e>
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d109      	bne.n	8002768 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6959      	ldr	r1, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	430a      	orrs	r2, r1
 8002762:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e006      	b.n	8002776 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
  }
}
 8002776:	4618      	mov	r0, r3
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b08a      	sub	sp, #40	; 0x28
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d07c      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d023      	beq.n	800281a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2201      	movs	r2, #1
 80027d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d003      	beq.n	80027ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f983 	bl	8002af0 <HAL_CAN_TxMailbox0CompleteCallback>
 80027ea:	e016      	b.n	800281a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d004      	beq.n	8002800 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	e00c      	b.n	800281a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e002      	b.n	800281a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f989 	bl	8002b2c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	2b00      	cmp	r3, #0
 8002822:	d024      	beq.n	800286e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800282c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f963 	bl	8002b04 <HAL_CAN_TxMailbox1CompleteCallback>
 800283e:	e016      	b.n	800286e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002846:	2b00      	cmp	r3, #0
 8002848:	d004      	beq.n	8002854 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	e00c      	b.n	800286e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
 8002866:	e002      	b.n	800286e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 f969 	bl	8002b40 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d024      	beq.n	80028c2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002880:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f943 	bl	8002b18 <HAL_CAN_TxMailbox2CompleteCallback>
 8002892:	e016      	b.n	80028c2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d004      	beq.n	80028a8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	e00c      	b.n	80028c2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
 80028ba:	e002      	b.n	80028c2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f949 	bl	8002b54 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00c      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f003 0310 	and.w	r3, r3, #16
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2210      	movs	r2, #16
 80028e4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00b      	beq.n	8002908 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2208      	movs	r2, #8
 8002900:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f930 	bl	8002b68 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d009      	beq.n	8002926 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7fe fbd9 	bl	80010d8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800292c:	2b00      	cmp	r3, #0
 800292e:	d00c      	beq.n	800294a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f003 0310 	and.w	r3, r3, #16
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002940:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2210      	movs	r2, #16
 8002948:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800294a:	6a3b      	ldr	r3, [r7, #32]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2208      	movs	r2, #8
 8002964:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f912 	bl	8002b90 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f003 0310 	and.w	r3, r3, #16
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691b      	ldr	r3, [r3, #16]
 800297c:	f003 0303 	and.w	r3, r3, #3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f8f9 	bl	8002b7c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00b      	beq.n	80029ac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2210      	movs	r2, #16
 80029a4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f8fc 	bl	8002ba4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2208      	movs	r2, #8
 80029c6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f8f5 	bl	8002bb8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029ce:	6a3b      	ldr	r3, [r7, #32]
 80029d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d07b      	beq.n	8002ad0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d072      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d008      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d043      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d03e      	beq.n	8002ac8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a50:	2b60      	cmp	r3, #96	; 0x60
 8002a52:	d02b      	beq.n	8002aac <HAL_CAN_IRQHandler+0x32a>
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d82e      	bhi.n	8002ab6 <HAL_CAN_IRQHandler+0x334>
 8002a58:	2b50      	cmp	r3, #80	; 0x50
 8002a5a:	d022      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x320>
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d82a      	bhi.n	8002ab6 <HAL_CAN_IRQHandler+0x334>
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d019      	beq.n	8002a98 <HAL_CAN_IRQHandler+0x316>
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d826      	bhi.n	8002ab6 <HAL_CAN_IRQHandler+0x334>
 8002a68:	2b30      	cmp	r3, #48	; 0x30
 8002a6a:	d010      	beq.n	8002a8e <HAL_CAN_IRQHandler+0x30c>
 8002a6c:	2b30      	cmp	r3, #48	; 0x30
 8002a6e:	d822      	bhi.n	8002ab6 <HAL_CAN_IRQHandler+0x334>
 8002a70:	2b10      	cmp	r3, #16
 8002a72:	d002      	beq.n	8002a7a <HAL_CAN_IRQHandler+0x2f8>
 8002a74:	2b20      	cmp	r3, #32
 8002a76:	d005      	beq.n	8002a84 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a78:	e01d      	b.n	8002ab6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a82:	e019      	b.n	8002ab8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a8c:	e014      	b.n	8002ab8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	f043 0320 	orr.w	r3, r3, #32
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a96:	e00f      	b.n	8002ab8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aa0:	e00a      	b.n	8002ab8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aaa:	e005      	b.n	8002ab8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ab4:	e000      	b.n	8002ab8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002ab6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002ac6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2204      	movs	r2, #4
 8002ace:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d008      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f872 	bl	8002bcc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3728      	adds	r7, #40	; 0x28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bf0:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c12:	4a04      	ldr	r2, [pc, #16]	; (8002c24 <__NVIC_SetPriorityGrouping+0x44>)
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	60d3      	str	r3, [r2, #12]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c2c:	4b04      	ldr	r3, [pc, #16]	; (8002c40 <__NVIC_GetPriorityGrouping+0x18>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	0a1b      	lsrs	r3, r3, #8
 8002c32:	f003 0307 	and.w	r3, r3, #7
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000ed00 	.word	0xe000ed00

08002c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	db0b      	blt.n	8002c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c56:	79fb      	ldrb	r3, [r7, #7]
 8002c58:	f003 021f 	and.w	r2, r3, #31
 8002c5c:	4907      	ldr	r1, [pc, #28]	; (8002c7c <__NVIC_EnableIRQ+0x38>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	2001      	movs	r0, #1
 8002c66:	fa00 f202 	lsl.w	r2, r0, r2
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000e100 	.word	0xe000e100

08002c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	6039      	str	r1, [r7, #0]
 8002c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	db0a      	blt.n	8002caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	b2da      	uxtb	r2, r3
 8002c98:	490c      	ldr	r1, [pc, #48]	; (8002ccc <__NVIC_SetPriority+0x4c>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	0112      	lsls	r2, r2, #4
 8002ca0:	b2d2      	uxtb	r2, r2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca8:	e00a      	b.n	8002cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4908      	ldr	r1, [pc, #32]	; (8002cd0 <__NVIC_SetPriority+0x50>)
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	0112      	lsls	r2, r2, #4
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	761a      	strb	r2, [r3, #24]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000e100 	.word	0xe000e100
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f1c3 0307 	rsb	r3, r3, #7
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	bf28      	it	cs
 8002cf2:	2304      	movcs	r3, #4
 8002cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d902      	bls.n	8002d04 <NVIC_EncodePriority+0x30>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	3b03      	subs	r3, #3
 8002d02:	e000      	b.n	8002d06 <NVIC_EncodePriority+0x32>
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	401a      	ands	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	43d9      	mvns	r1, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d2c:	4313      	orrs	r3, r2
         );
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7ff ff4c 	bl	8002be0 <__NVIC_SetPriorityGrouping>
}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
 8002d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d62:	f7ff ff61 	bl	8002c28 <__NVIC_GetPriorityGrouping>
 8002d66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	6978      	ldr	r0, [r7, #20]
 8002d6e:	f7ff ffb1 	bl	8002cd4 <NVIC_EncodePriority>
 8002d72:	4602      	mov	r2, r0
 8002d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d78:	4611      	mov	r1, r2
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff ff80 	bl	8002c80 <__NVIC_SetPriority>
}
 8002d80:	bf00      	nop
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff ff54 	bl	8002c44 <__NVIC_EnableIRQ>
}
 8002d9c:	bf00      	nop
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	e16b      	b.n	8003098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	f040 815a 	bne.w	8003092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d130      	bne.n	8002e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d017      	beq.n	8002e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d123      	bne.n	8002ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0203 	and.w	r2, r3, #3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80b4 	beq.w	8003092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b60      	ldr	r3, [pc, #384]	; (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a5f      	ldr	r2, [pc, #380]	; (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	; (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f46:	4a5b      	ldr	r2, [pc, #364]	; (80030b4 <HAL_GPIO_Init+0x310>)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	; (80030b8 <HAL_GPIO_Init+0x314>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02b      	beq.n	8002fca <HAL_GPIO_Init+0x226>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a51      	ldr	r2, [pc, #324]	; (80030bc <HAL_GPIO_Init+0x318>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d025      	beq.n	8002fc6 <HAL_GPIO_Init+0x222>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a50      	ldr	r2, [pc, #320]	; (80030c0 <HAL_GPIO_Init+0x31c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01f      	beq.n	8002fc2 <HAL_GPIO_Init+0x21e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4f      	ldr	r2, [pc, #316]	; (80030c4 <HAL_GPIO_Init+0x320>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d019      	beq.n	8002fbe <HAL_GPIO_Init+0x21a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4e      	ldr	r2, [pc, #312]	; (80030c8 <HAL_GPIO_Init+0x324>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_GPIO_Init+0x216>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4d      	ldr	r2, [pc, #308]	; (80030cc <HAL_GPIO_Init+0x328>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00d      	beq.n	8002fb6 <HAL_GPIO_Init+0x212>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	; (80030d0 <HAL_GPIO_Init+0x32c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <HAL_GPIO_Init+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	; (80030d4 <HAL_GPIO_Init+0x330>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_GPIO_Init+0x20a>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e00e      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	e00c      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fb2:	2306      	movs	r3, #6
 8002fb4:	e00a      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	e008      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fba:	2304      	movs	r3, #4
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e004      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	f002 0203 	and.w	r2, r2, #3
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	4093      	lsls	r3, r2
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fdc:	4935      	ldr	r1, [pc, #212]	; (80030b4 <HAL_GPIO_Init+0x310>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300e:	4a32      	ldr	r2, [pc, #200]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003038:	4a27      	ldr	r2, [pc, #156]	; (80030d8 <HAL_GPIO_Init+0x334>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003062:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_GPIO_Init+0x334>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <HAL_GPIO_Init+0x334>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800308c:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <HAL_GPIO_Init+0x334>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3301      	adds	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	f67f ae90 	bls.w	8002dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3724      	adds	r7, #36	; 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40013800 	.word	0x40013800
 80030b8:	40020000 	.word	0x40020000
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40021400 	.word	0x40021400
 80030d0:	40021800 	.word	0x40021800
 80030d4:	40021c00 	.word	0x40021c00
 80030d8:	40013c00 	.word	0x40013c00

080030dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
 80030e8:	4613      	mov	r3, r2
 80030ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ec:	787b      	ldrb	r3, [r7, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f8:	e003      	b.n	8003102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	041a      	lsls	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	619a      	str	r2, [r3, #24]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800310e:	b480      	push	{r7}
 8003110:	b085      	sub	sp, #20
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	460b      	mov	r3, r1
 8003118:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003120:	887a      	ldrh	r2, [r7, #2]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4013      	ands	r3, r2
 8003126:	041a      	lsls	r2, r3, #16
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43d9      	mvns	r1, r3
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	400b      	ands	r3, r1
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
}
 8003136:	bf00      	nop
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e12b      	b.n	80033ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd ff3e 	bl	8000fec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2224      	movs	r2, #36	; 0x24
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003196:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031a8:	f000 fd40 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 80031ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	4a81      	ldr	r2, [pc, #516]	; (80033b8 <HAL_I2C_Init+0x274>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d807      	bhi.n	80031c8 <HAL_I2C_Init+0x84>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4a80      	ldr	r2, [pc, #512]	; (80033bc <HAL_I2C_Init+0x278>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	bf94      	ite	ls
 80031c0:	2301      	movls	r3, #1
 80031c2:	2300      	movhi	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e006      	b.n	80031d6 <HAL_I2C_Init+0x92>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a7d      	ldr	r2, [pc, #500]	; (80033c0 <HAL_I2C_Init+0x27c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	bf94      	ite	ls
 80031d0:	2301      	movls	r3, #1
 80031d2:	2300      	movhi	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e0e7      	b.n	80033ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4a78      	ldr	r2, [pc, #480]	; (80033c4 <HAL_I2C_Init+0x280>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0c9b      	lsrs	r3, r3, #18
 80031e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	4a6a      	ldr	r2, [pc, #424]	; (80033b8 <HAL_I2C_Init+0x274>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d802      	bhi.n	8003218 <HAL_I2C_Init+0xd4>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	3301      	adds	r3, #1
 8003216:	e009      	b.n	800322c <HAL_I2C_Init+0xe8>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	4a69      	ldr	r2, [pc, #420]	; (80033c8 <HAL_I2C_Init+0x284>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	099b      	lsrs	r3, r3, #6
 800322a:	3301      	adds	r3, #1
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6812      	ldr	r2, [r2, #0]
 8003230:	430b      	orrs	r3, r1
 8003232:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800323e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	495c      	ldr	r1, [pc, #368]	; (80033b8 <HAL_I2C_Init+0x274>)
 8003248:	428b      	cmp	r3, r1
 800324a:	d819      	bhi.n	8003280 <HAL_I2C_Init+0x13c>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1e59      	subs	r1, r3, #1
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	fbb1 f3f3 	udiv	r3, r1, r3
 800325a:	1c59      	adds	r1, r3, #1
 800325c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003260:	400b      	ands	r3, r1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_I2C_Init+0x138>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1e59      	subs	r1, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fbb1 f3f3 	udiv	r3, r1, r3
 8003274:	3301      	adds	r3, #1
 8003276:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800327a:	e051      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 800327c:	2304      	movs	r3, #4
 800327e:	e04f      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d111      	bne.n	80032ac <HAL_I2C_Init+0x168>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	1e58      	subs	r0, r3, #1
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	460b      	mov	r3, r1
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	440b      	add	r3, r1
 8003296:	fbb0 f3f3 	udiv	r3, r0, r3
 800329a:	3301      	adds	r3, #1
 800329c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e012      	b.n	80032d2 <HAL_I2C_Init+0x18e>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	1e58      	subs	r0, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6859      	ldr	r1, [r3, #4]
 80032b4:	460b      	mov	r3, r1
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	0099      	lsls	r1, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_I2C_Init+0x196>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e022      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10e      	bne.n	8003300 <HAL_I2C_Init+0x1bc>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1e58      	subs	r0, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	460b      	mov	r3, r1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	440b      	add	r3, r1
 80032f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fe:	e00f      	b.n	8003320 <HAL_I2C_Init+0x1dc>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e58      	subs	r0, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	0099      	lsls	r1, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	fbb0 f3f3 	udiv	r3, r0, r3
 8003316:	3301      	adds	r3, #1
 8003318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	6809      	ldr	r1, [r1, #0]
 8003324:	4313      	orrs	r3, r2
 8003326:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69da      	ldr	r2, [r3, #28]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	430a      	orrs	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800334e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	6911      	ldr	r1, [r2, #16]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68d2      	ldr	r2, [r2, #12]
 800335a:	4311      	orrs	r1, r2
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	431a      	orrs	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0201 	orr.w	r2, r2, #1
 800338e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	000186a0 	.word	0x000186a0
 80033bc:	001e847f 	.word	0x001e847f
 80033c0:	003d08ff 	.word	0x003d08ff
 80033c4:	431bde83 	.word	0x431bde83
 80033c8:	10624dd3 	.word	0x10624dd3

080033cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e267      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d075      	beq.n	80034d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ea:	4b88      	ldr	r3, [pc, #544]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d00c      	beq.n	8003410 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f6:	4b85      	ldr	r3, [pc, #532]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d112      	bne.n	8003428 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003402:	4b82      	ldr	r3, [pc, #520]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800340e:	d10b      	bne.n	8003428 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	4b7e      	ldr	r3, [pc, #504]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d05b      	beq.n	80034d4 <HAL_RCC_OscConfig+0x108>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d157      	bne.n	80034d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e242      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d106      	bne.n	8003440 <HAL_RCC_OscConfig+0x74>
 8003432:	4b76      	ldr	r3, [pc, #472]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a75      	ldr	r2, [pc, #468]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e01d      	b.n	800347c <HAL_RCC_OscConfig+0xb0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x98>
 800344a:	4b70      	ldr	r3, [pc, #448]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a6f      	ldr	r2, [pc, #444]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b6d      	ldr	r3, [pc, #436]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a6c      	ldr	r2, [pc, #432]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800345c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e00b      	b.n	800347c <HAL_RCC_OscConfig+0xb0>
 8003464:	4b69      	ldr	r3, [pc, #420]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a68      	ldr	r2, [pc, #416]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800346a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800346e:	6013      	str	r3, [r2, #0]
 8003470:	4b66      	ldr	r3, [pc, #408]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a65      	ldr	r2, [pc, #404]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d013      	beq.n	80034ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fd3e 	bl	8001f04 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800348c:	f7fe fd3a 	bl	8001f04 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e207      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349e:	4b5b      	ldr	r3, [pc, #364]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f0      	beq.n	800348c <HAL_RCC_OscConfig+0xc0>
 80034aa:	e014      	b.n	80034d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fd2a 	bl	8001f04 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fd26 	bl	8001f04 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	; 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1f3      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c6:	4b51      	ldr	r3, [pc, #324]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0xe8>
 80034d2:	e000      	b.n	80034d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d063      	beq.n	80035aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e2:	4b4a      	ldr	r3, [pc, #296]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ee:	4b47      	ldr	r3, [pc, #284]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d11c      	bne.n	8003534 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fa:	4b44      	ldr	r3, [pc, #272]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d116      	bne.n	8003534 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003506:	4b41      	ldr	r3, [pc, #260]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <HAL_RCC_OscConfig+0x152>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d001      	beq.n	800351e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e1c7      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351e:	4b3b      	ldr	r3, [pc, #236]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4937      	ldr	r1, [pc, #220]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800352e:	4313      	orrs	r3, r2
 8003530:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	e03a      	b.n	80035aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353c:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_RCC_OscConfig+0x244>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fcdf 	bl	8001f04 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe fcdb 	bl	8001f04 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e1a8      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800355c:	4b2b      	ldr	r3, [pc, #172]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003568:	4b28      	ldr	r3, [pc, #160]	; (800360c <HAL_RCC_OscConfig+0x240>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4925      	ldr	r1, [pc, #148]	; (800360c <HAL_RCC_OscConfig+0x240>)
 8003578:	4313      	orrs	r3, r2
 800357a:	600b      	str	r3, [r1, #0]
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800357e:	4b24      	ldr	r3, [pc, #144]	; (8003610 <HAL_RCC_OscConfig+0x244>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe fcbe 	bl	8001f04 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800358c:	f7fe fcba 	bl	8001f04 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e187      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	4b1b      	ldr	r3, [pc, #108]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d036      	beq.n	8003624 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_RCC_OscConfig+0x248>)
 80035c0:	2201      	movs	r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c4:	f7fe fc9e 	bl	8001f04 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fe fc9a 	bl	8001f04 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e167      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <HAL_RCC_OscConfig+0x240>)
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x200>
 80035ea:	e01b      	b.n	8003624 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035ec:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RCC_OscConfig+0x248>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f2:	f7fe fc87 	bl	8001f04 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	e00e      	b.n	8003618 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe fc83 	bl	8001f04 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d907      	bls.n	8003618 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e150      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
 800360c:	40023800 	.word	0x40023800
 8003610:	42470000 	.word	0x42470000
 8003614:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x470>)
 800361a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ea      	bne.n	80035fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8097 	beq.w	8003760 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003636:	4b81      	ldr	r3, [pc, #516]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10f      	bne.n	8003662 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	4b7d      	ldr	r3, [pc, #500]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364a:	4a7c      	ldr	r2, [pc, #496]	; (800383c <HAL_RCC_OscConfig+0x470>)
 800364c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003650:	6413      	str	r3, [r2, #64]	; 0x40
 8003652:	4b7a      	ldr	r3, [pc, #488]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	60bb      	str	r3, [r7, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800365e:	2301      	movs	r3, #1
 8003660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003662:	4b77      	ldr	r3, [pc, #476]	; (8003840 <HAL_RCC_OscConfig+0x474>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d118      	bne.n	80036a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800366e:	4b74      	ldr	r3, [pc, #464]	; (8003840 <HAL_RCC_OscConfig+0x474>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a73      	ldr	r2, [pc, #460]	; (8003840 <HAL_RCC_OscConfig+0x474>)
 8003674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367a:	f7fe fc43 	bl	8001f04 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003682:	f7fe fc3f 	bl	8001f04 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e10c      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	4b6a      	ldr	r3, [pc, #424]	; (8003840 <HAL_RCC_OscConfig+0x474>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HAL_RCC_OscConfig+0x2ea>
 80036a8:	4b64      	ldr	r3, [pc, #400]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	4a63      	ldr	r2, [pc, #396]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	6713      	str	r3, [r2, #112]	; 0x70
 80036b4:	e01c      	b.n	80036f0 <HAL_RCC_OscConfig+0x324>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b05      	cmp	r3, #5
 80036bc:	d10c      	bne.n	80036d8 <HAL_RCC_OscConfig+0x30c>
 80036be:	4b5f      	ldr	r3, [pc, #380]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	4a5e      	ldr	r2, [pc, #376]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036c4:	f043 0304 	orr.w	r3, r3, #4
 80036c8:	6713      	str	r3, [r2, #112]	; 0x70
 80036ca:	4b5c      	ldr	r3, [pc, #368]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ce:	4a5b      	ldr	r2, [pc, #364]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6713      	str	r3, [r2, #112]	; 0x70
 80036d6:	e00b      	b.n	80036f0 <HAL_RCC_OscConfig+0x324>
 80036d8:	4b58      	ldr	r3, [pc, #352]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	4a57      	ldr	r2, [pc, #348]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	6713      	str	r3, [r2, #112]	; 0x70
 80036e4:	4b55      	ldr	r3, [pc, #340]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e8:	4a54      	ldr	r2, [pc, #336]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80036ea:	f023 0304 	bic.w	r3, r3, #4
 80036ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d015      	beq.n	8003724 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fe fc04 	bl	8001f04 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe fc00 	bl	8001f04 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0cb      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0ee      	beq.n	8003700 <HAL_RCC_OscConfig+0x334>
 8003722:	e014      	b.n	800374e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003724:	f7fe fbee 	bl	8001f04 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372a:	e00a      	b.n	8003742 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372c:	f7fe fbea 	bl	8001f04 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	f241 3288 	movw	r2, #5000	; 0x1388
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e0b5      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003742:	4b3e      	ldr	r3, [pc, #248]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ee      	bne.n	800372c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	4a38      	ldr	r2, [pc, #224]	; (800383c <HAL_RCC_OscConfig+0x470>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 80a1 	beq.w	80038ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376a:	4b34      	ldr	r3, [pc, #208]	; (800383c <HAL_RCC_OscConfig+0x470>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f003 030c 	and.w	r3, r3, #12
 8003772:	2b08      	cmp	r3, #8
 8003774:	d05c      	beq.n	8003830 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	2b02      	cmp	r3, #2
 800377c:	d141      	bne.n	8003802 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <HAL_RCC_OscConfig+0x478>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003784:	f7fe fbbe 	bl	8001f04 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800378c:	f7fe fbba 	bl	8001f04 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e087      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379e:	4b27      	ldr	r3, [pc, #156]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69da      	ldr	r2, [r3, #28]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	431a      	orrs	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	019b      	lsls	r3, r3, #6
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c0:	085b      	lsrs	r3, r3, #1
 80037c2:	3b01      	subs	r3, #1
 80037c4:	041b      	lsls	r3, r3, #16
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	061b      	lsls	r3, r3, #24
 80037ce:	491b      	ldr	r1, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d4:	4b1b      	ldr	r3, [pc, #108]	; (8003844 <HAL_RCC_OscConfig+0x478>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037da:	f7fe fb93 	bl	8001f04 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e2:	f7fe fb8f 	bl	8001f04 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e05c      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f4:	4b11      	ldr	r3, [pc, #68]	; (800383c <HAL_RCC_OscConfig+0x470>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x416>
 8003800:	e054      	b.n	80038ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b10      	ldr	r3, [pc, #64]	; (8003844 <HAL_RCC_OscConfig+0x478>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe fb7c 	bl	8001f04 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe fb78 	bl	8001f04 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e045      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <HAL_RCC_OscConfig+0x470>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x444>
 800382e:	e03d      	b.n	80038ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d107      	bne.n	8003848 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e038      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
 800383c:	40023800 	.word	0x40023800
 8003840:	40007000 	.word	0x40007000
 8003844:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003848:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCC_OscConfig+0x4ec>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d028      	beq.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003860:	429a      	cmp	r2, r3
 8003862:	d121      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d11a      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003878:	4013      	ands	r3, r2
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800387e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003880:	4293      	cmp	r3, r2
 8003882:	d111      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	3b01      	subs	r3, #1
 8003892:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d107      	bne.n	80038a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d001      	beq.n	80038ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800

080038bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e0cc      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d0:	4b68      	ldr	r3, [pc, #416]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0307 	and.w	r3, r3, #7
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d90c      	bls.n	80038f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038de:	4b65      	ldr	r3, [pc, #404]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e6:	4b63      	ldr	r3, [pc, #396]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0307 	and.w	r3, r3, #7
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0b8      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003910:	4b59      	ldr	r3, [pc, #356]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800391a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0308 	and.w	r3, r3, #8
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003928:	4b53      	ldr	r3, [pc, #332]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	4a52      	ldr	r2, [pc, #328]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b50      	ldr	r3, [pc, #320]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	494d      	ldr	r1, [pc, #308]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d044      	beq.n	80039dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395a:	4b47      	ldr	r3, [pc, #284]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d119      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e07f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d003      	beq.n	800397a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003976:	2b03      	cmp	r3, #3
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397a:	4b3f      	ldr	r3, [pc, #252]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e06f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398a:	4b3b      	ldr	r3, [pc, #236]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e067      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399a:	4b37      	ldr	r3, [pc, #220]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f023 0203 	bic.w	r2, r3, #3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	4934      	ldr	r1, [pc, #208]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039ac:	f7fe faaa 	bl	8001f04 <HAL_GetTick>
 80039b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b2:	e00a      	b.n	80039ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b4:	f7fe faa6 	bl	8001f04 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e04f      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	4b2b      	ldr	r3, [pc, #172]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f003 020c 	and.w	r2, r3, #12
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	429a      	cmp	r2, r3
 80039da:	d1eb      	bne.n	80039b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039dc:	4b25      	ldr	r3, [pc, #148]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d20c      	bcs.n	8003a04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b22      	ldr	r3, [pc, #136]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_RCC_ClockConfig+0x1b8>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0307 	and.w	r3, r3, #7
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d001      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e032      	b.n	8003a6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a10:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	4916      	ldr	r1, [pc, #88]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a2e:	4b12      	ldr	r3, [pc, #72]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	490e      	ldr	r1, [pc, #56]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a42:	f000 f821 	bl	8003a88 <HAL_RCC_GetSysClockFreq>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	490a      	ldr	r1, [pc, #40]	; (8003a7c <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	5ccb      	ldrb	r3, [r1, r3]
 8003a56:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fd feb0 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40023c00 	.word	0x40023c00
 8003a78:	40023800 	.word	0x40023800
 8003a7c:	08006968 	.word	0x08006968
 8003a80:	20000000 	.word	0x20000000
 8003a84:	20000004 	.word	0x20000004

08003a88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a8c:	b090      	sub	sp, #64	; 0x40
 8003a8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	637b      	str	r3, [r7, #52]	; 0x34
 8003a94:	2300      	movs	r3, #0
 8003a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a98:	2300      	movs	r3, #0
 8003a9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa0:	4b59      	ldr	r3, [pc, #356]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d00d      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x40>
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	f200 80a1 	bhi.w	8003bf4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0x34>
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d003      	beq.n	8003ac2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aba:	e09b      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003abc:	4b53      	ldr	r3, [pc, #332]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003abe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ac0:	e09b      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac2:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ac6:	e098      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac8:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad2:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d028      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ade:	4b4a      	ldr	r3, [pc, #296]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	099b      	lsrs	r3, r3, #6
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003af0:	2100      	movs	r1, #0
 8003af2:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af4:	fb03 f201 	mul.w	r2, r3, r1
 8003af8:	2300      	movs	r3, #0
 8003afa:	fb00 f303 	mul.w	r3, r0, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	4a43      	ldr	r2, [pc, #268]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b02:	fba0 1202 	umull	r1, r2, r0, r2
 8003b06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b08:	460a      	mov	r2, r1
 8003b0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b0e:	4413      	add	r3, r2
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b14:	2200      	movs	r2, #0
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	61fa      	str	r2, [r7, #28]
 8003b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b22:	f7fc fe0f 	bl	8000744 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b2e:	e053      	b.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b30:	4b35      	ldr	r3, [pc, #212]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	099b      	lsrs	r3, r3, #6
 8003b36:	2200      	movs	r2, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	617a      	str	r2, [r7, #20]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b42:	f04f 0b00 	mov.w	fp, #0
 8003b46:	4652      	mov	r2, sl
 8003b48:	465b      	mov	r3, fp
 8003b4a:	f04f 0000 	mov.w	r0, #0
 8003b4e:	f04f 0100 	mov.w	r1, #0
 8003b52:	0159      	lsls	r1, r3, #5
 8003b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b58:	0150      	lsls	r0, r2, #5
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b62:	eb63 090b 	sbc.w	r9, r3, fp
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b7a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b7e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	00eb      	lsls	r3, r5, #3
 8003b8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b90:	00e2      	lsls	r2, r4, #3
 8003b92:	4614      	mov	r4, r2
 8003b94:	461d      	mov	r5, r3
 8003b96:	eb14 030a 	adds.w	r3, r4, sl
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	eb45 030b 	adc.w	r3, r5, fp
 8003ba0:	607b      	str	r3, [r7, #4]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	028b      	lsls	r3, r1, #10
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bb8:	4621      	mov	r1, r4
 8003bba:	028a      	lsls	r2, r1, #10
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	60bb      	str	r3, [r7, #8]
 8003bc6:	60fa      	str	r2, [r7, #12]
 8003bc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bcc:	f7fc fdba 	bl	8000744 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	0c1b      	lsrs	r3, r3, #16
 8003bde:	f003 0303 	and.w	r3, r3, #3
 8003be2:	3301      	adds	r3, #1
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bf2:	e002      	b.n	8003bfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x184>)
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3740      	adds	r7, #64	; 0x40
 8003c00:	46bd      	mov	sp, r7
 8003c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	00f42400 	.word	0x00f42400
 8003c10:	017d7840 	.word	0x017d7840

08003c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c18:	4b03      	ldr	r3, [pc, #12]	; (8003c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000000 	.word	0x20000000

08003c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c30:	f7ff fff0 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c34:	4602      	mov	r2, r0
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	0a9b      	lsrs	r3, r3, #10
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	4903      	ldr	r1, [pc, #12]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c42:	5ccb      	ldrb	r3, [r1, r3]
 8003c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08006978 	.word	0x08006978

08003c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c58:	f7ff ffdc 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0b5b      	lsrs	r3, r3, #13
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	08006978 	.word	0x08006978

08003c7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	220f      	movs	r2, #15
 8003c8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0203 	and.w	r2, r3, #3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c98:	4b0f      	ldr	r3, [pc, #60]	; (8003cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003cb0:	4b09      	ldr	r3, [pc, #36]	; (8003cd8 <HAL_RCC_GetClockConfig+0x5c>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	08db      	lsrs	r3, r3, #3
 8003cb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_RCC_GetClockConfig+0x60>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0207 	and.w	r2, r3, #7
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	601a      	str	r2, [r3, #0]
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40023c00 	.word	0x40023c00

08003ce0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e07b      	b.n	8003dea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d108      	bne.n	8003d0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d02:	d009      	beq.n	8003d18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	61da      	str	r2, [r3, #28]
 8003d0a:	e005      	b.n	8003d18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fd fcd4 	bl	80016e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	431a      	orrs	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69db      	ldr	r3, [r3, #28]
 8003d8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9c:	ea42 0103 	orr.w	r1, r2, r3
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	0c1b      	lsrs	r3, r3, #16
 8003db6:	f003 0104 	and.w	r1, r3, #4
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f003 0210 	and.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69da      	ldr	r2, [r3, #28]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b082      	sub	sp, #8
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e041      	b.n	8003e88 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7fd fee3 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2202      	movs	r2, #2
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 fc6f 	bl	8004714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d001      	beq.n	8003ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e04e      	b.n	8003f46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68da      	ldr	r2, [r3, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a23      	ldr	r2, [pc, #140]	; (8003f54 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d022      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed2:	d01d      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1f      	ldr	r2, [pc, #124]	; (8003f58 <HAL_TIM_Base_Start_IT+0xc8>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d018      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d013      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00e      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1b      	ldr	r2, [pc, #108]	; (8003f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d009      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a19      	ldr	r2, [pc, #100]	; (8003f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x80>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a18      	ldr	r2, [pc, #96]	; (8003f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d111      	bne.n	8003f34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b06      	cmp	r3, #6
 8003f20:	d010      	beq.n	8003f44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0201 	orr.w	r2, r2, #1
 8003f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f32:	e007      	b.n	8003f44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000
 8003f58:	40000400 	.word	0x40000400
 8003f5c:	40000800 	.word	0x40000800
 8003f60:	40000c00 	.word	0x40000c00
 8003f64:	40010400 	.word	0x40010400
 8003f68:	40014000 	.word	0x40014000
 8003f6c:	40001800 	.word	0x40001800

08003f70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e041      	b.n	8004006 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fd fe86 	bl	8001ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 fbb0 	bl	8004714 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_TIM_PWM_Start+0x24>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b01      	cmp	r3, #1
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e022      	b.n	800407a <HAL_TIM_PWM_Start+0x6a>
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b04      	cmp	r3, #4
 8004038:	d109      	bne.n	800404e <HAL_TIM_PWM_Start+0x3e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b01      	cmp	r3, #1
 8004044:	bf14      	ite	ne
 8004046:	2301      	movne	r3, #1
 8004048:	2300      	moveq	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	e015      	b.n	800407a <HAL_TIM_PWM_Start+0x6a>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b08      	cmp	r3, #8
 8004052:	d109      	bne.n	8004068 <HAL_TIM_PWM_Start+0x58>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	bf14      	ite	ne
 8004060:	2301      	movne	r3, #1
 8004062:	2300      	moveq	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e008      	b.n	800407a <HAL_TIM_PWM_Start+0x6a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	bf14      	ite	ne
 8004074:	2301      	movne	r3, #1
 8004076:	2300      	moveq	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e07c      	b.n	800417c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <HAL_TIM_PWM_Start+0x82>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2202      	movs	r2, #2
 800408c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004090:	e013      	b.n	80040ba <HAL_TIM_PWM_Start+0xaa>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b04      	cmp	r3, #4
 8004096:	d104      	bne.n	80040a2 <HAL_TIM_PWM_Start+0x92>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040a0:	e00b      	b.n	80040ba <HAL_TIM_PWM_Start+0xaa>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d104      	bne.n	80040b2 <HAL_TIM_PWM_Start+0xa2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040b0:	e003      	b.n	80040ba <HAL_TIM_PWM_Start+0xaa>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2201      	movs	r2, #1
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fe10 	bl	8004ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a2d      	ldr	r2, [pc, #180]	; (8004184 <HAL_TIM_PWM_Start+0x174>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d004      	beq.n	80040dc <HAL_TIM_PWM_Start+0xcc>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a2c      	ldr	r2, [pc, #176]	; (8004188 <HAL_TIM_PWM_Start+0x178>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d101      	bne.n	80040e0 <HAL_TIM_PWM_Start+0xd0>
 80040dc:	2301      	movs	r3, #1
 80040de:	e000      	b.n	80040e2 <HAL_TIM_PWM_Start+0xd2>
 80040e0:	2300      	movs	r3, #0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a22      	ldr	r2, [pc, #136]	; (8004184 <HAL_TIM_PWM_Start+0x174>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_TIM_PWM_Start+0x136>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004108:	d01d      	beq.n	8004146 <HAL_TIM_PWM_Start+0x136>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1f      	ldr	r2, [pc, #124]	; (800418c <HAL_TIM_PWM_Start+0x17c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_TIM_PWM_Start+0x136>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1d      	ldr	r2, [pc, #116]	; (8004190 <HAL_TIM_PWM_Start+0x180>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_TIM_PWM_Start+0x136>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1c      	ldr	r2, [pc, #112]	; (8004194 <HAL_TIM_PWM_Start+0x184>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_TIM_PWM_Start+0x136>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a16      	ldr	r2, [pc, #88]	; (8004188 <HAL_TIM_PWM_Start+0x178>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_TIM_PWM_Start+0x136>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_TIM_PWM_Start+0x188>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_TIM_PWM_Start+0x136>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a16      	ldr	r2, [pc, #88]	; (800419c <HAL_TIM_PWM_Start+0x18c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d111      	bne.n	800416a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b06      	cmp	r3, #6
 8004156:	d010      	beq.n	800417a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0201 	orr.w	r2, r2, #1
 8004166:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004168:	e007      	b.n	800417a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0201 	orr.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40010000 	.word	0x40010000
 8004188:	40010400 	.word	0x40010400
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	40000c00 	.word	0x40000c00
 8004198:	40014000 	.word	0x40014000
 800419c:	40001800 	.word	0x40001800

080041a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d122      	bne.n	80041fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0202 	mvn.w	r2, #2
 80041cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa77 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa69 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fa7a 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b04      	cmp	r3, #4
 8004208:	d122      	bne.n	8004250 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b04      	cmp	r3, #4
 8004216:	d11b      	bne.n	8004250 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0204 	mvn.w	r2, #4
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa4d 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fa3f 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fa50 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b08      	cmp	r3, #8
 800425c:	d122      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d11b      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0208 	mvn.w	r2, #8
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2204      	movs	r2, #4
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fa23 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fa15 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fa26 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0310 	and.w	r3, r3, #16
 80042ae:	2b10      	cmp	r3, #16
 80042b0:	d122      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b10      	cmp	r3, #16
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0210 	mvn.w	r2, #16
 80042c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2208      	movs	r2, #8
 80042ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f9f9 	bl	80046d6 <HAL_TIM_IC_CaptureCallback>
 80042e4:	e005      	b.n	80042f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f9eb 	bl	80046c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f9fc 	bl	80046ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d10e      	bne.n	8004324 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b01      	cmp	r3, #1
 8004312:	d107      	bne.n	8004324 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f06f 0201 	mvn.w	r2, #1
 800431c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fd f84a 	bl	80013b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432e:	2b80      	cmp	r3, #128	; 0x80
 8004330:	d10e      	bne.n	8004350 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433c:	2b80      	cmp	r3, #128	; 0x80
 800433e:	d107      	bne.n	8004350 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fd78 	bl	8004e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	d10e      	bne.n	800437c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d107      	bne.n	800437c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f9c1 	bl	80046fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0320 	and.w	r3, r3, #32
 8004386:	2b20      	cmp	r3, #32
 8004388:	d10e      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b20      	cmp	r3, #32
 8004396:	d107      	bne.n	80043a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f06f 0220 	mvn.w	r2, #32
 80043a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 fd42 	bl	8004e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a8:	bf00      	nop
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ca:	2302      	movs	r3, #2
 80043cc:	e0ae      	b.n	800452c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b0c      	cmp	r3, #12
 80043da:	f200 809f 	bhi.w	800451c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043de:	a201      	add	r2, pc, #4	; (adr r2, 80043e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e4:	08004419 	.word	0x08004419
 80043e8:	0800451d 	.word	0x0800451d
 80043ec:	0800451d 	.word	0x0800451d
 80043f0:	0800451d 	.word	0x0800451d
 80043f4:	08004459 	.word	0x08004459
 80043f8:	0800451d 	.word	0x0800451d
 80043fc:	0800451d 	.word	0x0800451d
 8004400:	0800451d 	.word	0x0800451d
 8004404:	0800449b 	.word	0x0800449b
 8004408:	0800451d 	.word	0x0800451d
 800440c:	0800451d 	.word	0x0800451d
 8004410:	0800451d 	.word	0x0800451d
 8004414:	080044db 	.word	0x080044db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fa18 	bl	8004854 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0208 	orr.w	r2, r2, #8
 8004432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0204 	bic.w	r2, r2, #4
 8004442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6999      	ldr	r1, [r3, #24]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691a      	ldr	r2, [r3, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	619a      	str	r2, [r3, #24]
      break;
 8004456:	e064      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fa68 	bl	8004934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6999      	ldr	r1, [r3, #24]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	021a      	lsls	r2, r3, #8
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	619a      	str	r2, [r3, #24]
      break;
 8004498:	e043      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fabd 	bl	8004a20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 0208 	orr.w	r2, r2, #8
 80044b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 0204 	bic.w	r2, r2, #4
 80044c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69d9      	ldr	r1, [r3, #28]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	61da      	str	r2, [r3, #28]
      break;
 80044d8:	e023      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68b9      	ldr	r1, [r7, #8]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 fb11 	bl	8004b08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	69d9      	ldr	r1, [r3, #28]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	021a      	lsls	r2, r3, #8
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	61da      	str	r2, [r3, #28]
      break;
 800451a:	e002      	b.n	8004522 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	75fb      	strb	r3, [r7, #23]
      break;
 8004520:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800452a:	7dfb      	ldrb	r3, [r7, #23]
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_TIM_ConfigClockSource+0x1c>
 800454c:	2302      	movs	r3, #2
 800454e:	e0b4      	b.n	80046ba <HAL_TIM_ConfigClockSource+0x186>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800456e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004588:	d03e      	beq.n	8004608 <HAL_TIM_ConfigClockSource+0xd4>
 800458a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458e:	f200 8087 	bhi.w	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 8004592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004596:	f000 8086 	beq.w	80046a6 <HAL_TIM_ConfigClockSource+0x172>
 800459a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459e:	d87f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b70      	cmp	r3, #112	; 0x70
 80045a2:	d01a      	beq.n	80045da <HAL_TIM_ConfigClockSource+0xa6>
 80045a4:	2b70      	cmp	r3, #112	; 0x70
 80045a6:	d87b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b60      	cmp	r3, #96	; 0x60
 80045aa:	d050      	beq.n	800464e <HAL_TIM_ConfigClockSource+0x11a>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d877      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b50      	cmp	r3, #80	; 0x50
 80045b2:	d03c      	beq.n	800462e <HAL_TIM_ConfigClockSource+0xfa>
 80045b4:	2b50      	cmp	r3, #80	; 0x50
 80045b6:	d873      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d058      	beq.n	800466e <HAL_TIM_ConfigClockSource+0x13a>
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d86f      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b30      	cmp	r3, #48	; 0x30
 80045c2:	d064      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d86b      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d060      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d867      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d05c      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d05a      	beq.n	800468e <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	e062      	b.n	80046a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	6899      	ldr	r1, [r3, #8]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	f000 fb5d 	bl	8004ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68ba      	ldr	r2, [r7, #8]
 8004604:	609a      	str	r2, [r3, #8]
      break;
 8004606:	e04f      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6899      	ldr	r1, [r3, #8]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f000 fb46 	bl	8004ca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689a      	ldr	r2, [r3, #8]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462a:	609a      	str	r2, [r3, #8]
      break;
 800462c:	e03c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	6859      	ldr	r1, [r3, #4]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	461a      	mov	r2, r3
 800463c:	f000 faba 	bl	8004bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2150      	movs	r1, #80	; 0x50
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fb13 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 800464c:	e02c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	6859      	ldr	r1, [r3, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	461a      	mov	r2, r3
 800465c:	f000 fad9 	bl	8004c12 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2160      	movs	r1, #96	; 0x60
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fb03 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 800466c:	e01c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	461a      	mov	r2, r3
 800467c:	f000 fa9a 	bl	8004bb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2140      	movs	r1, #64	; 0x40
 8004686:	4618      	mov	r0, r3
 8004688:	f000 faf3 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 800468c:	e00c      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	4610      	mov	r0, r2
 800469a:	f000 faea 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 800469e:	e003      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	73fb      	strb	r3, [r7, #15]
      break;
 80046a4:	e000      	b.n	80046a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr

080046d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b083      	sub	sp, #12
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a40      	ldr	r2, [pc, #256]	; (8004828 <TIM_Base_SetConfig+0x114>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004732:	d00f      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a3d      	ldr	r2, [pc, #244]	; (800482c <TIM_Base_SetConfig+0x118>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00b      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a3c      	ldr	r2, [pc, #240]	; (8004830 <TIM_Base_SetConfig+0x11c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d007      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a3b      	ldr	r2, [pc, #236]	; (8004834 <TIM_Base_SetConfig+0x120>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d003      	beq.n	8004754 <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <TIM_Base_SetConfig+0x124>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d108      	bne.n	8004766 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2f      	ldr	r2, [pc, #188]	; (8004828 <TIM_Base_SetConfig+0x114>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d02b      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004774:	d027      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2c      	ldr	r2, [pc, #176]	; (800482c <TIM_Base_SetConfig+0x118>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d023      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <TIM_Base_SetConfig+0x11c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01f      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a2a      	ldr	r2, [pc, #168]	; (8004834 <TIM_Base_SetConfig+0x120>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d01b      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a29      	ldr	r2, [pc, #164]	; (8004838 <TIM_Base_SetConfig+0x124>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d017      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a28      	ldr	r2, [pc, #160]	; (800483c <TIM_Base_SetConfig+0x128>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d013      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a27      	ldr	r2, [pc, #156]	; (8004840 <TIM_Base_SetConfig+0x12c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00f      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a26      	ldr	r2, [pc, #152]	; (8004844 <TIM_Base_SetConfig+0x130>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a25      	ldr	r2, [pc, #148]	; (8004848 <TIM_Base_SetConfig+0x134>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a24      	ldr	r2, [pc, #144]	; (800484c <TIM_Base_SetConfig+0x138>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a23      	ldr	r2, [pc, #140]	; (8004850 <TIM_Base_SetConfig+0x13c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d108      	bne.n	80047d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <TIM_Base_SetConfig+0x114>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_Base_SetConfig+0xf8>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a0c      	ldr	r2, [pc, #48]	; (8004838 <TIM_Base_SetConfig+0x124>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d103      	bne.n	8004814 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	615a      	str	r2, [r3, #20]
}
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40010400 	.word	0x40010400
 800483c:	40014000 	.word	0x40014000
 8004840:	40014400 	.word	0x40014400
 8004844:	40014800 	.word	0x40014800
 8004848:	40001800 	.word	0x40001800
 800484c:	40001c00 	.word	0x40001c00
 8004850:	40002000 	.word	0x40002000

08004854 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	f023 0201 	bic.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 0302 	bic.w	r3, r3, #2
 800489c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a20      	ldr	r2, [pc, #128]	; (800492c <TIM_OC1_SetConfig+0xd8>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC1_SetConfig+0x64>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1f      	ldr	r2, [pc, #124]	; (8004930 <TIM_OC1_SetConfig+0xdc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10c      	bne.n	80048d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0308 	bic.w	r3, r3, #8
 80048be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 0304 	bic.w	r3, r3, #4
 80048d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a15      	ldr	r2, [pc, #84]	; (800492c <TIM_OC1_SetConfig+0xd8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d003      	beq.n	80048e2 <TIM_OC1_SetConfig+0x8e>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a14      	ldr	r2, [pc, #80]	; (8004930 <TIM_OC1_SetConfig+0xdc>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d111      	bne.n	8004906 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	621a      	str	r2, [r3, #32]
}
 8004920:	bf00      	nop
 8004922:	371c      	adds	r7, #28
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	40010000 	.word	0x40010000
 8004930:	40010400 	.word	0x40010400

08004934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	f023 0210 	bic.w	r2, r3, #16
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0320 	bic.w	r3, r3, #32
 800497e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a22      	ldr	r2, [pc, #136]	; (8004a18 <TIM_OC2_SetConfig+0xe4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <TIM_OC2_SetConfig+0x68>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a21      	ldr	r2, [pc, #132]	; (8004a1c <TIM_OC2_SetConfig+0xe8>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d10d      	bne.n	80049b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <TIM_OC2_SetConfig+0xe4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_OC2_SetConfig+0x94>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <TIM_OC2_SetConfig+0xe8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d113      	bne.n	80049f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40010400 	.word	0x40010400

08004a20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0303 	bic.w	r3, r3, #3
 8004a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	021b      	lsls	r3, r3, #8
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <TIM_OC3_SetConfig+0xe0>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d003      	beq.n	8004a86 <TIM_OC3_SetConfig+0x66>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <TIM_OC3_SetConfig+0xe4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d10d      	bne.n	8004aa2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	021b      	lsls	r3, r3, #8
 8004a94:	697a      	ldr	r2, [r7, #20]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <TIM_OC3_SetConfig+0xe0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_OC3_SetConfig+0x92>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <TIM_OC3_SetConfig+0xe4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d113      	bne.n	8004ada <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	011b      	lsls	r3, r3, #4
 8004ad4:	693a      	ldr	r2, [r7, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68fa      	ldr	r2, [r7, #12]
 8004ae4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685a      	ldr	r2, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	621a      	str	r2, [r3, #32]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40010400 	.word	0x40010400

08004b08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	021b      	lsls	r3, r3, #8
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a12      	ldr	r2, [pc, #72]	; (8004bac <TIM_OC4_SetConfig+0xa4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d003      	beq.n	8004b70 <TIM_OC4_SetConfig+0x68>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a11      	ldr	r2, [pc, #68]	; (8004bb0 <TIM_OC4_SetConfig+0xa8>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d109      	bne.n	8004b84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40010400 	.word	0x40010400

08004bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	f023 0201 	bic.w	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	f023 030a 	bic.w	r3, r3, #10
 8004bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	621a      	str	r2, [r3, #32]
}
 8004c06:	bf00      	nop
 8004c08:	371c      	adds	r7, #28
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b087      	sub	sp, #28
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	f023 0210 	bic.w	r2, r3, #16
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	031b      	lsls	r3, r3, #12
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	011b      	lsls	r3, r3, #4
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	693a      	ldr	r2, [r7, #16]
 8004c64:	621a      	str	r2, [r3, #32]
}
 8004c66:	bf00      	nop
 8004c68:	371c      	adds	r7, #28
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f043 0307 	orr.w	r3, r3, #7
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	609a      	str	r2, [r3, #8]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1a      	ldr	r2, [r3, #32]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e05a      	b.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a21      	ldr	r2, [pc, #132]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d01d      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d018      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d013      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1a      	ldr	r2, [pc, #104]	; (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d00e      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a18      	ldr	r2, [pc, #96]	; (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d009      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a17      	ldr	r2, [pc, #92]	; (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d004      	beq.n	8004dd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a15      	ldr	r2, [pc, #84]	; (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d10c      	bne.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40001800 	.word	0x40001800

08004e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e03f      	b.n	8004ee6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc ff9a 	bl	8001db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	; 0x24
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 f829 	bl	8004ef0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2220      	movs	r2, #32
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef4:	b0c0      	sub	sp, #256	; 0x100
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	ea40 0301 	orr.w	r3, r0, r1
 8004f18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1e:	689a      	ldr	r2, [r3, #8]
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004f48:	f021 010c 	bic.w	r1, r1, #12
 8004f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004f56:	430b      	orrs	r3, r1
 8004f58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6a:	6999      	ldr	r1, [r3, #24]
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	ea40 0301 	orr.w	r3, r0, r1
 8004f76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	4b8f      	ldr	r3, [pc, #572]	; (80051bc <UART_SetConfig+0x2cc>)
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d005      	beq.n	8004f90 <UART_SetConfig+0xa0>
 8004f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	4b8d      	ldr	r3, [pc, #564]	; (80051c0 <UART_SetConfig+0x2d0>)
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d104      	bne.n	8004f9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f90:	f7fe fe60 	bl	8003c54 <HAL_RCC_GetPCLK2Freq>
 8004f94:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f98:	e003      	b.n	8004fa2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f9a:	f7fe fe47 	bl	8003c2c <HAL_RCC_GetPCLK1Freq>
 8004f9e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fac:	f040 810c 	bne.w	80051c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004fba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004fbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	462b      	mov	r3, r5
 8004fc6:	1891      	adds	r1, r2, r2
 8004fc8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004fca:	415b      	adcs	r3, r3
 8004fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004fd2:	4621      	mov	r1, r4
 8004fd4:	eb12 0801 	adds.w	r8, r2, r1
 8004fd8:	4629      	mov	r1, r5
 8004fda:	eb43 0901 	adc.w	r9, r3, r1
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ff2:	4690      	mov	r8, r2
 8004ff4:	4699      	mov	r9, r3
 8004ff6:	4623      	mov	r3, r4
 8004ff8:	eb18 0303 	adds.w	r3, r8, r3
 8004ffc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005000:	462b      	mov	r3, r5
 8005002:	eb49 0303 	adc.w	r3, r9, r3
 8005006:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005016:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800501a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800501e:	460b      	mov	r3, r1
 8005020:	18db      	adds	r3, r3, r3
 8005022:	653b      	str	r3, [r7, #80]	; 0x50
 8005024:	4613      	mov	r3, r2
 8005026:	eb42 0303 	adc.w	r3, r2, r3
 800502a:	657b      	str	r3, [r7, #84]	; 0x54
 800502c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005030:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005034:	f7fb fb86 	bl	8000744 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4b61      	ldr	r3, [pc, #388]	; (80051c4 <UART_SetConfig+0x2d4>)
 800503e:	fba3 2302 	umull	r2, r3, r3, r2
 8005042:	095b      	lsrs	r3, r3, #5
 8005044:	011c      	lsls	r4, r3, #4
 8005046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800504a:	2200      	movs	r2, #0
 800504c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005050:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005054:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005058:	4642      	mov	r2, r8
 800505a:	464b      	mov	r3, r9
 800505c:	1891      	adds	r1, r2, r2
 800505e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005060:	415b      	adcs	r3, r3
 8005062:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005064:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005068:	4641      	mov	r1, r8
 800506a:	eb12 0a01 	adds.w	sl, r2, r1
 800506e:	4649      	mov	r1, r9
 8005070:	eb43 0b01 	adc.w	fp, r3, r1
 8005074:	f04f 0200 	mov.w	r2, #0
 8005078:	f04f 0300 	mov.w	r3, #0
 800507c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005080:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005088:	4692      	mov	sl, r2
 800508a:	469b      	mov	fp, r3
 800508c:	4643      	mov	r3, r8
 800508e:	eb1a 0303 	adds.w	r3, sl, r3
 8005092:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005096:	464b      	mov	r3, r9
 8005098:	eb4b 0303 	adc.w	r3, fp, r3
 800509c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80050b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80050b4:	460b      	mov	r3, r1
 80050b6:	18db      	adds	r3, r3, r3
 80050b8:	643b      	str	r3, [r7, #64]	; 0x40
 80050ba:	4613      	mov	r3, r2
 80050bc:	eb42 0303 	adc.w	r3, r2, r3
 80050c0:	647b      	str	r3, [r7, #68]	; 0x44
 80050c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80050c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80050ca:	f7fb fb3b 	bl	8000744 <__aeabi_uldivmod>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	4b3b      	ldr	r3, [pc, #236]	; (80051c4 <UART_SetConfig+0x2d4>)
 80050d6:	fba3 2301 	umull	r2, r3, r3, r1
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2264      	movs	r2, #100	; 0x64
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	1acb      	subs	r3, r1, r3
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050ea:	4b36      	ldr	r3, [pc, #216]	; (80051c4 <UART_SetConfig+0x2d4>)
 80050ec:	fba3 2302 	umull	r2, r3, r3, r2
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050f8:	441c      	add	r4, r3
 80050fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005104:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005108:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	1891      	adds	r1, r2, r2
 8005112:	63b9      	str	r1, [r7, #56]	; 0x38
 8005114:	415b      	adcs	r3, r3
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005118:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800511c:	4641      	mov	r1, r8
 800511e:	1851      	adds	r1, r2, r1
 8005120:	6339      	str	r1, [r7, #48]	; 0x30
 8005122:	4649      	mov	r1, r9
 8005124:	414b      	adcs	r3, r1
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005134:	4659      	mov	r1, fp
 8005136:	00cb      	lsls	r3, r1, #3
 8005138:	4651      	mov	r1, sl
 800513a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513e:	4651      	mov	r1, sl
 8005140:	00ca      	lsls	r2, r1, #3
 8005142:	4610      	mov	r0, r2
 8005144:	4619      	mov	r1, r3
 8005146:	4603      	mov	r3, r0
 8005148:	4642      	mov	r2, r8
 800514a:	189b      	adds	r3, r3, r2
 800514c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005150:	464b      	mov	r3, r9
 8005152:	460a      	mov	r2, r1
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005168:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800516c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005170:	460b      	mov	r3, r1
 8005172:	18db      	adds	r3, r3, r3
 8005174:	62bb      	str	r3, [r7, #40]	; 0x28
 8005176:	4613      	mov	r3, r2
 8005178:	eb42 0303 	adc.w	r3, r2, r3
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005182:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005186:	f7fb fadd 	bl	8000744 <__aeabi_uldivmod>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <UART_SetConfig+0x2d4>)
 8005190:	fba3 1302 	umull	r1, r3, r3, r2
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	2164      	movs	r1, #100	; 0x64
 8005198:	fb01 f303 	mul.w	r3, r1, r3
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	3332      	adds	r3, #50	; 0x32
 80051a2:	4a08      	ldr	r2, [pc, #32]	; (80051c4 <UART_SetConfig+0x2d4>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	095b      	lsrs	r3, r3, #5
 80051aa:	f003 0207 	and.w	r2, r3, #7
 80051ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4422      	add	r2, r4
 80051b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80051b8:	e105      	b.n	80053c6 <UART_SetConfig+0x4d6>
 80051ba:	bf00      	nop
 80051bc:	40011000 	.word	0x40011000
 80051c0:	40011400 	.word	0x40011400
 80051c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051cc:	2200      	movs	r2, #0
 80051ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80051d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80051d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80051da:	4642      	mov	r2, r8
 80051dc:	464b      	mov	r3, r9
 80051de:	1891      	adds	r1, r2, r2
 80051e0:	6239      	str	r1, [r7, #32]
 80051e2:	415b      	adcs	r3, r3
 80051e4:	627b      	str	r3, [r7, #36]	; 0x24
 80051e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ea:	4641      	mov	r1, r8
 80051ec:	1854      	adds	r4, r2, r1
 80051ee:	4649      	mov	r1, r9
 80051f0:	eb43 0501 	adc.w	r5, r3, r1
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	00eb      	lsls	r3, r5, #3
 80051fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005202:	00e2      	lsls	r2, r4, #3
 8005204:	4614      	mov	r4, r2
 8005206:	461d      	mov	r5, r3
 8005208:	4643      	mov	r3, r8
 800520a:	18e3      	adds	r3, r4, r3
 800520c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005210:	464b      	mov	r3, r9
 8005212:	eb45 0303 	adc.w	r3, r5, r3
 8005216:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005226:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005236:	4629      	mov	r1, r5
 8005238:	008b      	lsls	r3, r1, #2
 800523a:	4621      	mov	r1, r4
 800523c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005240:	4621      	mov	r1, r4
 8005242:	008a      	lsls	r2, r1, #2
 8005244:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005248:	f7fb fa7c 	bl	8000744 <__aeabi_uldivmod>
 800524c:	4602      	mov	r2, r0
 800524e:	460b      	mov	r3, r1
 8005250:	4b60      	ldr	r3, [pc, #384]	; (80053d4 <UART_SetConfig+0x4e4>)
 8005252:	fba3 2302 	umull	r2, r3, r3, r2
 8005256:	095b      	lsrs	r3, r3, #5
 8005258:	011c      	lsls	r4, r3, #4
 800525a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800525e:	2200      	movs	r2, #0
 8005260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005264:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005268:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800526c:	4642      	mov	r2, r8
 800526e:	464b      	mov	r3, r9
 8005270:	1891      	adds	r1, r2, r2
 8005272:	61b9      	str	r1, [r7, #24]
 8005274:	415b      	adcs	r3, r3
 8005276:	61fb      	str	r3, [r7, #28]
 8005278:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800527c:	4641      	mov	r1, r8
 800527e:	1851      	adds	r1, r2, r1
 8005280:	6139      	str	r1, [r7, #16]
 8005282:	4649      	mov	r1, r9
 8005284:	414b      	adcs	r3, r1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005294:	4659      	mov	r1, fp
 8005296:	00cb      	lsls	r3, r1, #3
 8005298:	4651      	mov	r1, sl
 800529a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800529e:	4651      	mov	r1, sl
 80052a0:	00ca      	lsls	r2, r1, #3
 80052a2:	4610      	mov	r0, r2
 80052a4:	4619      	mov	r1, r3
 80052a6:	4603      	mov	r3, r0
 80052a8:	4642      	mov	r2, r8
 80052aa:	189b      	adds	r3, r3, r2
 80052ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052b0:	464b      	mov	r3, r9
 80052b2:	460a      	mov	r2, r1
 80052b4:	eb42 0303 	adc.w	r3, r2, r3
 80052b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80052c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80052d4:	4649      	mov	r1, r9
 80052d6:	008b      	lsls	r3, r1, #2
 80052d8:	4641      	mov	r1, r8
 80052da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052de:	4641      	mov	r1, r8
 80052e0:	008a      	lsls	r2, r1, #2
 80052e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80052e6:	f7fb fa2d 	bl	8000744 <__aeabi_uldivmod>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
 80052ee:	4b39      	ldr	r3, [pc, #228]	; (80053d4 <UART_SetConfig+0x4e4>)
 80052f0:	fba3 1302 	umull	r1, r3, r3, r2
 80052f4:	095b      	lsrs	r3, r3, #5
 80052f6:	2164      	movs	r1, #100	; 0x64
 80052f8:	fb01 f303 	mul.w	r3, r1, r3
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	3332      	adds	r3, #50	; 0x32
 8005302:	4a34      	ldr	r2, [pc, #208]	; (80053d4 <UART_SetConfig+0x4e4>)
 8005304:	fba2 2303 	umull	r2, r3, r2, r3
 8005308:	095b      	lsrs	r3, r3, #5
 800530a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800530e:	441c      	add	r4, r3
 8005310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005314:	2200      	movs	r2, #0
 8005316:	673b      	str	r3, [r7, #112]	; 0x70
 8005318:	677a      	str	r2, [r7, #116]	; 0x74
 800531a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800531e:	4642      	mov	r2, r8
 8005320:	464b      	mov	r3, r9
 8005322:	1891      	adds	r1, r2, r2
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	415b      	adcs	r3, r3
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800532e:	4641      	mov	r1, r8
 8005330:	1851      	adds	r1, r2, r1
 8005332:	6039      	str	r1, [r7, #0]
 8005334:	4649      	mov	r1, r9
 8005336:	414b      	adcs	r3, r1
 8005338:	607b      	str	r3, [r7, #4]
 800533a:	f04f 0200 	mov.w	r2, #0
 800533e:	f04f 0300 	mov.w	r3, #0
 8005342:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005346:	4659      	mov	r1, fp
 8005348:	00cb      	lsls	r3, r1, #3
 800534a:	4651      	mov	r1, sl
 800534c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005350:	4651      	mov	r1, sl
 8005352:	00ca      	lsls	r2, r1, #3
 8005354:	4610      	mov	r0, r2
 8005356:	4619      	mov	r1, r3
 8005358:	4603      	mov	r3, r0
 800535a:	4642      	mov	r2, r8
 800535c:	189b      	adds	r3, r3, r2
 800535e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005360:	464b      	mov	r3, r9
 8005362:	460a      	mov	r2, r1
 8005364:	eb42 0303 	adc.w	r3, r2, r3
 8005368:	66fb      	str	r3, [r7, #108]	; 0x6c
 800536a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	663b      	str	r3, [r7, #96]	; 0x60
 8005374:	667a      	str	r2, [r7, #100]	; 0x64
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005382:	4649      	mov	r1, r9
 8005384:	008b      	lsls	r3, r1, #2
 8005386:	4641      	mov	r1, r8
 8005388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800538c:	4641      	mov	r1, r8
 800538e:	008a      	lsls	r2, r1, #2
 8005390:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005394:	f7fb f9d6 	bl	8000744 <__aeabi_uldivmod>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	4b0d      	ldr	r3, [pc, #52]	; (80053d4 <UART_SetConfig+0x4e4>)
 800539e:	fba3 1302 	umull	r1, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2164      	movs	r1, #100	; 0x64
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	3332      	adds	r3, #50	; 0x32
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <UART_SetConfig+0x4e4>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	f003 020f 	and.w	r2, r3, #15
 80053bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4422      	add	r2, r4
 80053c4:	609a      	str	r2, [r3, #8]
}
 80053c6:	bf00      	nop
 80053c8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053d2:	bf00      	nop
 80053d4:	51eb851f 	.word	0x51eb851f

080053d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	4603      	mov	r3, r0
 80053e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80053e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053ea:	2b84      	cmp	r3, #132	; 0x84
 80053ec:	d005      	beq.n	80053fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80053ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	3303      	adds	r3, #3
 80053f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80053fa:	68fb      	ldr	r3, [r7, #12]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3714      	adds	r7, #20
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800540c:	f000 fade 	bl	80059cc <vTaskStartScheduler>
  
  return osOK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	bd80      	pop	{r7, pc}

08005416 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005416:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005418:	b089      	sub	sp, #36	; 0x24
 800541a:	af04      	add	r7, sp, #16
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d020      	beq.n	800546a <osThreadCreate+0x54>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01c      	beq.n	800546a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685c      	ldr	r4, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681d      	ldr	r5, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691e      	ldr	r6, [r3, #16]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005442:	4618      	mov	r0, r3
 8005444:	f7ff ffc8 	bl	80053d8 <makeFreeRtosPriority>
 8005448:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005452:	9202      	str	r2, [sp, #8]
 8005454:	9301      	str	r3, [sp, #4]
 8005456:	9100      	str	r1, [sp, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	4632      	mov	r2, r6
 800545c:	4629      	mov	r1, r5
 800545e:	4620      	mov	r0, r4
 8005460:	f000 f8ed 	bl	800563e <xTaskCreateStatic>
 8005464:	4603      	mov	r3, r0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e01c      	b.n	80054a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685c      	ldr	r4, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005476:	b29e      	uxth	r6, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff ffaa 	bl	80053d8 <makeFreeRtosPriority>
 8005484:	4602      	mov	r2, r0
 8005486:	f107 030c 	add.w	r3, r7, #12
 800548a:	9301      	str	r3, [sp, #4]
 800548c:	9200      	str	r2, [sp, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	4632      	mov	r2, r6
 8005492:	4629      	mov	r1, r5
 8005494:	4620      	mov	r0, r4
 8005496:	f000 f92f 	bl	80056f8 <xTaskCreate>
 800549a:	4603      	mov	r3, r0
 800549c:	2b01      	cmp	r3, #1
 800549e:	d001      	beq.n	80054a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	e000      	b.n	80054a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b084      	sub	sp, #16
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <osDelay+0x16>
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	e000      	b.n	80054c6 <osDelay+0x18>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa4c 	bl	8005964 <vTaskDelay>
  
  return osOK;
 80054cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f103 0208 	add.w	r2, r3, #8
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ee:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f103 0208 	add.w	r2, r3, #8
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f103 0208 	add.w	r2, r3, #8
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689a      	ldr	r2, [r3, #8]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	683a      	ldr	r2, [r7, #0]
 800555a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800558e:	d103      	bne.n	8005598 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	e00c      	b.n	80055b2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3308      	adds	r3, #8
 800559c:	60fb      	str	r3, [r7, #12]
 800559e:	e002      	b.n	80055a6 <vListInsert+0x2e>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	60fb      	str	r3, [r7, #12]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d2f6      	bcs.n	80055a0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	601a      	str	r2, [r3, #0]
}
 80055de:	bf00      	nop
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055ea:	b480      	push	{r7}
 80055ec:	b085      	sub	sp, #20
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6892      	ldr	r2, [r2, #8]
 8005600:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6852      	ldr	r2, [r2, #4]
 800560a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	429a      	cmp	r2, r3
 8005614:	d103      	bne.n	800561e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1e5a      	subs	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800563e:	b580      	push	{r7, lr}
 8005640:	b08e      	sub	sp, #56	; 0x38
 8005642:	af04      	add	r7, sp, #16
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	607a      	str	r2, [r7, #4]
 800564a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800564c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005656:	f383 8811 	msr	BASEPRI, r3
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	f3bf 8f4f 	dsb	sy
 8005662:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005664:	bf00      	nop
 8005666:	e7fe      	b.n	8005666 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <xTaskCreateStatic+0x46>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	61fb      	str	r3, [r7, #28]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005684:	2354      	movs	r3, #84	; 0x54
 8005686:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	2b54      	cmp	r3, #84	; 0x54
 800568c:	d00a      	beq.n	80056a4 <xTaskCreateStatic+0x66>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	61bb      	str	r3, [r7, #24]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80056a4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80056a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01e      	beq.n	80056ea <xTaskCreateStatic+0xac>
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01b      	beq.n	80056ea <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80056c4:	2300      	movs	r3, #0
 80056c6:	9303      	str	r3, [sp, #12]
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	9302      	str	r3, [sp, #8]
 80056cc:	f107 0314 	add.w	r3, r7, #20
 80056d0:	9301      	str	r3, [sp, #4]
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f850 	bl	8005782 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056e4:	f000 f8d4 	bl	8005890 <prvAddNewTaskToReadyList>
 80056e8:	e001      	b.n	80056ee <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056ee:	697b      	ldr	r3, [r7, #20]
	}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3728      	adds	r7, #40	; 0x28
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	; 0x30
 80056fc:	af04      	add	r7, sp, #16
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	4613      	mov	r3, r2
 8005706:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005708:	88fb      	ldrh	r3, [r7, #6]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fec3 	bl	8006498 <pvPortMalloc>
 8005712:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00e      	beq.n	8005738 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800571a:	2054      	movs	r0, #84	; 0x54
 800571c:	f000 febc 	bl	8006498 <pvPortMalloc>
 8005720:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
 800572e:	e005      	b.n	800573c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005730:	6978      	ldr	r0, [r7, #20]
 8005732:	f000 ff7d 	bl	8006630 <vPortFree>
 8005736:	e001      	b.n	800573c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d017      	beq.n	8005772 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800574a:	88fa      	ldrh	r2, [r7, #6]
 800574c:	2300      	movs	r3, #0
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	9302      	str	r3, [sp, #8]
 8005754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f80e 	bl	8005782 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005766:	69f8      	ldr	r0, [r7, #28]
 8005768:	f000 f892 	bl	8005890 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800576c:	2301      	movs	r3, #1
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e002      	b.n	8005778 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005776:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005778:	69bb      	ldr	r3, [r7, #24]
	}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b088      	sub	sp, #32
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800579a:	3b01      	subs	r3, #1
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4413      	add	r3, r2
 80057a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f023 0307 	bic.w	r3, r3, #7
 80057a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00a      	beq.n	80057ca <prvInitialiseNewTask+0x48>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	617b      	str	r3, [r7, #20]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01f      	beq.n	8005810 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057d0:	2300      	movs	r3, #0
 80057d2:	61fb      	str	r3, [r7, #28]
 80057d4:	e012      	b.n	80057fc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	4413      	add	r3, r2
 80057dc:	7819      	ldrb	r1, [r3, #0]
 80057de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	4413      	add	r3, r2
 80057e4:	3334      	adds	r3, #52	; 0x34
 80057e6:	460a      	mov	r2, r1
 80057e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d006      	beq.n	8005804 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	3301      	adds	r3, #1
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b0f      	cmp	r3, #15
 8005800:	d9e9      	bls.n	80057d6 <prvInitialiseNewTask+0x54>
 8005802:	e000      	b.n	8005806 <prvInitialiseNewTask+0x84>
			{
				break;
 8005804:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005808:	2200      	movs	r2, #0
 800580a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800580e:	e003      	b.n	8005818 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	2200      	movs	r2, #0
 8005814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b06      	cmp	r3, #6
 800581c:	d901      	bls.n	8005822 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800581e:	2306      	movs	r3, #6
 8005820:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800582c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800582e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005830:	2200      	movs	r2, #0
 8005832:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	3304      	adds	r3, #4
 8005838:	4618      	mov	r0, r3
 800583a:	f7ff fe6c 	bl	8005516 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	3318      	adds	r3, #24
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff fe67 	bl	8005516 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	f1c3 0207 	rsb	r2, r3, #7
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800585c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	2200      	movs	r2, #0
 8005862:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	68f9      	ldr	r1, [r7, #12]
 8005870:	69b8      	ldr	r0, [r7, #24]
 8005872:	f000 fc05 	bl	8006080 <pxPortInitialiseStack>
 8005876:	4602      	mov	r2, r0
 8005878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	2b00      	cmp	r3, #0
 8005880:	d002      	beq.n	8005888 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005886:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005888:	bf00      	nop
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005898:	f000 fd1c 	bl	80062d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800589c:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <prvAddNewTaskToReadyList+0xb8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3301      	adds	r3, #1
 80058a2:	4a29      	ldr	r2, [pc, #164]	; (8005948 <prvAddNewTaskToReadyList+0xb8>)
 80058a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80058a6:	4b29      	ldr	r3, [pc, #164]	; (800594c <prvAddNewTaskToReadyList+0xbc>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80058ae:	4a27      	ldr	r2, [pc, #156]	; (800594c <prvAddNewTaskToReadyList+0xbc>)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058b4:	4b24      	ldr	r3, [pc, #144]	; (8005948 <prvAddNewTaskToReadyList+0xb8>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d110      	bne.n	80058de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058bc:	f000 fabc 	bl	8005e38 <prvInitialiseTaskLists>
 80058c0:	e00d      	b.n	80058de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058c2:	4b23      	ldr	r3, [pc, #140]	; (8005950 <prvAddNewTaskToReadyList+0xc0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d109      	bne.n	80058de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058ca:	4b20      	ldr	r3, [pc, #128]	; (800594c <prvAddNewTaskToReadyList+0xbc>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d802      	bhi.n	80058de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058d8:	4a1c      	ldr	r2, [pc, #112]	; (800594c <prvAddNewTaskToReadyList+0xbc>)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058de:	4b1d      	ldr	r3, [pc, #116]	; (8005954 <prvAddNewTaskToReadyList+0xc4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	4a1b      	ldr	r2, [pc, #108]	; (8005954 <prvAddNewTaskToReadyList+0xc4>)
 80058e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ec:	2201      	movs	r2, #1
 80058ee:	409a      	lsls	r2, r3
 80058f0:	4b19      	ldr	r3, [pc, #100]	; (8005958 <prvAddNewTaskToReadyList+0xc8>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	4a18      	ldr	r2, [pc, #96]	; (8005958 <prvAddNewTaskToReadyList+0xc8>)
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fe:	4613      	mov	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4a15      	ldr	r2, [pc, #84]	; (800595c <prvAddNewTaskToReadyList+0xcc>)
 8005908:	441a      	add	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	4619      	mov	r1, r3
 8005910:	4610      	mov	r0, r2
 8005912:	f7ff fe0d 	bl	8005530 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005916:	f000 fd0d 	bl	8006334 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800591a:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <prvAddNewTaskToReadyList+0xc0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00e      	beq.n	8005940 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <prvAddNewTaskToReadyList+0xbc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	429a      	cmp	r2, r3
 800592e:	d207      	bcs.n	8005940 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <prvAddNewTaskToReadyList+0xd0>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005940:	bf00      	nop
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	200006a4 	.word	0x200006a4
 800594c:	200005a4 	.word	0x200005a4
 8005950:	200006b0 	.word	0x200006b0
 8005954:	200006c0 	.word	0x200006c0
 8005958:	200006ac 	.word	0x200006ac
 800595c:	200005a8 	.word	0x200005a8
 8005960:	e000ed04 	.word	0xe000ed04

08005964 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800596c:	2300      	movs	r3, #0
 800596e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d017      	beq.n	80059a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005976:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <vTaskDelay+0x60>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <vTaskDelay+0x30>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60bb      	str	r3, [r7, #8]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005994:	f000 f87a 	bl	8005a8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005998:	2100      	movs	r1, #0
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 fb0a 	bl	8005fb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80059a0:	f000 f882 	bl	8005aa8 <xTaskResumeAll>
 80059a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d107      	bne.n	80059bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <vTaskDelay+0x64>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	200006cc 	.word	0x200006cc
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b08a      	sub	sp, #40	; 0x28
 80059d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80059d6:	2300      	movs	r3, #0
 80059d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059da:	463a      	mov	r2, r7
 80059dc:	1d39      	adds	r1, r7, #4
 80059de:	f107 0308 	add.w	r3, r7, #8
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fb f8d2 	bl	8000b8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	9202      	str	r2, [sp, #8]
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	2300      	movs	r3, #0
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	2300      	movs	r3, #0
 80059f8:	460a      	mov	r2, r1
 80059fa:	491e      	ldr	r1, [pc, #120]	; (8005a74 <vTaskStartScheduler+0xa8>)
 80059fc:	481e      	ldr	r0, [pc, #120]	; (8005a78 <vTaskStartScheduler+0xac>)
 80059fe:	f7ff fe1e 	bl	800563e <xTaskCreateStatic>
 8005a02:	4603      	mov	r3, r0
 8005a04:	4a1d      	ldr	r2, [pc, #116]	; (8005a7c <vTaskStartScheduler+0xb0>)
 8005a06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a08:	4b1c      	ldr	r3, [pc, #112]	; (8005a7c <vTaskStartScheduler+0xb0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005a10:	2301      	movs	r3, #1
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	e001      	b.n	8005a1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d116      	bne.n	8005a4e <vTaskStartScheduler+0x82>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	613b      	str	r3, [r7, #16]
}
 8005a32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a34:	4b12      	ldr	r3, [pc, #72]	; (8005a80 <vTaskStartScheduler+0xb4>)
 8005a36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a3c:	4b11      	ldr	r3, [pc, #68]	; (8005a84 <vTaskStartScheduler+0xb8>)
 8005a3e:	2201      	movs	r2, #1
 8005a40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a42:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <vTaskStartScheduler+0xbc>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a48:	f000 fba2 	bl	8006190 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a4c:	e00e      	b.n	8005a6c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a54:	d10a      	bne.n	8005a6c <vTaskStartScheduler+0xa0>
	__asm volatile
 8005a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5a:	f383 8811 	msr	BASEPRI, r3
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f3bf 8f4f 	dsb	sy
 8005a66:	60fb      	str	r3, [r7, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	e7fe      	b.n	8005a6a <vTaskStartScheduler+0x9e>
}
 8005a6c:	bf00      	nop
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	08006960 	.word	0x08006960
 8005a78:	08005e09 	.word	0x08005e09
 8005a7c:	200006c8 	.word	0x200006c8
 8005a80:	200006c4 	.word	0x200006c4
 8005a84:	200006b0 	.word	0x200006b0
 8005a88:	200006a8 	.word	0x200006a8

08005a8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <vTaskSuspendAll+0x18>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3301      	adds	r3, #1
 8005a96:	4a03      	ldr	r2, [pc, #12]	; (8005aa4 <vTaskSuspendAll+0x18>)
 8005a98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a9a:	bf00      	nop
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr
 8005aa4:	200006cc 	.word	0x200006cc

08005aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ab6:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <xTaskResumeAll+0x114>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10a      	bne.n	8005ad4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac2:	f383 8811 	msr	BASEPRI, r3
 8005ac6:	f3bf 8f6f 	isb	sy
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	603b      	str	r3, [r7, #0]
}
 8005ad0:	bf00      	nop
 8005ad2:	e7fe      	b.n	8005ad2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ad4:	f000 fbfe 	bl	80062d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ad8:	4b38      	ldr	r3, [pc, #224]	; (8005bbc <xTaskResumeAll+0x114>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	4a37      	ldr	r2, [pc, #220]	; (8005bbc <xTaskResumeAll+0x114>)
 8005ae0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ae2:	4b36      	ldr	r3, [pc, #216]	; (8005bbc <xTaskResumeAll+0x114>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d161      	bne.n	8005bae <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005aea:	4b35      	ldr	r3, [pc, #212]	; (8005bc0 <xTaskResumeAll+0x118>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d05d      	beq.n	8005bae <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005af2:	e02e      	b.n	8005b52 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005af4:	4b33      	ldr	r3, [pc, #204]	; (8005bc4 <xTaskResumeAll+0x11c>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3318      	adds	r3, #24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fd72 	bl	80055ea <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fd6d 	bl	80055ea <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	2201      	movs	r2, #1
 8005b16:	409a      	lsls	r2, r3
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <xTaskResumeAll+0x120>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	4a2a      	ldr	r2, [pc, #168]	; (8005bc8 <xTaskResumeAll+0x120>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4a27      	ldr	r2, [pc, #156]	; (8005bcc <xTaskResumeAll+0x124>)
 8005b30:	441a      	add	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f7ff fcf9 	bl	8005530 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b42:	4b23      	ldr	r3, [pc, #140]	; (8005bd0 <xTaskResumeAll+0x128>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d302      	bcc.n	8005b52 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005b4c:	4b21      	ldr	r3, [pc, #132]	; (8005bd4 <xTaskResumeAll+0x12c>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b52:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <xTaskResumeAll+0x11c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d1cc      	bne.n	8005af4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d001      	beq.n	8005b64 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b60:	f000 fa08 	bl	8005f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b64:	4b1c      	ldr	r3, [pc, #112]	; (8005bd8 <xTaskResumeAll+0x130>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d010      	beq.n	8005b92 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b70:	f000 f836 	bl	8005be0 <xTaskIncrementTick>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005b7a:	4b16      	ldr	r3, [pc, #88]	; (8005bd4 <xTaskResumeAll+0x12c>)
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1f1      	bne.n	8005b70 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005b8c:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <xTaskResumeAll+0x130>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <xTaskResumeAll+0x12c>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b9e:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <xTaskResumeAll+0x134>)
 8005ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bae:	f000 fbc1 	bl	8006334 <vPortExitCritical>

	return xAlreadyYielded;
 8005bb2:	68bb      	ldr	r3, [r7, #8]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	200006cc 	.word	0x200006cc
 8005bc0:	200006a4 	.word	0x200006a4
 8005bc4:	20000664 	.word	0x20000664
 8005bc8:	200006ac 	.word	0x200006ac
 8005bcc:	200005a8 	.word	0x200005a8
 8005bd0:	200005a4 	.word	0x200005a4
 8005bd4:	200006b8 	.word	0x200006b8
 8005bd8:	200006b4 	.word	0x200006b4
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005be6:	2300      	movs	r3, #0
 8005be8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bea:	4b4e      	ldr	r3, [pc, #312]	; (8005d24 <xTaskIncrementTick+0x144>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 808e 	bne.w	8005d10 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bf4:	4b4c      	ldr	r3, [pc, #304]	; (8005d28 <xTaskIncrementTick+0x148>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bfc:	4a4a      	ldr	r2, [pc, #296]	; (8005d28 <xTaskIncrementTick+0x148>)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d120      	bne.n	8005c4a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c08:	4b48      	ldr	r3, [pc, #288]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	603b      	str	r3, [r7, #0]
}
 8005c24:	bf00      	nop
 8005c26:	e7fe      	b.n	8005c26 <xTaskIncrementTick+0x46>
 8005c28:	4b40      	ldr	r3, [pc, #256]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	4b40      	ldr	r3, [pc, #256]	; (8005d30 <xTaskIncrementTick+0x150>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a3e      	ldr	r2, [pc, #248]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4a3e      	ldr	r2, [pc, #248]	; (8005d30 <xTaskIncrementTick+0x150>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4b3d      	ldr	r3, [pc, #244]	; (8005d34 <xTaskIncrementTick+0x154>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3301      	adds	r3, #1
 8005c42:	4a3c      	ldr	r2, [pc, #240]	; (8005d34 <xTaskIncrementTick+0x154>)
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	f000 f995 	bl	8005f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c4a:	4b3b      	ldr	r3, [pc, #236]	; (8005d38 <xTaskIncrementTick+0x158>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	693a      	ldr	r2, [r7, #16]
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d348      	bcc.n	8005ce6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c54:	4b35      	ldr	r3, [pc, #212]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <xTaskIncrementTick+0x158>)
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c64:	601a      	str	r2, [r3, #0]
					break;
 8005c66:	e03e      	b.n	8005ce6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c68:	4b30      	ldr	r3, [pc, #192]	; (8005d2c <xTaskIncrementTick+0x14c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d203      	bcs.n	8005c88 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c80:	4a2d      	ldr	r2, [pc, #180]	; (8005d38 <xTaskIncrementTick+0x158>)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c86:	e02e      	b.n	8005ce6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff fcac 	bl	80055ea <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	3318      	adds	r3, #24
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fca3 	bl	80055ea <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	2201      	movs	r2, #1
 8005caa:	409a      	lsls	r2, r3
 8005cac:	4b23      	ldr	r3, [pc, #140]	; (8005d3c <xTaskIncrementTick+0x15c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	4a22      	ldr	r2, [pc, #136]	; (8005d3c <xTaskIncrementTick+0x15c>)
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4a1f      	ldr	r2, [pc, #124]	; (8005d40 <xTaskIncrementTick+0x160>)
 8005cc4:	441a      	add	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f7ff fc2f 	bl	8005530 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd6:	4b1b      	ldr	r3, [pc, #108]	; (8005d44 <xTaskIncrementTick+0x164>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d3b9      	bcc.n	8005c54 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ce4:	e7b6      	b.n	8005c54 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ce6:	4b17      	ldr	r3, [pc, #92]	; (8005d44 <xTaskIncrementTick+0x164>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	4914      	ldr	r1, [pc, #80]	; (8005d40 <xTaskIncrementTick+0x160>)
 8005cee:	4613      	mov	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d901      	bls.n	8005d02 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d02:	4b11      	ldr	r3, [pc, #68]	; (8005d48 <xTaskIncrementTick+0x168>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d007      	beq.n	8005d1a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	617b      	str	r3, [r7, #20]
 8005d0e:	e004      	b.n	8005d1a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d10:	4b0e      	ldr	r3, [pc, #56]	; (8005d4c <xTaskIncrementTick+0x16c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3301      	adds	r3, #1
 8005d16:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <xTaskIncrementTick+0x16c>)
 8005d18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d1a:	697b      	ldr	r3, [r7, #20]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	200006cc 	.word	0x200006cc
 8005d28:	200006a8 	.word	0x200006a8
 8005d2c:	2000065c 	.word	0x2000065c
 8005d30:	20000660 	.word	0x20000660
 8005d34:	200006bc 	.word	0x200006bc
 8005d38:	200006c4 	.word	0x200006c4
 8005d3c:	200006ac 	.word	0x200006ac
 8005d40:	200005a8 	.word	0x200005a8
 8005d44:	200005a4 	.word	0x200005a4
 8005d48:	200006b8 	.word	0x200006b8
 8005d4c:	200006b4 	.word	0x200006b4

08005d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d56:	4b27      	ldr	r3, [pc, #156]	; (8005df4 <vTaskSwitchContext+0xa4>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d003      	beq.n	8005d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d5e:	4b26      	ldr	r3, [pc, #152]	; (8005df8 <vTaskSwitchContext+0xa8>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d64:	e03f      	b.n	8005de6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005d66:	4b24      	ldr	r3, [pc, #144]	; (8005df8 <vTaskSwitchContext+0xa8>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6c:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <vTaskSwitchContext+0xac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	fab3 f383 	clz	r3, r3
 8005d78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005d7a:	7afb      	ldrb	r3, [r7, #11]
 8005d7c:	f1c3 031f 	rsb	r3, r3, #31
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	491f      	ldr	r1, [pc, #124]	; (8005e00 <vTaskSwitchContext+0xb0>)
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	4613      	mov	r3, r2
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10a      	bne.n	8005dac <vTaskSwitchContext+0x5c>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	607b      	str	r3, [r7, #4]
}
 8005da8:	bf00      	nop
 8005daa:	e7fe      	b.n	8005daa <vTaskSwitchContext+0x5a>
 8005dac:	697a      	ldr	r2, [r7, #20]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <vTaskSwitchContext+0xb0>)
 8005db8:	4413      	add	r3, r2
 8005dba:	613b      	str	r3, [r7, #16]
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	605a      	str	r2, [r3, #4]
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	3308      	adds	r3, #8
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d104      	bne.n	8005ddc <vTaskSwitchContext+0x8c>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	4a08      	ldr	r2, [pc, #32]	; (8005e04 <vTaskSwitchContext+0xb4>)
 8005de4:	6013      	str	r3, [r2, #0]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	200006cc 	.word	0x200006cc
 8005df8:	200006b8 	.word	0x200006b8
 8005dfc:	200006ac 	.word	0x200006ac
 8005e00:	200005a8 	.word	0x200005a8
 8005e04:	200005a4 	.word	0x200005a4

08005e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e10:	f000 f852 	bl	8005eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e14:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <prvIdleTask+0x28>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d9f9      	bls.n	8005e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e1c:	4b05      	ldr	r3, [pc, #20]	; (8005e34 <prvIdleTask+0x2c>)
 8005e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e22:	601a      	str	r2, [r3, #0]
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e2c:	e7f0      	b.n	8005e10 <prvIdleTask+0x8>
 8005e2e:	bf00      	nop
 8005e30:	200005a8 	.word	0x200005a8
 8005e34:	e000ed04 	.word	0xe000ed04

08005e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
 8005e42:	e00c      	b.n	8005e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <prvInitialiseTaskLists+0x60>)
 8005e50:	4413      	add	r3, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7ff fb3f 	bl	80054d6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b06      	cmp	r3, #6
 8005e62:	d9ef      	bls.n	8005e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e64:	480d      	ldr	r0, [pc, #52]	; (8005e9c <prvInitialiseTaskLists+0x64>)
 8005e66:	f7ff fb36 	bl	80054d6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e6a:	480d      	ldr	r0, [pc, #52]	; (8005ea0 <prvInitialiseTaskLists+0x68>)
 8005e6c:	f7ff fb33 	bl	80054d6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e70:	480c      	ldr	r0, [pc, #48]	; (8005ea4 <prvInitialiseTaskLists+0x6c>)
 8005e72:	f7ff fb30 	bl	80054d6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e76:	480c      	ldr	r0, [pc, #48]	; (8005ea8 <prvInitialiseTaskLists+0x70>)
 8005e78:	f7ff fb2d 	bl	80054d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e7c:	480b      	ldr	r0, [pc, #44]	; (8005eac <prvInitialiseTaskLists+0x74>)
 8005e7e:	f7ff fb2a 	bl	80054d6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e82:	4b0b      	ldr	r3, [pc, #44]	; (8005eb0 <prvInitialiseTaskLists+0x78>)
 8005e84:	4a05      	ldr	r2, [pc, #20]	; (8005e9c <prvInitialiseTaskLists+0x64>)
 8005e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e88:	4b0a      	ldr	r3, [pc, #40]	; (8005eb4 <prvInitialiseTaskLists+0x7c>)
 8005e8a:	4a05      	ldr	r2, [pc, #20]	; (8005ea0 <prvInitialiseTaskLists+0x68>)
 8005e8c:	601a      	str	r2, [r3, #0]
}
 8005e8e:	bf00      	nop
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200005a8 	.word	0x200005a8
 8005e9c:	20000634 	.word	0x20000634
 8005ea0:	20000648 	.word	0x20000648
 8005ea4:	20000664 	.word	0x20000664
 8005ea8:	20000678 	.word	0x20000678
 8005eac:	20000690 	.word	0x20000690
 8005eb0:	2000065c 	.word	0x2000065c
 8005eb4:	20000660 	.word	0x20000660

08005eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ebe:	e019      	b.n	8005ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ec0:	f000 fa08 	bl	80062d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec4:	4b10      	ldr	r3, [pc, #64]	; (8005f08 <prvCheckTasksWaitingTermination+0x50>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3304      	adds	r3, #4
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f7ff fb8a 	bl	80055ea <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	4a0b      	ldr	r2, [pc, #44]	; (8005f0c <prvCheckTasksWaitingTermination+0x54>)
 8005ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eea:	f000 fa23 	bl	8006334 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f810 	bl	8005f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ef4:	4b06      	ldr	r3, [pc, #24]	; (8005f10 <prvCheckTasksWaitingTermination+0x58>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1e1      	bne.n	8005ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005efc:	bf00      	nop
 8005efe:	bf00      	nop
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000678 	.word	0x20000678
 8005f0c:	200006a4 	.word	0x200006a4
 8005f10:	2000068c 	.word	0x2000068c

08005f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d108      	bne.n	8005f38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fb80 	bl	8006630 <vPortFree>
				vPortFree( pxTCB );
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fb7d 	bl	8006630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f36:	e018      	b.n	8005f6a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d103      	bne.n	8005f4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fb74 	bl	8006630 <vPortFree>
	}
 8005f48:	e00f      	b.n	8005f6a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d00a      	beq.n	8005f6a <prvDeleteTCB+0x56>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	60fb      	str	r3, [r7, #12]
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <prvDeleteTCB+0x54>
	}
 8005f6a:	bf00      	nop
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
	...

08005f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f8c:	e008      	b.n	8005fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8e:	4b07      	ldr	r3, [pc, #28]	; (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f9e:	6013      	str	r3, [r2, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	2000065c 	.word	0x2000065c
 8005fb0:	200006c4 	.word	0x200006c4

08005fb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fbe:	4b29      	ldr	r3, [pc, #164]	; (8006064 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fc4:	4b28      	ldr	r3, [pc, #160]	; (8006068 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3304      	adds	r3, #4
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7ff fb0d 	bl	80055ea <uxListRemove>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d10b      	bne.n	8005fee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005fd6:	4b24      	ldr	r3, [pc, #144]	; (8006068 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	2201      	movs	r2, #1
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	43da      	mvns	r2, r3
 8005fe4:	4b21      	ldr	r3, [pc, #132]	; (800606c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	4a20      	ldr	r2, [pc, #128]	; (800606c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff4:	d10a      	bne.n	800600c <prvAddCurrentTaskToDelayedList+0x58>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ffc:	4b1a      	ldr	r3, [pc, #104]	; (8006068 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3304      	adds	r3, #4
 8006002:	4619      	mov	r1, r3
 8006004:	481a      	ldr	r0, [pc, #104]	; (8006070 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006006:	f7ff fa93 	bl	8005530 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800600a:	e026      	b.n	800605a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4413      	add	r3, r2
 8006012:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006014:	4b14      	ldr	r3, [pc, #80]	; (8006068 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	429a      	cmp	r2, r3
 8006022:	d209      	bcs.n	8006038 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006024:	4b13      	ldr	r3, [pc, #76]	; (8006074 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f7ff faa1 	bl	8005578 <vListInsert>
}
 8006036:	e010      	b.n	800605a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <prvAddCurrentTaskToDelayedList+0xc4>)
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <prvAddCurrentTaskToDelayedList+0xb4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3304      	adds	r3, #4
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f7ff fa97 	bl	8005578 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <prvAddCurrentTaskToDelayedList+0xc8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	429a      	cmp	r2, r3
 8006052:	d202      	bcs.n	800605a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006054:	4a09      	ldr	r2, [pc, #36]	; (800607c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6013      	str	r3, [r2, #0]
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200006a8 	.word	0x200006a8
 8006068:	200005a4 	.word	0x200005a4
 800606c:	200006ac 	.word	0x200006ac
 8006070:	20000690 	.word	0x20000690
 8006074:	20000660 	.word	0x20000660
 8006078:	2000065c 	.word	0x2000065c
 800607c:	200006c4 	.word	0x200006c4

08006080 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3b04      	subs	r3, #4
 8006090:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006098:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3b04      	subs	r3, #4
 800609e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f023 0201 	bic.w	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3b04      	subs	r3, #4
 80060ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060b0:	4a0c      	ldr	r2, [pc, #48]	; (80060e4 <pxPortInitialiseStack+0x64>)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	3b14      	subs	r3, #20
 80060ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	3b04      	subs	r3, #4
 80060c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f06f 0202 	mvn.w	r2, #2
 80060ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3b20      	subs	r3, #32
 80060d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060d6:	68fb      	ldr	r3, [r7, #12]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	080060e9 	.word	0x080060e9

080060e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060f2:	4b12      	ldr	r3, [pc, #72]	; (800613c <prvTaskExitError+0x54>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060fa:	d00a      	beq.n	8006112 <prvTaskExitError+0x2a>
	__asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	60fb      	str	r3, [r7, #12]
}
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <prvTaskExitError+0x28>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	60bb      	str	r3, [r7, #8]
}
 8006124:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006126:	bf00      	nop
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0fc      	beq.n	8006128 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800612e:	bf00      	nop
 8006130:	bf00      	nop
 8006132:	3714      	adds	r7, #20
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr
 800613c:	2000000c 	.word	0x2000000c

08006140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006140:	4b07      	ldr	r3, [pc, #28]	; (8006160 <pxCurrentTCBConst2>)
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	6808      	ldr	r0, [r1, #0]
 8006146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614a:	f380 8809 	msr	PSP, r0
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8811 	msr	BASEPRI, r0
 800615a:	4770      	bx	lr
 800615c:	f3af 8000 	nop.w

08006160 <pxCurrentTCBConst2>:
 8006160:	200005a4 	.word	0x200005a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop

08006168 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006168:	4808      	ldr	r0, [pc, #32]	; (800618c <prvPortStartFirstTask+0x24>)
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	6800      	ldr	r0, [r0, #0]
 800616e:	f380 8808 	msr	MSP, r0
 8006172:	f04f 0000 	mov.w	r0, #0
 8006176:	f380 8814 	msr	CONTROL, r0
 800617a:	b662      	cpsie	i
 800617c:	b661      	cpsie	f
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	df00      	svc	0
 8006188:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800618a:	bf00      	nop
 800618c:	e000ed08 	.word	0xe000ed08

08006190 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b086      	sub	sp, #24
 8006194:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006196:	4b46      	ldr	r3, [pc, #280]	; (80062b0 <xPortStartScheduler+0x120>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a46      	ldr	r2, [pc, #280]	; (80062b4 <xPortStartScheduler+0x124>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d10a      	bne.n	80061b6 <xPortStartScheduler+0x26>
	__asm volatile
 80061a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a4:	f383 8811 	msr	BASEPRI, r3
 80061a8:	f3bf 8f6f 	isb	sy
 80061ac:	f3bf 8f4f 	dsb	sy
 80061b0:	613b      	str	r3, [r7, #16]
}
 80061b2:	bf00      	nop
 80061b4:	e7fe      	b.n	80061b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80061b6:	4b3e      	ldr	r3, [pc, #248]	; (80062b0 <xPortStartScheduler+0x120>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a3f      	ldr	r2, [pc, #252]	; (80062b8 <xPortStartScheduler+0x128>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d10a      	bne.n	80061d6 <xPortStartScheduler+0x46>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	60fb      	str	r3, [r7, #12]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061d6:	4b39      	ldr	r3, [pc, #228]	; (80062bc <xPortStartScheduler+0x12c>)
 80061d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	22ff      	movs	r2, #255	; 0xff
 80061e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	4b31      	ldr	r3, [pc, #196]	; (80062c0 <xPortStartScheduler+0x130>)
 80061fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061fe:	4b31      	ldr	r3, [pc, #196]	; (80062c4 <xPortStartScheduler+0x134>)
 8006200:	2207      	movs	r2, #7
 8006202:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006204:	e009      	b.n	800621a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006206:	4b2f      	ldr	r3, [pc, #188]	; (80062c4 <xPortStartScheduler+0x134>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3b01      	subs	r3, #1
 800620c:	4a2d      	ldr	r2, [pc, #180]	; (80062c4 <xPortStartScheduler+0x134>)
 800620e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	b2db      	uxtb	r3, r3
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	b2db      	uxtb	r3, r3
 8006218:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b80      	cmp	r3, #128	; 0x80
 8006224:	d0ef      	beq.n	8006206 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006226:	4b27      	ldr	r3, [pc, #156]	; (80062c4 <xPortStartScheduler+0x134>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1c3 0307 	rsb	r3, r3, #7
 800622e:	2b04      	cmp	r3, #4
 8006230:	d00a      	beq.n	8006248 <xPortStartScheduler+0xb8>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	60bb      	str	r3, [r7, #8]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006248:	4b1e      	ldr	r3, [pc, #120]	; (80062c4 <xPortStartScheduler+0x134>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	021b      	lsls	r3, r3, #8
 800624e:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <xPortStartScheduler+0x134>)
 8006250:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006252:	4b1c      	ldr	r3, [pc, #112]	; (80062c4 <xPortStartScheduler+0x134>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800625a:	4a1a      	ldr	r2, [pc, #104]	; (80062c4 <xPortStartScheduler+0x134>)
 800625c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	b2da      	uxtb	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006266:	4b18      	ldr	r3, [pc, #96]	; (80062c8 <xPortStartScheduler+0x138>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a17      	ldr	r2, [pc, #92]	; (80062c8 <xPortStartScheduler+0x138>)
 800626c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006270:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006272:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <xPortStartScheduler+0x138>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a14      	ldr	r2, [pc, #80]	; (80062c8 <xPortStartScheduler+0x138>)
 8006278:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800627c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800627e:	f000 f8dd 	bl	800643c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006282:	4b12      	ldr	r3, [pc, #72]	; (80062cc <xPortStartScheduler+0x13c>)
 8006284:	2200      	movs	r2, #0
 8006286:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006288:	f000 f8fc 	bl	8006484 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800628c:	4b10      	ldr	r3, [pc, #64]	; (80062d0 <xPortStartScheduler+0x140>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0f      	ldr	r2, [pc, #60]	; (80062d0 <xPortStartScheduler+0x140>)
 8006292:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006296:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006298:	f7ff ff66 	bl	8006168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800629c:	f7ff fd58 	bl	8005d50 <vTaskSwitchContext>
	prvTaskExitError();
 80062a0:	f7ff ff22 	bl	80060e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	e000ed00 	.word	0xe000ed00
 80062b4:	410fc271 	.word	0x410fc271
 80062b8:	410fc270 	.word	0x410fc270
 80062bc:	e000e400 	.word	0xe000e400
 80062c0:	200006d0 	.word	0x200006d0
 80062c4:	200006d4 	.word	0x200006d4
 80062c8:	e000ed20 	.word	0xe000ed20
 80062cc:	2000000c 	.word	0x2000000c
 80062d0:	e000ef34 	.word	0xe000ef34

080062d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	607b      	str	r3, [r7, #4]
}
 80062ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062ee:	4b0f      	ldr	r3, [pc, #60]	; (800632c <vPortEnterCritical+0x58>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3301      	adds	r3, #1
 80062f4:	4a0d      	ldr	r2, [pc, #52]	; (800632c <vPortEnterCritical+0x58>)
 80062f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062f8:	4b0c      	ldr	r3, [pc, #48]	; (800632c <vPortEnterCritical+0x58>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d10f      	bne.n	8006320 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <vPortEnterCritical+0x5c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <vPortEnterCritical+0x4c>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	603b      	str	r3, [r7, #0]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <vPortEnterCritical+0x4a>
	}
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	2000000c 	.word	0x2000000c
 8006330:	e000ed04 	.word	0xe000ed04

08006334 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <vPortExitCritical+0x50>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <vPortExitCritical+0x24>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	607b      	str	r3, [r7, #4]
}
 8006354:	bf00      	nop
 8006356:	e7fe      	b.n	8006356 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006358:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <vPortExitCritical+0x50>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	3b01      	subs	r3, #1
 800635e:	4a09      	ldr	r2, [pc, #36]	; (8006384 <vPortExitCritical+0x50>)
 8006360:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006362:	4b08      	ldr	r3, [pc, #32]	; (8006384 <vPortExitCritical+0x50>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d105      	bne.n	8006376 <vPortExitCritical+0x42>
 800636a:	2300      	movs	r3, #0
 800636c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006374:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006376:	bf00      	nop
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	2000000c 	.word	0x2000000c
	...

08006390 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006390:	f3ef 8009 	mrs	r0, PSP
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	4b15      	ldr	r3, [pc, #84]	; (80063f0 <pxCurrentTCBConst>)
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	f01e 0f10 	tst.w	lr, #16
 80063a0:	bf08      	it	eq
 80063a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80063a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063aa:	6010      	str	r0, [r2, #0]
 80063ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80063b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80063b4:	f380 8811 	msr	BASEPRI, r0
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f7ff fcc6 	bl	8005d50 <vTaskSwitchContext>
 80063c4:	f04f 0000 	mov.w	r0, #0
 80063c8:	f380 8811 	msr	BASEPRI, r0
 80063cc:	bc09      	pop	{r0, r3}
 80063ce:	6819      	ldr	r1, [r3, #0]
 80063d0:	6808      	ldr	r0, [r1, #0]
 80063d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063d6:	f01e 0f10 	tst.w	lr, #16
 80063da:	bf08      	it	eq
 80063dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063e0:	f380 8809 	msr	PSP, r0
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	f3af 8000 	nop.w

080063f0 <pxCurrentTCBConst>:
 80063f0:	200005a4 	.word	0x200005a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop

080063f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	607b      	str	r3, [r7, #4]
}
 8006410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006412:	f7ff fbe5 	bl	8005be0 <xTaskIncrementTick>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <SysTick_Handler+0x40>)
 800641e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	2300      	movs	r3, #0
 8006426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	f383 8811 	msr	BASEPRI, r3
}
 800642e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800643c:	b480      	push	{r7}
 800643e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006440:	4b0b      	ldr	r3, [pc, #44]	; (8006470 <vPortSetupTimerInterrupt+0x34>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <vPortSetupTimerInterrupt+0x38>)
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <vPortSetupTimerInterrupt+0x3c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a0a      	ldr	r2, [pc, #40]	; (800647c <vPortSetupTimerInterrupt+0x40>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	099b      	lsrs	r3, r3, #6
 8006458:	4a09      	ldr	r2, [pc, #36]	; (8006480 <vPortSetupTimerInterrupt+0x44>)
 800645a:	3b01      	subs	r3, #1
 800645c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <vPortSetupTimerInterrupt+0x34>)
 8006460:	2207      	movs	r2, #7
 8006462:	601a      	str	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	e000e010 	.word	0xe000e010
 8006474:	e000e018 	.word	0xe000e018
 8006478:	20000000 	.word	0x20000000
 800647c:	10624dd3 	.word	0x10624dd3
 8006480:	e000e014 	.word	0xe000e014

08006484 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006484:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006494 <vPortEnableVFP+0x10>
 8006488:	6801      	ldr	r1, [r0, #0]
 800648a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800648e:	6001      	str	r1, [r0, #0]
 8006490:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006492:	bf00      	nop
 8006494:	e000ed88 	.word	0xe000ed88

08006498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	; 0x28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064a4:	f7ff faf2 	bl	8005a8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064a8:	4b5b      	ldr	r3, [pc, #364]	; (8006618 <pvPortMalloc+0x180>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d101      	bne.n	80064b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064b0:	f000 f920 	bl	80066f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064b4:	4b59      	ldr	r3, [pc, #356]	; (800661c <pvPortMalloc+0x184>)
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4013      	ands	r3, r2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f040 8093 	bne.w	80065e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d01d      	beq.n	8006504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80064c8:	2208      	movs	r2, #8
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4413      	add	r3, r2
 80064ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d014      	beq.n	8006504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f023 0307 	bic.w	r3, r3, #7
 80064e0:	3308      	adds	r3, #8
 80064e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <pvPortMalloc+0x6c>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	617b      	str	r3, [r7, #20]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d06e      	beq.n	80065e8 <pvPortMalloc+0x150>
 800650a:	4b45      	ldr	r3, [pc, #276]	; (8006620 <pvPortMalloc+0x188>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	429a      	cmp	r2, r3
 8006512:	d869      	bhi.n	80065e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006514:	4b43      	ldr	r3, [pc, #268]	; (8006624 <pvPortMalloc+0x18c>)
 8006516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006518:	4b42      	ldr	r3, [pc, #264]	; (8006624 <pvPortMalloc+0x18c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800651e:	e004      	b.n	800652a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	d903      	bls.n	800653c <pvPortMalloc+0xa4>
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1f1      	bne.n	8006520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800653c:	4b36      	ldr	r3, [pc, #216]	; (8006618 <pvPortMalloc+0x180>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006542:	429a      	cmp	r2, r3
 8006544:	d050      	beq.n	80065e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006546:	6a3b      	ldr	r3, [r7, #32]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2208      	movs	r2, #8
 800654c:	4413      	add	r3, r2
 800654e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	1ad2      	subs	r2, r2, r3
 8006560:	2308      	movs	r3, #8
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	429a      	cmp	r2, r3
 8006566:	d91f      	bls.n	80065a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4413      	add	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	f003 0307 	and.w	r3, r3, #7
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00a      	beq.n	8006590 <pvPortMalloc+0xf8>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	613b      	str	r3, [r7, #16]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	1ad2      	subs	r2, r2, r3
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800659c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065a2:	69b8      	ldr	r0, [r7, #24]
 80065a4:	f000 f908 	bl	80067b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065a8:	4b1d      	ldr	r3, [pc, #116]	; (8006620 <pvPortMalloc+0x188>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	4a1b      	ldr	r2, [pc, #108]	; (8006620 <pvPortMalloc+0x188>)
 80065b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065b6:	4b1a      	ldr	r3, [pc, #104]	; (8006620 <pvPortMalloc+0x188>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <pvPortMalloc+0x190>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d203      	bcs.n	80065ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065c2:	4b17      	ldr	r3, [pc, #92]	; (8006620 <pvPortMalloc+0x188>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a18      	ldr	r2, [pc, #96]	; (8006628 <pvPortMalloc+0x190>)
 80065c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	4b13      	ldr	r3, [pc, #76]	; (800661c <pvPortMalloc+0x184>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	431a      	orrs	r2, r3
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065de:	4b13      	ldr	r3, [pc, #76]	; (800662c <pvPortMalloc+0x194>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	4a11      	ldr	r2, [pc, #68]	; (800662c <pvPortMalloc+0x194>)
 80065e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065e8:	f7ff fa5e 	bl	8005aa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <pvPortMalloc+0x174>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	60fb      	str	r3, [r7, #12]
}
 8006608:	bf00      	nop
 800660a:	e7fe      	b.n	800660a <pvPortMalloc+0x172>
	return pvReturn;
 800660c:	69fb      	ldr	r3, [r7, #28]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3728      	adds	r7, #40	; 0x28
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	200042e0 	.word	0x200042e0
 800661c:	200042f4 	.word	0x200042f4
 8006620:	200042e4 	.word	0x200042e4
 8006624:	200042d8 	.word	0x200042d8
 8006628:	200042e8 	.word	0x200042e8
 800662c:	200042ec 	.word	0x200042ec

08006630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d04d      	beq.n	80066de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006642:	2308      	movs	r3, #8
 8006644:	425b      	negs	r3, r3
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <vPortFree+0xb8>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4013      	ands	r3, r2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10a      	bne.n	8006674 <vPortFree+0x44>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	60fb      	str	r3, [r7, #12]
}
 8006670:	bf00      	nop
 8006672:	e7fe      	b.n	8006672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d00a      	beq.n	8006692 <vPortFree+0x62>
	__asm volatile
 800667c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006680:	f383 8811 	msr	BASEPRI, r3
 8006684:	f3bf 8f6f 	isb	sy
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	60bb      	str	r3, [r7, #8]
}
 800668e:	bf00      	nop
 8006690:	e7fe      	b.n	8006690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <vPortFree+0xb8>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01e      	beq.n	80066de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d11a      	bne.n	80066de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <vPortFree+0xb8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	43db      	mvns	r3, r3
 80066b2:	401a      	ands	r2, r3
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066b8:	f7ff f9e8 	bl	8005a8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <vPortFree+0xbc>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4413      	add	r3, r2
 80066c6:	4a09      	ldr	r2, [pc, #36]	; (80066ec <vPortFree+0xbc>)
 80066c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066ca:	6938      	ldr	r0, [r7, #16]
 80066cc:	f000 f874 	bl	80067b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <vPortFree+0xc0>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3301      	adds	r3, #1
 80066d6:	4a06      	ldr	r2, [pc, #24]	; (80066f0 <vPortFree+0xc0>)
 80066d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066da:	f7ff f9e5 	bl	8005aa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066de:	bf00      	nop
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	200042f4 	.word	0x200042f4
 80066ec:	200042e4 	.word	0x200042e4
 80066f0:	200042f0 	.word	0x200042f0

080066f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006700:	4b27      	ldr	r3, [pc, #156]	; (80067a0 <prvHeapInit+0xac>)
 8006702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00c      	beq.n	8006728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3307      	adds	r3, #7
 8006712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0307 	bic.w	r3, r3, #7
 800671a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	4a1f      	ldr	r2, [pc, #124]	; (80067a0 <prvHeapInit+0xac>)
 8006724:	4413      	add	r3, r2
 8006726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800672c:	4a1d      	ldr	r2, [pc, #116]	; (80067a4 <prvHeapInit+0xb0>)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006732:	4b1c      	ldr	r3, [pc, #112]	; (80067a4 <prvHeapInit+0xb0>)
 8006734:	2200      	movs	r2, #0
 8006736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	4413      	add	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006740:	2208      	movs	r2, #8
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1a9b      	subs	r3, r3, r2
 8006746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0307 	bic.w	r3, r3, #7
 800674e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	4a15      	ldr	r2, [pc, #84]	; (80067a8 <prvHeapInit+0xb4>)
 8006754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006756:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <prvHeapInit+0xb4>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2200      	movs	r2, #0
 800675c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <prvHeapInit+0xb4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006774:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <prvHeapInit+0xb4>)
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <prvHeapInit+0xb8>)
 8006782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <prvHeapInit+0xbc>)
 800678a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800678c:	4b09      	ldr	r3, [pc, #36]	; (80067b4 <prvHeapInit+0xc0>)
 800678e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006792:	601a      	str	r2, [r3, #0]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	200006d8 	.word	0x200006d8
 80067a4:	200042d8 	.word	0x200042d8
 80067a8:	200042e0 	.word	0x200042e0
 80067ac:	200042e8 	.word	0x200042e8
 80067b0:	200042e4 	.word	0x200042e4
 80067b4:	200042f4 	.word	0x200042f4

080067b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067c0:	4b28      	ldr	r3, [pc, #160]	; (8006864 <prvInsertBlockIntoFreeList+0xac>)
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	e002      	b.n	80067cc <prvInsertBlockIntoFreeList+0x14>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d8f7      	bhi.n	80067c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	4413      	add	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d108      	bne.n	80067fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	441a      	add	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	441a      	add	r2, r3
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	429a      	cmp	r2, r3
 800680c:	d118      	bne.n	8006840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <prvInsertBlockIntoFreeList+0xb0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d00d      	beq.n	8006836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	441a      	add	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	601a      	str	r2, [r3, #0]
 8006834:	e008      	b.n	8006848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006836:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <prvInsertBlockIntoFreeList+0xb0>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
 800683e:	e003      	b.n	8006848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	429a      	cmp	r2, r3
 800684e:	d002      	beq.n	8006856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	200042d8 	.word	0x200042d8
 8006868:	200042e0 	.word	0x200042e0

0800686c <__libc_init_array>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	4d0d      	ldr	r5, [pc, #52]	; (80068a4 <__libc_init_array+0x38>)
 8006870:	4c0d      	ldr	r4, [pc, #52]	; (80068a8 <__libc_init_array+0x3c>)
 8006872:	1b64      	subs	r4, r4, r5
 8006874:	10a4      	asrs	r4, r4, #2
 8006876:	2600      	movs	r6, #0
 8006878:	42a6      	cmp	r6, r4
 800687a:	d109      	bne.n	8006890 <__libc_init_array+0x24>
 800687c:	4d0b      	ldr	r5, [pc, #44]	; (80068ac <__libc_init_array+0x40>)
 800687e:	4c0c      	ldr	r4, [pc, #48]	; (80068b0 <__libc_init_array+0x44>)
 8006880:	f000 f820 	bl	80068c4 <_init>
 8006884:	1b64      	subs	r4, r4, r5
 8006886:	10a4      	asrs	r4, r4, #2
 8006888:	2600      	movs	r6, #0
 800688a:	42a6      	cmp	r6, r4
 800688c:	d105      	bne.n	800689a <__libc_init_array+0x2e>
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	f855 3b04 	ldr.w	r3, [r5], #4
 8006894:	4798      	blx	r3
 8006896:	3601      	adds	r6, #1
 8006898:	e7ee      	b.n	8006878 <__libc_init_array+0xc>
 800689a:	f855 3b04 	ldr.w	r3, [r5], #4
 800689e:	4798      	blx	r3
 80068a0:	3601      	adds	r6, #1
 80068a2:	e7f2      	b.n	800688a <__libc_init_array+0x1e>
 80068a4:	08006988 	.word	0x08006988
 80068a8:	08006988 	.word	0x08006988
 80068ac:	08006988 	.word	0x08006988
 80068b0:	0800698c 	.word	0x0800698c

080068b4 <memset>:
 80068b4:	4402      	add	r2, r0
 80068b6:	4603      	mov	r3, r0
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d100      	bne.n	80068be <memset+0xa>
 80068bc:	4770      	bx	lr
 80068be:	f803 1b01 	strb.w	r1, [r3], #1
 80068c2:	e7f9      	b.n	80068b8 <memset+0x4>

080068c4 <_init>:
 80068c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c6:	bf00      	nop
 80068c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ca:	bc08      	pop	{r3}
 80068cc:	469e      	mov	lr, r3
 80068ce:	4770      	bx	lr

080068d0 <_fini>:
 80068d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d2:	bf00      	nop
 80068d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d6:	bc08      	pop	{r3}
 80068d8:	469e      	mov	lr, r3
 80068da:	4770      	bx	lr
